<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Integrate Express with Swagger]]></title>
    <url>%2FswaggerTutorial.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
        <tag>API docs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Shortcuts]]></title>
    <url>%2Fmymacshortcut.html</url>
    <content type="text"><![CDATA[Alfred: Double Command Alfred file search: Space + Search Content Alfred file preview: shift Alfred Search Chrome Bookmark: b + Search Content Alfred 查单词 define opera Alfred 模糊单词拼写查询：spell dialect Alfred 查看剪切板：clip Alfred 清空剪切板：clean Alfred google翻译： translate sth Alfred google搜索： ggl sth Alfred map搜索: maps sth Alfred gmail搜索： gmail sth Alfred 添加文件进缓存：Option + Up Alfred 添加文件进缓存，然后光标下移： Option + Down Alfred 删除缓存最后一个文件： Option + Left Alfred 缓存文件action: Option + Right Alfred Home Folder: ` 调出Preferences: Command + &lt; 切换APP：Command + Tab 全屏: Control-Command-F 修改后：Control+ Space [基于BetterTouchTool] 切换桌面: Control + Left (Right){F5/F6} Launchpad: Command + Up Launchpad切换页面： Command + Left(Right) Lanuchpad 删除app：长按Option Spotlight: Control + Space Chrome 前进、后退: Command + Left(Right) 黑白模式切换：Control + Command 打开新标签 Command + T 切换输入法: Command + Space 打开欧陆词典: Option + Up 1password7: Command + \ 显示隐藏文件夹:Shift + Command + . 调整菜单栏图标顺序：Command + drag vscode 自动换行: option + z 三个键盘流神器： BetterTouchTool： 定制任意快捷键 Alfred3：一个搜索框打开一切，不再需要dock Context： 强化版的程序切换]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install PostGres in Mac]]></title>
    <url>%2Fpostgreinstallonmac.html</url>
    <content type="text"><![CDATA[Installation 123brew updatebrew doctorbrew install postgresql Initialize DB 1initdb /usr/local/var/postgres Start Service 1pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start Configure Service on Boot 123ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist Create Default Database 1createdb # create database postgres(default name). CLI 1234567891011121314151617181920psql# user：当前mac用户# database：用户同名数据库# 主机：localhost# 端口号：5432，postgresql的默认端口是5432psql -U [user] -d [database] -h [host] -p [post]# \password：设置当前登录用户的密码# \h：查看SQL命令的解释，比如\h select。# \?：查看psql命令列表。# \l：列出所有数据库。# \c [database_name]：连接其他数据库。# \d：列出当前数据库的所有表格。# \d [table_name]：列出某一张表格的结构。# \du：列出所有用户。# \e：打开文本编辑器。# \conninfo：列出当前数据库和连接的信息。# \password [user]: 修改用户密码# \q：退出 Configure User 12345CREATE USER username WITH PASSWORD 'password';DROP DATABASE postgres;CREATE DATABASE user_database OWNER username;GRANT ALL PRIVILEGES ON DATABASE user_database to username;ALTER ROLE username CREATEDB; Mac安装PostgreSQL]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Commands All in One]]></title>
    <url>%2Flinuxcommands.html</url>
    <content type="text"><![CDATA[File Permission r: Read w: Write x: eXecute Binary Octal Permission 000 0 — 001 1 –x 010 2 -w- 011 3 -wx 100 4 r– 101 5 r-x 110 6 rw- 111 7 rwx mkdir used to create directroy mkdir [options] [params] Options: -m: --mode set the permission while creating -p: --parents automatically create parents directories –version: display the version info Params: directory names, separated by space Example: 1234567# create test folder with 700 permissionmkdir -m 700 /usr/meng/test# create os_1 folder with 700 permission, automatically create parents folders.mkdir -p-m 750 bin/os_1mkdir -p /data/db id display the user id and the group id id [-gGnru][--help][--version][username] Options -u: display current user id -n: display current user name (used with -u) Examples 12id -u # Result: 501id -un # Result: xiangt chown modify the owner of files or directories\ must using root Options: -R: recursive all files Examples 12# set current user as the ownersudo chown -R `id -un` /data/db chmod modify the read, write and execute permission of files or directories. 属主权限 属组权限 其它用户权限 Octal number Symbolic Permission 0 --- none 1 --x execute 2 -w- write 3 -wx write/execute 4 r-- read 5 r-x read/execute 6 rw- read/write 7 rwx read/write/execute Examples 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[Using Node.js require vs. ES6 import/export]]></title>
    <url>%2Frequirevsimport.html</url>
    <content type="text"><![CDATA[Are there any performance benefits to using one over the other? The current answer is no, because none of the current browser engines implements import/export from the ES6 standard.]]></content>
  </entry>
  <entry>
    <title><![CDATA[弟子规讲课稿讨论]]></title>
    <url>%2Fdizigui.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>传统文化</category>
      </categories>
      <tags>
        <tag>弟子规</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Push 免输账户密码]]></title>
    <url>%2Fgit-credential.html</url>
    <content type="text"><![CDATA[123456git config --global credential.helper storegit push# type your username and password# Next time you don't have to type]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 构建RESTful API]]></title>
    <url>%2Fnodejs.html</url>
    <content type="text"><![CDATA[Introduction Install Node.js Run Node.js Node Module System NPM Introduction What is Node.js? Running Environemnt for Javascript outside browsers, often used for create backend services - API. Node is ideal for building highly-scalable, data-insentive and real-time apps. Easy to develop Can be used for prototyping and agile development Can be used in industry for large projects like Uber, Paypal, Netflix and Walmart. Friendly for javascript programmers Big community to support, libs I have alreay install node yarn Where is Node from? extract the javascript engine from Chrome called v8 integrate the v8 with additional modules Asynchronous in Node.js Synchronous by default in ASP.net Asynchronous by default in nodejs 异步机制：使用Event Queue,频繁检查，执行任务 What is Node.js used for? Node is ideal for I/O Intensive Applications. Node is not ideal for CPU Intensive Applications like video encoding and image processing applications. Install Node.js 1234# 也可以下载mac安装包brew install node# 查看版本node --version Run Node.js 1234567cd workspacemkdir newAppcd newAppcode . # use VS code# create js file and runnode app.js # for example Code Example 12345678hello = () =&gt; &#123; console.log('hello world')&#125;hello(); // vscode execute through node automaticallyconsole.log(window) // error// no window in node, that's for browser. Javascript Module Global object object that we can access everywhere, there is an object called global. 1234567global.console.log(1);global.setTimeout();global.clearTimeout();global.setInterval();global.clearInterval(); But in browser, the global obejct is the window object. 1234567window.console.log(1);window.setTimeout();window.clearTimeout();window.setInterval();window.clearInterval(); And we can just simplify it in whichever env. 1234567console.log(1);setTimeout();clearTimeout();setInterval();clearInterval(); But if you design your own obejct, it doesn’t belongs to global obejct. node different global and local 12var message = "hello";console.log(global.message);// undefinded error However it belongs to window if you use the browser rather than node. window literally eat all food all things belong to window. 12var message = 'hello';console.log(window.message); Insights: Why we need to use Module? Node is better. Browser is worse. Two js run in browser, with two variables or methods of the same name, the later one will override the previous one. Therefore, we use module to localize variables to avoid collapse. 在浏览器中，所有变量和方法都属于window 在Node中，如非特别定义，所有变量和方法都属于自己所在的文件，而不属于global Module Import and Export Module like private in Java Export module.exports.log = log 1234567891011121314151617// ./logger.jsvar url = "http://www.example.com/login";log = (m) =&gt; &#123; console.log(m)&#125;// export the log function as log.module.exports.log = log;// export single function module.exports = log;// Ormoduel.exports = &#123; log: log, url: url&#125; Import const {log, url} = require('./logger') 123456789101112// Way Oneconst logger = require('./logger') // const is better// execute the log methodlogger.log();// Way Two - better, more lightweightconst &#123;log, url&#125; = require('./logger')// If it is a single function// module.exports = log;const log = require('./logger');log("hello") './logger' vs 'logger' './logger': Current Ddirectory 'logger': Built in Current Directory in node_modules Node Wrapper 12345678(function (exports, require, module, __filename, __dirname) &#123; // file code console.log(exports); console.log(require); console.log(module); console.log(__filename); console.log(__dirname);&#125; Node Modules API Docs File System HTTP 12345678910const http = require('http');const server = http.createServer();// action after connection eventserver.on('connection',(s =&gt; console.log("new connection."))); // very low level// port 3003server.listen(3003);console.log('Listening on port 3000...'); 12345678910111213141516171819202122const http = require('http');const server = http.createServer( (req,res) =&gt; &#123; if (req.url === '/')&#123; res.write("hello world"); res.end(); &#125; if (req.url === '/api') &#123; res.write(JSON.stringify(&#123; "1":2 &#125;)); res.end(); &#125; &#125;);// port 3003server.listen(3003);console.log('Listening on port 3003...'); OS Path Process Query Strings Stream NPM Create NPM Project Switch Version of npm 1sudo npm i -g npm@5.5.1 Create package.json file 123npm init# default settingsnpm init --yes Install Node Package package is installed in node_modules 1234npm install underscore# shorternpm i underscore# you don't have to add --save anyore A better way yarn 12yarn add underscoreyarn remove underscore install all package in package.json 123yarn# ornpm i Git Ignore Packages to Push 123456789git inittouch .gitignore## inside .gitignorenode_modules/git add .git commit -m "..."git push Underscore.js 12var _ = require('underscore');console.log(_.contains([1,2,3],2)) Semantic Versioning 4.13.6 (Patch) 6: bugs fixing version (Minor) 13: new features version without breaking exsiting API (Main) 4: new features version with breaking existing application exact version : 4.13.6 stable Major and Minor: ~4.13.6 stable Major: ^4.13.6 Inspect installed versions 12345yarn listyarn list --depth=0# 效果是不一样的npm listnpm list --depth=0 View Packages 12npm view mongoosenpm view mongoose dependencies Update outdated packages 123456789npm outdated# this will only update minor and patch updatenpm update# update for major updatesudo npm i -g npm-check-updatesncu -u # to upgrade the json fileyarn # execute the update Install Packages only for Dev 1npm i jshint --save-dev Uninstall Packages 123npm un mongoose# oryarn remove mongoose Global Packages Global: can be used under any folders Local: can only be used withon on folder 12345678# update the npm to the latest versionsudo npm i -g npm# to see all outdated global packagesnpm -g outdated# uninstall global packagesnpm un -g npm NPM Registry Publish Your Own Package to NPM Registry 12345# prepare the projectmkdir lion-libcd lion-lib/npm init --yestouch index.js 12// index.jsmodule.exports.url = "asdadsad" 12345678# register for registrynpm adduser# loginnpm login# make sure your package name is unique in the pacakge.json file and the push to the registrynpm publish Updating your Published Packages 1234567# first you have to update the versio numbernpm version majornpm version minornpn version patch# then publish to the registrynpm publish RESTful Service REST Definition REST: Representational State Transfer It’s a convention for building these HTTP serivces. HTTP Protocol Http://vidly.com/api/customers/1 Http: Protocol vidly.com: Domain api: Path customers: Resource 1: Resource Unique Identifier HTTP Methods GET: retrive resources POST: upload resources PUT: update global resources PATCH: update local resources DELETE: delete resources 12345GET /api/customersGET /api/customers/1PUT /api/customers/1DELETE /api/customers/1POST /api/customers Node Monitor Reload the Node Automatically when changes apply. 123sudo npm i -g nodemon# instead of node app.jsnodemon app.js 在配置vscode code runner为nodemon之后，nodemon失效 shell中nodemon app.js, nodemon不会失效. 推荐使用shell的方式 Express Basics Get to know express 1234# inspect it in shellnpm view express# get the official website# http://expressjs.com/ Install Express 1yarn add express Hello World 123456789101112// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.get('/',(req, res) =&gt; &#123; res.send("Hello World")&#125;);// start listenapp.listen(port); Basic Routes 1app.METHOD(URL,CALLBACK_FUNC) Req Method Method Description req.get() 获取header中某属性的值 req.is() 判别Content-Type Req Properties Property Description req.body 键值对数据 req.cookies 获取cookies req.hostname 获取域名 req.ip 获取ip req.method 获取方法 req.originalUrl 完整url req.baseUrl 路由插入的路径 req.path 细节路径 req.params 存储参数化数据 req.protocol http/https req.query 获取url中?间所夹参数 Res Method Method Description res.download() 提示将要下载文件。 res.end() 结束响应进程。 res.json() 发送 JSON 响应。 res.jsonp() 在 JSONP 的支持下发送 JSON 响应。 res.redirect() 重定向请求。 res.render() 呈现视图模板。 res.send() 发送各种类型的响应。 res.sendFile 以八位元流形式发送文件。 res.sendStatus() 设置响应状态码并以响应主体形式发送其字符串表示。 Middleware Routes 统一请求中间件：适合做User Authentication 12345678910111213141516// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.all('/', (req,res,next) =&gt; &#123; console.log('authentication'); next();&#125;);app.get('/',(req, res) =&gt; &#123; res.send("How are you?")&#125;);// start listenapp.listen(port); 单一路径多个回调 1234567891011121314// configure expressvar express = require('express');var app = express();var port = process.env.PORT || 3000;// routesapp.route("/").get((req,res)=&gt; &#123; res.send("get test");&#125;).post((req,res)=&gt; &#123; res.send("post test");&#125;)// listenapp.listen(port); express.Router Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”. Router Method Method Description router.all() 匹配所有http请求，无中间件 router.get() 匹配GET请求 router.param() 匹配特定参数 router.route() 单一路径匹配多个回调 router.use() 匹配所有http请求, 添加中间件 12345678910111213141516171819202122232425262728293031// bird.js// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router(); var port = process.env.PORT || 3000;// middlewarerouter.use((req,res,next) =&gt; &#123; console.log("authentication"); next();&#125;)router.get("/",(req,res) =&gt; &#123; res.send("main page.")&#125;)router.post("/",(req,res) =&gt; &#123; res.send("main post.")&#125;)router.get("/about", (req,res)=&gt;&#123; res.send("about page.")&#125;)// mount the middleware(router);app.use('/',router);// start listenapp.listen(port);module.exports.router = router; route.use’s callback is a middleware 12345// main.jsvar &#123;router&#125; = require('./birds');// birds is also a middlewareapp.use('/birds', birds);app.listen(3000); Parameter Route 123456789101112131415161718192021222324252627282930313233// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);//实际上 ： 充当了一个通配作用，通配规则如何，请看验证参数router.get('/:id', (req, res) =&gt; &#123; res.send('id namespace.');&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Parameter Check 有時候我們會需要針對傳入的路由參數來進行篩選或驗證，例如檢查使用者所輸入的字串是否是合法的名稱，這時候就可以使用 .param() 這個專門用來處理參數的 middleware： 12345678910111213141516171819202122232425262728293031323334353637383940414243// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);// 位于路由之前，充当另外一个middlewarerouter.param('id', (req, res, next, id) =&gt; &#123; // validation logi here console.log('valid id'); // send back request req.id = id; next();&#125;);router.get('/:id/:name', (req, res) =&gt; &#123; res.send(req.params); // res.send(req.params.name);&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Query String Parameters 1234567891011121314151617181920var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/:id", (req,res) =&gt; &#123; // 对应？后面的query参数 // 例如: localhost:3000/courses/1?sortBy=name, query中包含sortBy的key-value pair res.send(req.query);&#125;);app.use("/courses",router);app.listen(port); HTTP Get Request 1234567891011121314151617181920212223242526272829303132333435363738// http get request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);app.use("/courses",router);app.listen(port); HTTP Post Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// http post request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);// use the json middleware.app.use(express.json());app.use("/courses",router);app.listen(port); Simple Input Validation 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - simple version if (! req.body.name || req.body.name.length &lt; 3)&#123; res.status(400).send("Name is required and should be minimum 3 characters."); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); Complex Input Validation yarn add joi 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var express = require("express");// import joiconst Joi = require('joi')var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - joi version const schema = &#123; name: Joi.string().min(3).required(), &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); req.body vs req.params req.body里装的是post的data req.params里装的是url中的某个值 HTTP Update Request 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); HTTP Delete Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);router.delete("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) &#123; res.status(404).send("Course doesn't exsit."); return; &#125; // this happens in place courses.splice(courses.indexOf(course),1); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); Code One Genre: Vidly 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192var express = require("express");// for json validationvar Joi = require("joi");var app = express();var port = process.env.PORT || 3000;var router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre); console.log(genres);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)// for parsing json objectapp.use(express.json());app.use("/api/genres",router);app.listen(port); Advanced Express Middleware Middleware: modular and mountable component Custom Middleware function 12345// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;) Build-in Middlware the url encoded middleware 1app.use(express.urlencoded(&#123;extended: true&#125;)) the static resouces hosting middleware 123// static files hosted in "./public" folder// access by localhost:3000/filename.app.use(express.static("public")); Third Party Middleware Resources the performance matters. helmet - https 1npm i helmet The helmet test failed. 12const helmet = require('helmet')app.use(helmet()) // as early as possible. morgan - console logger 1npm i morgan 12const morgan = require('morgan');app.use(morgan(tiny)); Environment Development Production Testing Get the ENV variable in Javascript First method 1process.env.NODE_ENV; // might be undefined. Second method 1app.get("env") // if undefined will return default value: development. Use Morgan only in Development ENV 123456// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Set the Environment Variable in shell 1export NODE_ENV=production Use Config Management Package 1npm install config write the config file 1234567// development&#123; "name" : "My Express App - Development", "mail": &#123; "host": "dev-mail-server" &#125;&#125; 通过export NODE_ENV可以自动载入相应配置 12345678910111213const config = require("config");// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Debugging 不必每次都删除consol.log() 设置环境变量，控制debug启动或者关闭 设置显示信息的内容，程度 Install the Debug Package 1npm i debug Use debugger in code 123456const startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");// console.log("Morgan Loaded in Development Stage")startupDebugger("Morgan Loaded in Development Stage");dbDebugger("Database debugger started.") Set the Env and Start Project 12345678910# set the debugger to app: startupexport DEBUG=app:startup # enable startup debuggingexport DEBUG=app:db # enable database debuggingexport DEBUG= # disable debugging.export DEBUG=app:startup,app:db # enable two debuggingexport DEBUG=APP:* # enable all debuggingnodemon app.js# shortcut to set debug and lanuch the applicationDEBUG=app:db nodemon app.js Template Engine used to return html Pug Mustache EJS Install pug 1npm i pug Set the views file. Use views in code 12345678910app.get("/", (req,res) =&gt; &#123; // view file name + variables res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);app.set('view engine', 'pug');app.set('views','./views'); Database Integration Code One Genre: Refractured FolderDescriptionconfigstore configurationmiddlewarestore all middlewarespublicstore static filesroutersstore all routersviewsstore template pug files 12345678910111213// routers/home.jsconst express = require("express");const router = express.Router();router.get("/", (req,res) =&gt; &#123; res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);module.exports = router; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192// routers/genres.jsconst express = require("express");const Joi = require("joi");const router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;)// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)module.exports = router; 123456789101112131415161718192021222324252627282930313233343536373839// app.jsconst startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");const config = require("config");const morgan = require("morgan");const express = require("express");const home = require("./routes/home");const genres = require("./routes/genres")const app = express();const port = process.env.PORT || 3000;// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); startupDebugger("Morgan Loaded in Development Stage")&#125;// database work ...dbDebugger("database debugger")app.set('view engine', 'pug');app.set('views','./views');app.use(express.static("public"));app.use(express.urlencoded(&#123;extended: true&#125;))app.use(express.json());app.use("/",home);app.use("/api/genres",genres);app.listen(port); MongoDB Configuration Install MongoDB 1brew install mongodb Create Data Directory Modify mongod.conf to set the database path. 12sudo mkdir -p /data/dbsudo chown -R `id -un` /data/db Run MongoDB in Shell 12mongod # ormongod --config /usr/local/etc/mongod.conf the port is 27017 Run MongoDB by brew 12brew services start mongodbbrew services stop mongodb MongoDB GUI Client Robot 3T [Simple][Free] dbKoda [import &amp; output &amp; charts] Studo 3T [Support SQL][Expensive] Node to MongoDB Connect simple api: mongoose. Install Mongoose 1npm i mongoose Connect to Mongodb mongoose will create database for you automatically once you create a new record in it. 12345678910const mongoose = require('mongoose');// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123;useNewUrlParser: true&#125;) // MongoDB will create the playground automatically .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err)); Define Collections and Validations 123456789101112// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema); CRUD Create Documents Mongo Conceptcollection: similar to one table in the relational databasedocument: similar to one row in the relational databaseMongoose Conceptschema: define the shape of documentsmodel: correspont to class in javascript, referring to collection, defined and created using the schema. Mongoose Data Types String Number(包含小数) Date Boolean Array Map Mixed ObjectId Decimal128 Buffer 12345678910111213141516171819// CREATE operationconst data = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true&#125;;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;createSingleCourse(data); Query Documents Compare Operator$eq: equal$ne: not equal$gt: greater than$gte: greater than or equal to$lt: less than$lte: less than or equal to$in: in$nin: not inLogical Opeartoror: orand :and 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;getAllCourses();// READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourse();// READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourseCompare();// READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareOr();// READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareRegular();// READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;getCourseCompareCount();// READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;getCourseComparePagination(); Update Documents When you need check the existence of document at first 12345678910111213// UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;findThenUpdateCourse("5c919cb9310fd622b1db90bd"); When you confirm the existence of document Update Operator 123456789101112// UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourse("5c919cb9310fd622b1db90bd"); When you want to get the old documents as results. 12345678910// UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourseWithOldRecords("5c919cb9310fd622b1db90bd"); When you want to get the updated documents as results. 12345678910// UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd"); Remove Documents 123456789async function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;removeCourse("5c919cb9310fd622b1db90bd"); Code Two Course: CRUD 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207const mongoose = require('mongoose');mongoose.set('useCreateIndex',true);// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123; useNewUrlParser: true &#125;) .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err));// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema);// CRUD is based on model.// 1. CREATE operationconst data1 = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'database', 'backend' ], // use default value for date isPublished: true, price: 10.2&#125;;const data2 = &#123; name: 'Node Js Course', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true, price: 30&#125;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;// createSingleCourse(data1);// createSingleCourse(data2);// 2.1 READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;// getAllCourses();// 2.2 READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourse();// 2.3 READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourseCompare();// 2.4 READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareOr();// 2.5 READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareRegular();// 2.6 READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;// getCourseCompareCount();// 2.6 READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;// getCourseComparePagination();// 3.1 UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;// findThenUpdateCourse("5c919cb9310fd622b1db90bd");// 3.2 UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourse("5c919cb9310fd622b1db90bd");// 3.3 UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourseWithOldRecords("5c919cb9310fd622b1db90bd");// 3.4 UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;// updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd");// 4 REMOVE Operation - update with new as resultasync function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;// removeCourse("5c919cb9310fd622b1db90bd"); Data Validation Validation Happens in Mongoose Level, not in Database Level. Three Levels of Validation:Router Level: JoiMongoose Level: Built-in ValidationDatabase Level: MySQL … 12345678910// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;); Error handling 12345678910111213async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); try &#123; // return a promise const result = await course.save(); &#125;catch(err) &#123; console.log(err.message); &#125;&#125;createSingleCourse(data1);createSingleCourse(data2); Built-in Validation Price is only required when it is published 1234567891011121314151617181920212223242526const courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: [String], date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Custom Validation 123456789101112131415161718192021222324252627282930313233343536// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; validator: function(v) &#123; return v &amp;&amp; v.length &gt; 0; &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Async Validation What if you need to call another api during the validation? The Answer is the callback function 12345678910111213141516171819202122232425262728293031323334353637383940// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; isAsync: true, validator: function(v, callback) &#123; setTimeout(() =&gt; &#123; const result = v &amp;&amp; v.length &gt; 0; callback(result); &#125;, 2000); &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;);]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Nodejs</tag>
        <tag>Restful API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端工程师技术图谱]]></title>
    <url>%2Fbackendallinone.html</url>
    <content type="text"><![CDATA[数据结构 常用算法 并发 操作系统 设计模式 运维 &amp; 统计 &amp; 技术支持 中间件 网络 数据库 搜索引擎 … 数据结构 队列 集合 链表、数组 字典、关联数组 栈 树 二叉树 完全二叉树 平衡二叉树 二叉查找树（BST） 红黑树 B-，B+，B*树 LSM 树 BitSet 常用算法 排序、查找算法 选择排序 冒泡排序 插入排序 快速排序 归并排序 希尔排序 堆排序 计数排序 桶排序 基数排序 二分查找 Java 中的排序工具 布隆过滤器 字符串比较 KPM 算法 深度优先、广度优先 贪心算法 回溯算法 剪枝算法 动态规划 朴素贝叶斯 推荐算法 最小生成树算法 最短路径算法 并发 多线程 线程安全 一致性、事务 事务 ACID 特性 事务的隔离级别 锁 Java中的锁和同步类 公平锁 &amp; 非公平锁 悲观锁 &amp; 乐观锁 &amp; CAS ABA 问题 CopyOnWrite容器 RingBuffer 可重入锁 &amp; 不可重入锁 互斥锁 &amp; 共享锁 死锁 操作系统 计算机原理 进程 线程 协程 Linux 设计模式 设计模式的六大原则 23种常见设计模式 应用场景 单例模式 责任链模式 MVC IOC AOP UML 微服务思想 康威定律 运维 &amp; 统计 &amp; 技术支持 常规监控 APM 统计分析 持续集成(CI/CD) Jenkins 环境分离 自动化运维 Ansible puppet chef 测试 TDD 理论 单元测试 压力测试 全链路压测 A/B Test 虚拟化 KVM Xen OpenVZ 容器技术 Docker 云技术 OpenStack DevOps 文档管理 中间件 Web Server Nginx OpenResty Apache Httpd Tomcat 架构原理 调优方案 Jetty 缓存 本地缓存 客户端缓存 Memcached Redis 架构 回收策略 Tair 消息队列 消息总线 消息的顺序 RabbitMQ RocketMQ ActiveMQ Kafka Redis 消息推送 ZeroMQ 定时调度 单机定时调度 分布式定时调度 RPC Dubbo Thrift gRPC 数据库中间件 Sharding Jdbc 日志系统 日志搜集 配置中心 API 网关 网络 协议 OSI 七层协议 TCP/IP HTTP HTTP2.0 HTTPS 网络模型 Epoll NIO kqueue 连接和短连接 框架 零拷贝（Zero-copy） 序列化(二进制协议) Hessian Protobuf 数据库 基础理论 数据库设计的三大范式 MySQL 原理 InnoDB 优化 索引 聚集索引, 非聚集索引 复合索引 自适应哈希索引(AHI) explain NoSQL MongoDB Hbase 搜索引擎 搜索引擎原理 Lucene Elasticsearch Solr sphinx 性能 性能优化方法论 容量评估 CDN 网络 连接池 性能调优 流式计算 Storm Flink Kafka Stream 应用场景 Hadoop HDFS MapReduce Yarn Spark 安全 web 安全 XSS CSRF SQL 注入 Hash Dos 脚本注入 漏洞扫描工具 验证码 DDoS 防范 用户隐私信息保护 加密解密 对称加密 哈希算法 非对称加密 服务器安全 数据安全 数据备份 网络隔离 内外网分离 登录跳板机 授权 RBAC OAuth2.0 常用开源框架 开源协议 日志框架 Log4j、Log4j2 Logback ORM 网络框架 Web 框架 Spring 家族 工具框架 分布式设计 扩展性设计 稳定性 &amp; 高可用 硬件负载均衡 软件负载均衡 限流 应用层容灾 跨机房容灾 容灾演练流程 平滑启动 数据库扩展 读写分离模式 分片模式 服务治理 服务注册与发现 服务路由控制 分布式一致 CAP 与 BASE 理论 分布式锁 分布式一致性算法 PAXOS Zab Raft Gossip 两阶段提交、多阶段提交 幂等 分布式一致方案 分布式 Leader 节点选举 TCC(Try/Confirm/Cancel) 柔性事务 分布式文件系统 唯一ID 生成 全局唯一ID 一致性Hash算法 设计思想 &amp; 开发模式 DDD(Domain-driven Design - 领域驱动设计) 命令查询职责分离(CQRS) 贫血，充血模型 Actor 模式 响应式编程 DODAF2.0 Serverless 项目管理 架构评审 重构 代码规范 RUP 看板管理 SCRUM 极限编程 敏捷开发 结对编程 通用业务术语 技术趋势 架构师素质 团队管理 招聘 资讯 行业资讯 公众号列表 博客 团队博客 个人博客 综合门户、社区 问答、讨论类社区 行业数据分析 专项网站 其他类 推荐参考书 在线电子书 纸质书 开发方面 架构方面 技术管理方面 基础理论 工具方面 大数据方面 技术资源 开源资源 手册、文档、教程 在线课堂 会议、活动 常用APP 找工作 工具 代码托管 文件服务 综合云服务商]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Programmer</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么在中国，规定白衣不能阅戒?]]></title>
    <url>%2Fjielv.html</url>
    <content type="text"><![CDATA[为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。 为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[佛法在印度的分期弘扬以及三乘教学]]></title>
    <url>%2Ffofafenqi.html</url>
    <content type="text"><![CDATA[一。小乘佛教时期 1. 原始佛教时期 2. 部派佛教时期 二。 大乘佛教时期 三。 密教时期 四。 小乘、大乘、密乘 五。 教外别传 [TOC] 一。小乘佛教时期 佛法在印度传播 重点： 出离红尘，持戒，修四禅八定，寂灭定 见地： 知苦及苦的根源，离情去欲 1. 原始佛教时期 佛初转法轮 - 涅槃，约100年左右 教授重点：小乘佛法 弟子果味：有弟子证得阿罗汉果 2. 部派佛教时期 涅槃后400年 教授重点：小乘教理 弟子果位：已证阿罗汉果的弟子从阿罗汉转向菩萨乘 二。 大乘佛教时期 在印度传播 重点：六度（布施，持戒，忍辱，精进，禅定，般若）；入世行菩萨道，自度度人，圆满功德。 见地：色空不二，心无挂碍。 修证：中观、唯识，证十地菩萨果位 佛涅槃后的第二个500年 教授重点：大乘佛法 弟子果位：有弟子证得菩萨果味 三。 密教时期 印度佛法传播转入密乘 重点：身口意清净，与诸佛相应，得到果位上师和佛菩萨的灌顶。 主张：以欲制欲，以贪治贪，最后实证“这世界一切法与实相不相违背”，即身成佛。 佛涅槃后的第三个500年 教授重点：密法 弟子果位：菩萨乘和金刚乘果味皆有人证得 四。 小乘、大乘、密乘 《法华经》：声闻乘，缘觉乘，菩萨乘 现在：声闻缘觉为小乘，菩萨为大乘，大乘又分显密两宗。两宗在戒律和修证法门上都有很大不同，但是都以大乘见地为指导思想。 三乘：小乘，大乘，密乘 五。 教外别传 小乘，大乘，密乘都是此地修学。称为渐修。 教外别传，以心印心。称为顿悟。 佛嘱托迦叶尊者将以心印心在印度传下去，在二十八祖菩提达摩之时，传至中国，从而形成了禅宗！ 如果我们把成佛比喻成从有生死的此岸到解脱生死的彼岸,那佛法就像一艘从此岸到彼岸的船或航海的灯塔。我们要驾着这艘船，在航灯的照耀下，越过心灵的情天欲海，破除在三界中的种种执着，分别，而后登上成佛的变。那时，此岸彼岸、这艘船以及灯塔对于我们来说也如梦如幻，可以全部放下不要了。此时，我们领悟的就是教外别传的心法。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple Notes]]></title>
    <url>%2Fdailynotes.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>DayNotes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Github上传大文件]]></title>
    <url>%2Fgitlfs.html</url>
    <content type="text"><![CDATA[Install git lfs 12# mac上安装brew install git-lfs Git init 必须在git repo中使用git lfs 123git lfs installgit init# git add -A Track file 在push大文件前，要手动track这些文件 123git lfs track "bigfile.suffix"git lfs track "*.zip"git lfs track "repo/" Commit &amp; Push track之后正常git commit push就可以，会自动上传 12git commit -m "commit comment"git push 后记 期待可以不用track，全自动的git lfs.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git lfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next Generation JavaScript]]></title>
    <url>%2Fes6.html</url>
    <content type="text"><![CDATA[Variables 123var: 可以重复命名，全局作用域let: 可变，块级作用域，不能重复命名const: 不可变 Functions 123function myFunc() &#123;&#125;// ES6const myFunc = (parameters) =&gt; &#123;&#125; Modules 1234567891011121314// ./person.jsexport default person// ./utility.jsexport const clean = () =&gt; &#123;&#125;；export const baseData = 10;// ./app.jsimport person from './person.js'import prs from './person.js'// use &#123;&#125; to specifically import modules from js fileimport &#123;baseData&#125; from './utility.js'import &#123;clean&#125; from './utility.js' Class 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 123456789101112131415161718192021222324252627class Human &#123; constructor()&#123; this.gender = 'male'; &#125; printGender()&#123; console.log(this.gender); &#125;&#125;class Person &#123; constructor()&#123; // must be declared explicitly super(); this.name = 'Max'; this.gender = 'female' &#125; printMyName()&#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); ES6 Syntax 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 子类构造器中必须出现super 因为子类未指定this作用域 12345678910111213141516171819class Human &#123; gender = 'male'; printGender = () =&gt; &#123; console.log(this.gender); &#125;&#125;class Person &#123; name = 'Max'; gender = 'female' printMyName = () =&gt; &#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); Spread &amp; Rest 1234567891011121314151617181920212223242526272829// use ... to unwrap the old arrayconst newArray = [...oldArray,1,2]// use ... to unwrap the old objectconst newObject - &#123;...oldObject, newProp:5&#125;// use ... to wrap variable length of arguments into one arrayfunciton sortArgs(...args)&#123; return args.sort();&#125;// example:// spread function on arrayconst arr1 = [1,2];const arr2 = [...arr1,3];console.log(arr2);// spread function on objectconst obj1 = &#123;name:'James'&#125;;const obj2 = &#123;...obj1, age:28&#125;;console.log(obj2)// rest function in function argsconst filter = (...args) =&gt;&#123; // === check type and value return args.filter(el =&gt; el === 1);&#125;console.log(filter(1,2,3,1)) Destructuring 123456789// array destructuring[a,b] = ['Hello','Max'];console.log(a);console.log(b);// object destructuring&#123;name&#125; = &#123;name:'Max',age:28&#125;;console.log(name);console.log(age); //undefined; Primitive type and Reference type 1234567891011121314151617const person = &#123; name:'James'&#125;;const secondPerson = person; // reference typeconsole.log(secondPerson);const person = &#123; name: 'James'&#125;;const secondPerson = &#123; ...person, age = 29&#125;;console.log(secondPerson); Array Function 无作用域 Cannot be used as the constructor 1234const numbers = [1,2,3];const doubleNumArray = numbers.map(el =&gt; el*2);console.log(doubleNumArray); Promise 先调用后声明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 基本结构new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:'...'. type:'post', success(res)&#123; resolve(res) &#125;, error(err)&#123; reject(err) &#125; &#125; )&#125; ).then((res)=&gt; console.log('success'),(err)=&gt; console.log("error"))// 链式操作var promiseFn1 = new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:"...", type:'post', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; )&#125; &#125;)var promiseFn2 = new Promise((resolve,reject) =&gt; &#123; $.ajax(&#123; url:"...", type:'get', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; &#125;) &#125;)// function -&gt; object orientedpromiseFn1.then(()=&gt; &#123; console.log("promise1 success") return promiseFn2 &#125;).then(()=&gt; console.log('promiseFn2 success!'))]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML页面加载过程]]></title>
    <url>%2Fhtmlloading.html</url>
    <content type="text"><![CDATA[页面加载过程 url解析 -&gt; DNS查询 -&gt; 资源请求 -&gt; 浏览器解析 url结构 协议 + 域名 + 端口 + 路径 + 参数 + 哈希 DNS查询 浏览器 - DNS缓存+DNS服务器 dns-fetch: fetch the ip address for some dns and cache 资源请求 browser -&gt; Request Header + 参数 -&gt; 服务器 服务器 -&gt; status + response header + body -&gt; browser 浏览器解析 DOM + JS(优先) -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>Web Development</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux/Unix下查找大于100mb的文件]]></title>
    <url>%2Ffindbigfilelinux.html</url>
    <content type="text"><![CDATA[查找当前目录下大于100mb的所有文件 1find . -type f -size +100M 显示当前目录大小 1du -sh . 显示当前目录或者文件夹的所占磁盘空间 1du -sh * 显示前十个占用空间最大的目录 1du -s * | sort -nr | head]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习面试攻略(国内)]]></title>
    <url>%2Fmlinterview.html</url>
    <content type="text"><![CDATA[机器学习求职攻略(国内) AI岗位招聘流程 公司与岗位盘点 简历的书写和优化 项目与竞赛 机器学习面试考察点 面试题的真实模样 机器学习求职攻略(国内) 根本原则：投其所好 AI岗位招聘流程 秋招 8月到10月底结束战斗 春招 春节过后 跳槽 春节前后人员流动大，难度系数较低，需要相关背景和项目要求 7月底高校抢人 8月初内推筛选 8月底9月初正式校招 公司与岗位盘点 知名企业 腾讯,阿里，金服，滴滴，网易，百度，头条，美团，陆金所 京东，爱奇艺，宜人贷，360，优酷，土豆，快手，抖音，苏宁易购，小米 岗位职能 平台数据处理类：数据清洗，大样本和高维度数据，mapreduce 算法研究应用类：文本挖掘，推荐，排序，风控，图像识别，商业智能，传统行业应用（预测用户行为） 比较热门的：图像视频，计算机视觉，文本的岗位更多一些， 薪资水平 AI&gt;后端&gt;移动=前端 简历的书写和优化 简历： 个人信息，专业技能，项目经历，科研经历 专业技能: 算法(机器学习算法，深度学习算法)，特定方向技能，编程语言，数据分析处理工具库(python,spark) 项目经历：学校项目，数据科学比赛，实习经历 科研经历：论文，学术成就 原则：真实具体-项目背景，用了什么工具，达到什么效果（加评估)，如果优化和改进的？ 项目与竞赛 核心 项目选择和岗位匹配，体现数据技能，还能加点paper就好了 项目名称和背景 项目数据和特点 项目的流程和关键 项目的核心技术及优化手段 竞赛平台：Kaggle, 天池， DataCastle 读别人的成果 写自己的项目 比赛的选择：和岗位背景匹配的竞赛，体现相关技能和技术的比赛，有优异成绩的比赛 比赛的一般思路： 问题分析和抽象 数据分析和发现 数据与特征处理 建模以及优化（在模型还是在数据层面优化） 机器学习面试考察点 主要内容： 常用机器学习算法理解 数据结构算法题 项目实施与优化细节 业务认识与沟通 考察方面： 算法模型和理论基础扎实程度 工程实现能力和编码水平 业务理解和思考深度 沟通和表达能力 备战资源： 代码算法：快排，二分查找； 剑指offer；leetcode 机器学习 李航《统计学习方法》 周志华《机器学习》 Coursera Stanford《Machine Learning》 Coursera台湾大学《机器学习高级技法》 项目：算法，优缺点，数据，特征，优化等等 海量数据处理： Map_Reduce Hadoop spark 面试题的真实模样 统计 统计的基本知识 贝叶斯公式 排列组合题目 数学期望 统计概率题目 算法 对时间复杂度和空间复杂度有基本的认知 排序与二分查找 链表翻转 打印矩阵倒三角 二叉树中任意两个节点的最近公共祖先 上亿的query中周到频率最高的k个 机器学习 机器学习算法-核心 推到逻辑回归算法，loss function L1/L2正则化的区别 决策树如何完成回归 解释随机森林和GBDT 数据幅度缩放和归一化 是偶写SVM间隔对偶的推到 K-MEANS中k如何选取 优化算法 介绍一些bagging和boosting 过拟合和欠拟合发生的原因，如何缓解过拟合]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My Resume (Markdown)]]></title>
    <url>%2Fmdresume.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Resume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Admin Dashboard MRD]]></title>
    <url>%2Fadmindata.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Job</category>
      </categories>
      <tags>
        <tag>MRD</tag>
        <tag>Job</tag>
        <tag>Private</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asynchronous Client - Axios]]></title>
    <url>%2Faxios.html</url>
    <content type="text"><![CDATA[Install Axios Import Axios Promise Async/await Axios API without async/await Request Config/Options Axios Response Object Axios Error Object Axios Instance Install Axios 123npm install ---save axios# oryarn add axios Import Axios 12345// react styleimport axios from "axios";// javascript styleconst axios = require(); Promise 1234567const promise = new Promise((resolve,reject) =&gt; &#123; if (//异步操作成功) &#123; resolve(value); // resolve 是请求成功后的解决方案 &#125; else &#123; reject(value); // reject 是请求失败后的解决方案 &#125;&#125;) async/await async: async ensures that the function returns a promise, and wraps non-promises in it. [强制返回 promise] 12345678910async function f() &#123; return Promise.resolve(1);&#125;f().then(alert); // 1/****** Automatically Wrap ********/async function f() &#123; return 1;&#125;f().then(alert); // 1 await: The keyword await makes JavaScript wait until that promise settles and returns its result. 在async代码框内部，是synchronous执行；在async代码框外部，是asynchronous执行。 123456// works only inside async functions, the following is wrongres = await axios(&#123; url: "https://api.github.com/users/KrunalLathiya", method: "get"&#125;);console.log(res); Wrap the await with async 1234567891011121314151617// run in the chrome consoleconst axios = require("axios");async function getData() &#123; console.log(1); res = await axios(&#123; // await only stuck code afterwards but within the same async block url: "https://api.github.com/users/KrunalLathiya", method: "get" &#125;); console.log(2);&#125;console.log(0);getData();console.log(3);// the result is 0 - 1 - 3 - 2 Conclusion: async: a wrapper of await which forces to return a promise. await to stuck code afterwards which needs a wrapper ( async ) They are twins. Promise + async/await Wrong 1234567891011121314151617181920async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; await pool // put a await before a promise won't work // put a await ebfore a promise's reult works. .query(sql) .then((result) =&gt; &#123; const data = result.rows; final += getSingleTable(table, data); &#125;) .catch((err) =&gt; &#123; console.log(err.stack); &#125;) &#125;&#125; Right 12345678910111213141516async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; try &#123; const result = await pool.query(sql); // return result const data = result.rows; final += getSingleTable(table, data); &#125;catch(err) &#123; // error is catched in try/catch block console.log(err.stack); &#125; &#125;&#125; Put a await before a promise won’t work.Put a await ebfore a promise’s result works. Axios API without async/await API methods 1234567axios.get(); // get dataaxios.post(); // insert new dataaxios.put(); // replace oldaxios.delete(); // remove dataaxios.patch(); // send only changed dataaxios.options();axios.head(); Elegant usage 123456789101112131415161718const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://api.github.com/users/KrunalLathiya", &#123; params: &#123; ID: 12345 &#125; &#125;) .then(res =&gt; &#123; console.log(res.data.login); &#125;) .catch(err =&gt; &#123; console.log(err); &#125;);&#125;;getGithubData(); Request Config/Options Authorization (GET) 1234567891011121314const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://appdividend.com", &#123; // params: &#123;&#125; .. headers: &#123; Authorization: "Bearer " + "" //the token is a variable which holds the token &#125; &#125;) .then(res =&gt; console.log(res)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Authorization (POST) 123456789101112131415161718192021const axios = require("axios");let data = &#123; email: "test@163.com"&#125;;let config = &#123; headers: &#123; "Content-Type": "application/x-www-form-urlencoded", Authorization: "Bearer " + "token" &#125;, responseType: "blob"&#125;;getGithubData = () =&gt; &#123; axios .post("http://appdivident.com", data, config) .then(res =&gt; console.log(res.data)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Axios Response Object data: the payload returned from the server. By default, Axios expects JSON and will parse this back into a JavaScript object for you. status: the HTTP code returned from the server. statusText: the HTTP status message returned by the server. headers: all the headers sent back by the server. config: the original request configuration. request: the actual XMLHttpRequest object (when running in a browser). Axios Error Object message: the error message text response: the response obejct (if received) as described in the previous section. request: the actual XMLHttpRequest object (when running in a browser). config: the original request configuration Axios Instance 123456const axios = require("axios");request = axios.create(&#123; baseURL: "http://ec2-13-211-47-167.ap-southeast-2.compute.amazonaws.com:3000"&#125;);request.get("/articles").then(res =&gt; console.log(res.data)); Summary 何时使用async/await,何时使用axios自带API?async/await: 自定义复杂代码块axios API: 简单代码块调用注意： promise本来就是异步的。]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Async</tag>
        <tag>Javascript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Markdown]]></title>
    <url>%2Fmdtutorial.html</url>
    <content type="text"><![CDATA[Font’s Color and Size 字体Alignment 对齐方式Next Notes 便签Tab 选项卡Label 标签Button 按钮Video 视频PDF 电子书Images 图片Tables 表格Footnotes 脚注 Headings 标题 123456# heading level 1## heading level 2### heading level 3#### heading level 4##### heading level 5###### heading level 6 Paragraph 段落 1I really like using Markdown. Space 空格 I really like using Markdown. I think I’ll use it from now on. 1I really like using Markdown. &amp;nbsp; I think I'll use it from now on. Line Breaks 换行 I really like using Markdown. I think I’ll use it from now on. 12I really like using Markdown. &lt;/br&gt; I think I'll use it from now on. Emphasis 加粗 bold text 1**bold text** Italic 斜体 itabllic 1*italic* Bold and Italic 斜体加粗 important 1***important*** Strikethrough 删除线 The world is flat round. 1The world is ~~flat~~ round. Font’s Color and Size 字体 color=green size=3 1&lt;font color=green size=3&gt;color=green size=3 &lt;/font&gt; color=red size=3 1&lt;font color=red size=3&gt;color=red size=3&lt;/font&gt; Background Color 背景色 orange 12345&lt;!-- tr for row --&gt;&lt;!-- td for data --&gt;&lt;!-- th for header --&gt;&lt;!-- t --&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Generate HTML Table MDN HTML Table Alignment 对齐方式 center 诶嘿 1&lt;center&gt;诶嘿&lt;/center&gt; left 诶嘿 1&lt;p align="left"&gt;诶嘿&lt;/p&gt; right 诶嘿 1&lt;p align="right"&gt;诶嘿&lt;/p&gt; Next Notes 便签 Nostyle NoteWelcome to Hexo! 1234&#123;% note %&#125;### Nostyle NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Default NoteWelcome to Hexo! 1234&#123;% note default %&#125;### Default NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Primary NoteWelcome to Hexo! 1234&#123;% note primary %&#125;### Primary Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Info NoteWelcome to Hexo! 1234&#123;% note info %&#125;### Info Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Success NoteWelcome to Hexo! 1234&#123;% note success %&#125;### Success Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Warning NoteWelcome to Hexo! 1234&#123;% note warning %&#125;### Warning Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Danger NoteWelcome to Hexo! 1234&#123;% note danger %&#125;### Danger Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; No icon noteNote without icon: note info no-icon123code block in note tagcode block in note tagcode block in note tag 123456789&#123;% note info no-icon %&#125;### No icon noteNote **without** icon: `note info no-icon`&#123;% code %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Codeblock Note123code block in note tagcode block in note tagcode block in note tag 12345678&#123;% note success %&#125;### Codeblock Note&#123;% code lang:javascript %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Tab 选项卡 选项卡 1选项卡 2选项卡 3123 1234567891011121314152 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**Tab 1** 1&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 2** 2&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 3** 3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; Label 标签 default primary success info warning danger mark 123456&#123;% label default @default %&#125;&#123;% label primary @primary %&#125;&#123;% label success @success %&#125;&#123;% label info @info %&#125;&#123;% label warning @warning %&#125;&#123;% label danger @danger %&#125; &lt;mark&gt;mark&lt;/mark&gt; Button 按钮 text 1&#123;% btn #, text %&#125; Video 视频 12获取Youtube外链，粘贴即可&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wIHj9bxf5BI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt; PDF 电子书 1&#123;% pdf https://www.cs.cmu.edu/afs/cs.cmu.edu/user/gchen/www/download/java/LearnJava.pdf %&#125; superscript 上标 X2 subscript 下标 X2 Blockquotes 文字引用 Hello blockquotes 1&gt; Hellow Blockquotes Blockquotes with Multiple Paragraphs Line one Line Two Line Three 123&gt; Line one&gt; Line Two&gt; Line Three Nested Blockquotes Line One Nested Line 12&gt; Line One&gt;&gt; Nested Line Blockquotes with other elements The quarterly results look great! lone one line two 12345&gt; ###### The quarterly results look great!&gt;&gt; - lone one&gt; - line two&gt; Ordered Lists 有序列表 a b c 1231. a2. b3. c Nested Ordered Lists a a.a a.b b 12341. a 1. a.a 2. a.b2. b Unordered Lists 无序列表 a a.a a.b b 1234- a - a.a - a.b- b Paragraph in Lists a hello world b 123- a hello world- b Blockquotes in Lists a hello world b TODO LIST 任务列表 markdown [x] finished [ ] unfinished 12- [x] finished- [ ] unfinished hexo 已完成 未完成 1234&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt; Code Blocks 代码块 12345&lt;html&gt;&lt;head&gt;&lt;title&gt; Test &lt;/title&gt;&lt;/head&gt;&lt;/html&gt; Code 代码 Code 1`Code` Images 图片 123![star](https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656)&lt;img style="width: 200px; margin: auto" src="https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656 "&gt;&lt;/img&gt; Escaping Character 转义 * Hello world 1\* Hello world Tables 表格 Syntax Description Header Title Paragraph Text 1234|Syntax|Description||-|-||Header|Title||Paragraph|Text| Table Alignment 表格对齐 Column A Column B Column C A1 B1 C1 A2 B2 C2 A3 B3 C3 12345|Column A | Column B | Column C||:-|-:|:-:|| A1 | B1 | C1|| A2 | B2 | C2|| A3 | B3 | C3| Horizontal Lines 水平线 1--- Links 链接 http://www.baidu.com Website 1[Website](https://www.google.com) Cancel Link 取消链接 http://www.baidu.com 1`http://www.baidu.com` Footnotes 脚注 simple footnote, [1] 12simple footnote, [^1][^1]: This is the first footnote. This is the first footnote. ↩︎]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Personal Development for Programmers]]></title>
    <url>%2Fcoderpath.html</url>
    <content type="text"><![CDATA[Programming Language: Java, Javascript Computer Network: HTTP, Security Web Framework: Web Development Design Pattern: From code to architecture Data Structures and Algorithms: efficient implementation Industry Project: practical experience]]></content>
      <tags>
        <tag>Programmer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Top CS University Courses]]></title>
    <url>%2Fcourse-recommendation.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>CMU好课推荐</tag>
      </tags>
  </entry>
</search>
