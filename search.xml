<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac Downgrade to Node.js Verison 8]]></title>
    <url>%2Fdowngradetonode8mac.html</url>
    <content type="text"><![CDATA[123456brew search nodebrew unlink nodebrew install node@8# link node to version 8, eitherbrew link node@8brew link --force --overwrite node@8]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Fullstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode - 3sum]]></title>
    <url>%2F3sum.html</url>
    <content type="text"><![CDATA[Question Given an array nums ofn integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Example: Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: 1234[ [-1, 0, 1], [-1, -1, 2]] Analysis Brute Force: Ot(n^3), Os(1); Two-sum: Ot(n^2), Os(n); Sort &amp;&amp; Two-pointers: Ot(n^2), Os(logn); Solution - Sort &amp;&amp; 2pointers Quicksort: Ot(nlogn), Os(logn); pseudo-code: 12345678910111213141516171819results = []for index in (0,nums.length): if(index&gt;0 &amp;&amp; nums[index] == nums[index-1]) continue; a = nums[index]; left = nums[index+1]; right = nums[length-1]; while(left &lt; right)&#123; if(nums[left]+nums[right] == -a)&#123; results.push([a,nums[left],nums[right]]); while(left &lt; right &amp;&amp; nums[left+1]==nums[left]) left++; left++; while(left &lt; right &amp;&amp; nums[rigth-1]==nums[right]) right--; right++; &#125; elif(nums[left]+nums[right] &lt; -a&gt;)&#123; left++; &#125; else &#123; rigth--; &#125; &#125; Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123; // corner case if(nums == null || nums.length == 0) return new LinkedList(); // quicksort - Ot(nlogn)/Os(logn) - inplace Arrays.sort(nums); // get the length of the array. int length = nums.length; // initialize the results as a linkedlist (bettter than arraylist); List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;(); // outside loop for a for(int i = 0; i &lt; length; i++)&#123; // compare to past to ensure uniqueness. // compare to future cannot ensure uniqueness because we will lose the first happening. if(i &gt; 0 &amp;&amp; nums[i] == nums[i-1]) continue; int a = nums[i]; // initialize two pointers int left = i + 1; int right = length - 1; // inner loop for two pointers while(left &lt; right)&#123; int b = nums[left]; int c = nums[right]; // b+c is not big enough, increase the smaller one. if(b + c &lt; 0-a)&#123; left++; // b+c is not small enough, decrease the bigger one. &#125; else if(b + c &gt; 0-a)&#123; right--; &#125; else &#123; // add to the ans ans.add(Arrays.asList(a,b,c)); // but there might be more // left ++ until bigger than c while(left &lt; right &amp;&amp; nums[left] == nums[left+1])&#123; left++; &#125; left++; // right-- until smaller than c while(left &lt; right &amp;&amp; nums[right] == nums[right-1])&#123; right--; &#125; right--; // explanation: // if onle increase left and keep right, the result must not equal to -a. the same for decrease. // this will skip duplicates and save time for searching. &#125; &#125; &#125; return ans; &#125;&#125; Links Sort Algorithms]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Sort</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法之路]]></title>
    <url>%2Falgorithms.html</url>
    <content type="text"><![CDATA[Learn for Master;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript中的继承机制]]></title>
    <url>%2Fjavascriptinheritance.html</url>
    <content type="text"><![CDATA[What is the inheritance mechanism in Javascript? Constructor is Class ^ Class is Constructor 1234567// this is the constructor as well as the classfunction Cat(name) &#123; this.name = name;&#125;const cat = new Cat('Kitty');console.log(cat); Class vs Instance Instance Variable/Function in Constructor: In Javascript, all attributes or functions which is shared across all the instances or is specially designed for the class, or the same idea of static is store in prototype. I called it the Blueprint. Class Variable/Fucntion in Prototype: In Javascript, all attributes or functions that is only used within specific instances are initialize and stored in the the constructor function. 123456789101112function Cat(name) &#123; this.name = name; &#125;// key-value pair storageCat.prototype = &#123; run: function() &#123; console.log('Start running...') &#125;&#125;;const cat = new Cat('Kitty');console.log(cat); Links Javascript继承机制的设计思想]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Inheritance</tag>
        <tag>Prototype</tag>
        <tag>Blueprint</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typescript中的装饰器]]></title>
    <url>%2Ftsdecorators.html</url>
    <content type="text"><![CDATA[Essence Why we need decorator? To reuse code! Notion: Decorator can only be used inside/on a class. Decorator will be ran when a class is defined rather than an instance is created. Mutilple Decorators will be run from last line to first line. Method Decorator Function wrapping on the method. The decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition. 123456789101112131415161718192021222324252627282930313233343536373839404142434445// this is called classclass Boat &#123; // this is called property color: string = 'red'; // this is called accessor get formattedColor(): string &#123; return ''; &#125; /** * logError: must be a function */ @logError // this is called method pilot( name: String // this is called parameter ): void &#123; throw new Error(); &#125;&#125;/** * * @param target Constructor function or the prototype of the class. * @param key The name of the method. * @param desc The Property Descriptor for the method. value, writtable, enumerable, configurable */function logError(target: any, key: string, desc: PropertyDescriptor): void &#123; // this is the method itself. const method = desc.value; // modify the pilot function before run it. desc.value = function() &#123; try &#123; console.log('Run Descriptor'); method(); &#125; catch (err) &#123; console.log('Method Fail'); &#125; &#125;;&#125;const boat = new Boat();boat.pilot(''); Accessor Decorator The accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor’s definitions. 123456789101112131415161718192021222324class Point &#123; private _x: number; private _y: number; constructor(x: number, y: number) &#123; this._x = x; this._y = y; &#125; @configurable(false) get x() &#123; return this._x; &#125; @configurable(false) get y() &#123; return this._y; &#125;&#125;/** * * @param target Constructor function or the prototype of the class. * @param key The name of the accessor. * @param desc The Property Descriptor for the accessor. value, writtable, enumerable, configurable */function configurable(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123; descriptor.configurable = true;&#125; Decorator Factory Factory: Wrap a function on another function: to pass parameters, extra action outside the existing method. 12345678910111213141516171819202122232425262728// this is called classclass Boat &#123; @logError('Error Happened.') // this is called method pilot(): void &#123; throw new Error(); &#125;&#125;// this is Decorator funciton, it's a decorator in essence.function logError(errorMessage: string) &#123; return function(target: any, key: string, desc: PropertyDescriptor): void &#123; // this is the method itself. const method = desc.value; // modify the pilot function before run it. desc.value = function() &#123; try &#123; console.log('Run Descriptor'); method(); &#125; catch (err) &#123; console.log(errorMessage); &#125; &#125;; &#125;;&#125;const boat = new Boat();boat.pilot(''); Property Decorator Can only be used to observe whether the property has been declared for a class 12345678910class Boat &#123; // this is called property @testDecorator color: string = 'red';&#125;function testDecorator(target: any, key: string) &#123; console.log(target.color) // undefined because prototype does not store instance variable. console.log(key); // color&#125;const boat = new Boat(); Class Decorator The class decorator is applied to the constructorof the class and can be used to observe, modify, or replace a class definition. How to override the constructor a class. 1234567891011121314151617@classDecoratorclass Greeter &#123; property = 'property'; hello: string; constructor(m: string) &#123; this.hello = m; &#125;&#125;function classDecorator&lt;T extends &#123; new (...args: any[]): &#123;&#125; &#125;&gt;(constructor: T) &#123; return class extends constructor &#123; newProperty = 'new property'; hello = 'override'; &#125;;&#125;console.log(new Greeter('world')); Parameter Decorator The parameter decorator is applied to the function for a class constructor or method declaration. 1234567891011121314151617class Employee &#123; greet(@logParameter message: string): string &#123; return `hello $&#123;message&#125;`; &#125;&#125;/** * * @param target the prototype of the class. * @param propertyName name of the method * @param index position of the parameter in the argument array */function logParameter(target: any, propertyName: string, index: number) &#123; console.log(propertyName,index);&#125;const emp = new Employee();emp.greet('hello'); Decorator Composition 12// single line@f @g x 1234// mutilines@f@gx When multiple decorators apply to a single declaration, their evaluation is similar to function composition in mathematics. In this model, when composing functions f and g, the resulting composite (f ∘ g)(x) is equivalent to f(g(x)). As such, the following steps are performed when evaluating multiple decorators on a single declaration in TypeScript: The expressions for each decorator are evaluated top-to-bottom. The results are then called as functions from bottom-to-top. 12345678910111213141516171819function f() &#123; console.log("f(): evaluated"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log("f(): called"); &#125;&#125;function g() &#123; console.log("g(): evaluated"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log("g(): called"); &#125;&#125;class C &#123; @f() @g() method() &#123;&#125;&#125; 1234f(): evaluatedg(): evaluatedg(): calledf(): called Decorator Evaluation There is a well defined order to how decorators applied to various declarations inside of a class are applied: From Instance to Blueprint 从类里到类外 Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each instance member. Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each static member. Parameter Decorators are applied for the constructor. Class Decorators are applied for the class. Reflect Metadata metadata is just an invisible attribute of javascript object. you can add define/get metadata of javascript object throuth reflect-metadata. 1234567891011121314151617181920212223242526272829import 'reflect-metadata';@getMetadataclass Plane &#123; // instance variable color: string = 'red'; @markFly('secret') fly(): void &#123; console.log('vrrrrrrr...'); &#125;&#125;function markFly(secretInfo: string) &#123; return function(target: Plane, key: String) &#123; // attach metadata to target.key, which is the fly function; Reflect.defineMetadata(secretInfo, target, key); &#125;;&#125;/** * @param target the constructor of Plane */function getMetadata(target: typeof Plane) &#123; for (let key in target.prototype) &#123; const secrect = Reflect.getMetadata('secrect', target.prototype, key); console.log(secrect); &#125;&#125;]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Fullstack</tag>
        <tag>Decorator</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区分Session和Cookie]]></title>
    <url>%2Fsession-cookies.html</url>
    <content type="text"><![CDATA[Concept HTTP 协议中，客户端向服务端发起请求，服务端响应请求。服务端要怎样辨识客户端的请求是来自于同一个用户呢？这就需要一种身份验证机制。事实上存在这样一种机制，利用session和cookie，实现了对用户身份的验证。简单来说，session是存储在服务端的半个钥匙，cookie是用户每次发起http请求都要携带的另一半钥匙，服务器会通过比对着会得知当前请求时来自于哪个用户。 HTTP Process: 客户端第一次发起请求。 服务端响应请求，生成用于表示当前用户的session并存储，并且将一半钥匙第一次存储到响应的cookie中。 客户端收到响应，拿到了一半钥匙存储在cookie当中。 客户端再次发起请求，服务器收到请求，获取cookie中的一半钥匙，服务器进行比对，验证用户及用户状态 Links Express session]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的类型判断]]></title>
    <url>%2Fchecktypeinjs.html</url>
    <content type="text"><![CDATA[Difference typeof: only judge between string, number, boolean, object, function, symbol and undefined. instanceof: can judge instance inside object, like array, but sometime not accurate. Object.prototype.toString.call: the most accurate one. Method 1: typeof 123// null and array will all be judge as objectconst x = [];console.log(x typeof object); Method 2: instanceof 12const x = [];console.log(x instance of Array); Method 3: Object.prototype.toString.call 12const x = [];console.log(Object.prototype.toString.call(x))]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Common Utility]]></title>
    <url>%2Farrayequal.html</url>
    <content type="text"><![CDATA[How to compare two array in Javasript 123456789101112const arr1 = [ 1, 3, 4, 5 ];const arr2 = [ 1, 3, 4, 5 ];function arrayEqual(arr1, arr2) &#123; return ( arr1.length === arr2.length &amp;&amp; arr1.every((e, i) =&gt; &#123; return e === arr2[i]; &#125;) );&#125;console.log(arrayEqual(arr1, arr2)); How to deep compare two objects? 123const _ = require('lodash');// https://lodash.com/docs/4.17.11#isEqual_.isEqual(obj1, obj2); How to converse an array of objects as HashMap? 12345678910111213const sample = [ &#123; name: 'James', id: 1 &#125;, &#123; name: 'william', id: 2 &#125;, &#123; name: 'Jack', id: 3 &#125; ];function byKey(ori, key) &#123; let obj = &#123;&#125;; ori.forEach((element) =&gt; &#123; const &#123; id, ...rest &#125; = element; obj[element[key]] = rest; &#125;); return obj;&#125;console.log(byKey(sample, 'id')); Throw Errors 123throw new Error( 'Error Message')]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Code Snipet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Tutorial]]></title>
    <url>%2Freacttutorial.html</url>
    <content type="text"><![CDATA[Initialize Project 123456789# 1. Initializesudo npm install -g create-react-appcreate-react-app project_name# 2. open the project in VS-Codecd project_name &amp;&amp; code .# 3. Start the project locallyyarn start Functional Component 1234const App = (props) =&gt; &#123; return ()&#125;export default App; Class Component 1234567891011121314151617181920212223242526class App extends React.Component &#123; // constructor 1: good place to initialize state constructor(props)&#123; super(props); this.state = &#123; a: a_value &#125; &#125; // constructor 2: good place to initialize state state = &#123;&#125;; // after mounting the page: good place to do data-loading after mounting componentDidMount() &#123;&#125; // after updating the page: good place to do date loading after page updating componentDidUpdate() &#123;&#125; // after unmounting the page: good place to clean up unnecessary resources componentWillUnmount() &#123;&#125; // render the component render()&#123; // ... return () &#125;&#125;export default App; Import &amp;&amp; Export 123import AnotherComponent from 'AnotherComponent';import AnotherComponent, &#123;ClassName1&#125; from 'AnotherComponent';import &#123; ClassName1, FunctionName1&#125; from 'AnotherComponent'; 123export default ClassName;export default FunctionName;export &#123;ClassNam1, ClassName2, FunctionName1, FunctionName2&#125;; Children Components 12345678&lt;ApprovalCard&gt; &lt;CommentDetail author="Sam" timeAgo="Today at 4:45PM" content="Nice blog post" avatar = &#123;faker.image.avatar()&#125; /&gt;&lt;/ApprovalCard&gt; 12// compoment ApprovalCard&lt;div className="content"&gt; &#123;this.props.children&#125; &lt;/div&gt; Fetch User Geo Location Geo Location React Lifecycle Why we use lifecycle methods? Update State 1this.setState(&#123;&#125;); Add Styles General Load CSS file in index.js OR Load CSS CDN in index.html Apply proper className to element Inline use style props: style: OR component specific style method Loading Spinner 123render() &#123; if (this.state.xxx === null) return &lt;Spinner/&gt;&#125; Default Props Simple way 1&#123;this.props.sth || "hello"&#125; Better Way 12const Spinner = () =&gt; &#123;&#125; // one component as class or functionSpinner.defaultProps = &#123;&#125;; Define Method in Class 12345class SearchBar extends React.Component &#123; // normal definition onFormSubmit(event) &#123; &#125;&#125; Solve this Context Bind 123456class Car &#123; constructor() &#123; // guide this to this instance(because this is in the constructor) this.drive = this.drive.bind(this); &#125;&#125; Arrow Function 12// prerequisite: babelonFormSubmit = (event) =&gt; &#123;&#125; Inline Arrow Function 12345678// normal definitiononFormSubmit(event) &#123;&#125;// this will cause unpredictable error &lt;form onSubmit=&#123;this.onFormSubmit&#125;/&gt;// this is proper way &lt;form onSubmit=&#123;() =&gt; this.onFormSubmit()&#125;/&gt; Render List 1234567const ImageList = props =&gt; &#123; const imageList = props.images.map( image =&gt; &#123; return &lt;img key = &#123;image.id&#125; src = &#123;image.urls.regular&#125; /&gt; &#125;) return &lt;React.Fragment&gt;&#123;imageList&#125;&lt;/React.Fragment&gt;&#125; React Ref 1234567891011121314151617class ImageCard extends React.Component &#123; constructor(props) &#123; super(props); // Core code: initialzie in constructor this.imageRef = React.createRef(); &#125; render() &#123; return &lt;React.Fragment&gt; &lt;div&gt; // 🐂 Core code: assign in code. &lt;img ref=&#123;this.imageRef&#125;&gt; &lt;/div&gt; &lt;/React.Fragment&gt; &#125;&#125; Some Methods 123event.target.valueevent.preventDefault();addEventListener('load', func); Resources React Express]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3.js Tutorial]]></title>
    <url>%2Fd3tutorial.html</url>
    <content type="text"><![CDATA[Concept Document: Element in a web page. SVG: Scalable Vector Graphics. It defines vector-based graphics in XML format. Here “scalable” means that, if you zoom in or out on an object, it would not appear pixelated. Selection: an arraqy of nodes in DOM. Introduction Without D3.js 123456// Tedious Iterationvar paragraphs = docuemnt.getElementsByTagName("p");for (var i =0; i &lt; paragraphs.length; i++) &#123; var pargraph = paragraphs.item(i); paragraph.style.setProperty("color", "blue", null);&#125; With D3.js 1234// a group of elements manipulationd3.selectAll("p").style("color", "blue");// individual element manipulation - the first foundd3.select("body").style("background-color", "black"); Dynamic Properties Dynamic means use function rather than constants to return content Randomly color paragraphs. 123d3.selectAll("p").style("color", function()&#123; return "rsl(" + Math.random()*360 + ",100%,50%)";&#125;) shades of gray for even and odd nodes 123d3.selectAll("p").style("color", function(d, i) &#123; return i % 2 ? "#fff" : "#eee";&#125;) d for individual bounded data i for index, start from 0 first d for first node, second d for second node and son on … 12345d3.selectAll('p') .data([4,8,15,16,23,42]) // pass data to each node .style("font-size", function(d) &#123; return d + "px"; &#125;) Once the data has been bound to the document, you can omit the data operator; D3 will retrieve the previously-bound data. This allows you to recompute properties without rebinding. How? Enter and Exit The number of data &gt; The number of nodes. The extra data can be used as enter selection to create new nodes. 1234567d3.select("body") .selectAll("p") .data([4,8,15,16,23,42]) .enter().append("p") .text(function(d) &#123; return "I'm number " + d + "!"; &#125;) Good Practices 1234567891011121314// updatding nodesvar p = d3.select("body") .selectAll("p") .data([4,8,15,16,23,42]) .text(function(d) &#123;return d;&#125;)// Enter Nodes - Create nodesp.enter() .append("p") // the append method is necessary .text(function(d) &#123;return d;&#125;)// Exit Nodes - delete unnecessary nodes(not data)p.exit() .remove(); Transition fade the background of the page to black 12d3.select("body").transition() .style("background-color", "black"); resize circles in a symbil map with a staggered delay 12345d3.selectAll("circle") .transition() .duration(750) // element stay .delay(function(d,i) &#123; return i * 10;&#125;) // element delay .attr("r",function(d) &#123; return Math.sqrt(d*scale);&#125;); Basic Methods 12345678910111213select() // select the 1st nodeselectAll() // select all nodesappend(); // add new nodestext(); // get current texttext("text") // set textdata(); // attach data to nodesenter(); // create missing nodesexit(); // delete unnecessary nodesstyle(); // add css stylesattr(); // add html attributes like class="bn"scale(); // scale element in page.domain(); // input range of scalerange(); // output range of scale SVG SVG shape for a web page must go within an HTML svg tag. When setting the width and height for SVG, use the attr() rather than style() method. Because SVG is not based on pixel. More 12&lt;!-- used to group sub svg within svg --&gt;&lt;g&gt;&lt;/g&gt; Resource Dashing D3.js]]></content>
      <categories>
        <category>Analytics</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Data Visualization</tag>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Suppressing a repeated column value in PostgreSQL]]></title>
    <url>%2Fpgpartion.html</url>
    <content type="text"><![CDATA[Backgroud: Table I had Name Project Roles James Python Admin James Python Coder James Java Coder The Result I Want Name Project Roles James Python Admin, Coder Java Coder Research Oracle Break On with Partition by Unfortunately, Postgres doesn’t have Break On Solution Use string_agg(distinct lower(xxx), ',') to combime roles. Use row_number() over partition by xxx to get the Row Number Use case clause to remove duplicates of name based on the Row Number Reference Stack Overflow]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
        <tag>SQL</tag>
        <tag>Break On</tag>
        <tag>Partition By</tag>
        <tag>Remove Duplicates</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 发消息至Slack]]></title>
    <url>%2Fslackmessage.html</url>
    <content type="text"><![CDATA[Tutorials for Slack Webhook Install Packages 1yarn add request Send message to Slack Channel 12345678910111213141516171819const request = require('request');const options = &#123; url: 'https://hooks.slack.com/services/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', method: 'POST', headers: &#123; 'Content-type': 'application/json' &#125;, body: JSON.stringify(&#123; text: 'hello', mrkdwn: true &#125;)&#125;;function callback(error, response, body) &#123; if (!error &amp;&amp; response.statusCode == 200) &#123; console.log(body); &#125; request(options, callback);]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Slack</tag>
        <tag>Webhook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node 发送Gmail]]></title>
    <url>%2Fnodesendgmail.html</url>
    <content type="text"><![CDATA[Install Package 1yarn add nodemailer Send Gmail in Node.js 123456789101112131415161718192021222324252627282930313233// import packageconst nodemailer = require('nodemailer');// create email sendervar transporter = nodemailer.createTransport(&#123; service: 'gmail', auth: &#123; user: 'example@xxx.com', pass: '*****' &#125;&#125;);// function to send emailasync function sendHtml( dest) &#123; const html = '&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;Welcome&lt;/title&gt; &lt;/head&gt; &lt;body&gt; Hello World&lt;/body&gt; &lt;/html&gt;' const mailOptions = &#123; from: '"Name" example@xxx.com', // login user must equel to this user to: dest, subject: `Subject`, text: '', html: html &#125;; // start sending transporter.sendMail(mailOptions, function(error, info) &#123; // error handling if (error) &#123; return console.log(error); &#125; console.log('Message sent: ' + info.response); &#125;);&#125;sendHtml('dest@xxx.com');]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Gmail</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWS Config Switch Roles]]></title>
    <url>%2Fmanagemutiplerolesaws.html</url>
    <content type="text"><![CDATA[Prerequsite VS code with Command Line Tool 12code ~/.aws/configcode ~/.aws/credentials How to Switch the role? Modify the role that you want to the default role. run aws configure to make it valid.]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>DevOps</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWS Code Commit]]></title>
    <url>%2Fcodecommit.html</url>
    <content type="text"><![CDATA[关于 AWS Code Commit is another ‘github’ or ‘gitlab’, which allows to you host your own code with version control tools like git cli. 基本操作 前提 IAM roles for full access to AWS code Commit 新建目录 12345# list all commandsaws codecommit help# create repositoryaws codecommit create-repository --repository-name=admin-report-api 产生Git秘钥 In IAM &gt; User &gt; Security Credential &gt; HTTPS Git credentials for AWS CodeCommit &gt; Generate Click generate to get your git credentials. Note: You cannot customize this. 克隆到本地 12git clone https://git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/admin-report-api# then enter the username and password generated from above step. 推送到目录 123git add -Agit commit -m 'initialize'git push 分支操作 1234567891011121314# check the current brancegit branch# change to another brancegit checkout -b newBranch# git checkout means change to another branch.# git checkout -b means create a branch and then change to it.git add -Agit commit -m 'test new branch'# 第一次使用次命令git push -u origin newBranch# 后面可以使用git push Merge Branch CodeCommit &gt; Source &gt; Repositories &gt; Pull Request &gt; Create Pull Request merge后可以选择删除source branch Compare Commit CodeCommit &gt; Source &gt; Repositories &gt; commits &gt; compare commits 整合AWS其他服务 Simple Notification Service(SNS) Email SMS Lambda Function prerequisite: IAM role for lambda function execute settings &gt; trigger (lambda function created at first)]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Code Commit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PR 相关网站]]></title>
    <url>%2Fpr.html</url>
    <content type="text"><![CDATA[Subclass 189 Subclass 190]]></content>
      <categories>
        <category>Australia</category>
      </categories>
      <tags>
        <tag>PR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js App CI/CD Example with Elastic Beanstalk and Circle CI]]></title>
    <url>%2Felasticbeanstalk.html</url>
    <content type="text"><![CDATA[Simple Skeleton of CI/CD Related Concepts: CI: Continuous Integration: Merge Branch to master after passing the building and testing stage CD: Continuous Delivery Continuous Deployment: run the code in production server(s) Tools: Node.js with yarn Git Github Circle CI Elastic Beanstalk About Elastic Beanstalk Configure the production environment for your code, for example with Ubuntu 16.04 and Node.js 10. Configure the command to start runing your application, for example npm start. Configure security, load balancing and auto scaling service from aws. Steps from Scratch Create your project Locally Install Node.js and Yarn on Ubuntu 18.04 Create the project 123mkdir project_demo &amp;&amp; cd project_demonpm init --yes &amp;&amp; yarn add expresstouch app.js &amp;&amp; nano app.js Copy and paste the code to app.js 12345const express = require('express')const app = express()const port = 3000app.get('/', (req, res) =&gt; res.send('Hello World!'))app.listen(port, () =&gt; console.log(`Example app listening on port $&#123;port&#125;!`)) Run the app on local machine 1node app.js If app runs successfully, you will see “Hello World!” in localhost:3000 Set up GitHub Register for an account Create a repository the following. Push your code to github 1234567cd project_demogit initgit add -Agit commit -m 'first commit'git remote add origin git@github.com:GeekEast/cicd_sample.git# If you don't switch branch, you could just use git push for the next timegit push -u origin master Github intializaion if completed. Configure Circle CI Sign in Circle CI using Github Account Add Project on the left of page Select your project in github and click on Set Up Project Add the configuration file 1234cd project_demomkdir .circlecitouch .circleci/config.ymlnano .circleci/config.yml Copy and paste to config.yml 1234567891011121314version: 2jobs: build: docker: - image: circleci/node:11.13.0 # source code will be put into this repo working_directory: ~/project_build # run the following code in the repo directory steps: - checkout - run: name: Install Node Packages command: | yarn install Add .gitignore file 12cd project_demotouch .gitignore &amp;&amp; nano .gitignore Copy and paste to .gitignore file 12&lt;!-- to avoid pushing this to github repo because this can be installed using node commnad --&gt;node_modules Push to Github 1234cd project_demogit add -Agit commit -m 'set up circle-ci'git push Click Start Building on CircleCI Page Then circle ci will show it build and test your app successfully. After this, everytime you push code to your master of git repo, it will trigger cicleci to automatically build and test your code. Configure Elastic Beanstalk (Locally -&gt; AWS) aws online Sign up an aws account create the elastic beanstalk full access role to the user create the user credentials and downloaded to your local machine aws locally install and configure awscli 12aws configure# Or modify config and credentials in ~/.aws configure credentials install awsebcli 1brew install awsebcli initialize eb in your project 12eb initeb create demo-prod modify the .gitignore file 123456node_modules# Elastic Beanstalk Files.elasticbeanstalk/*!.elasticbeanstalk/*.cfg.yml!.elasticbeanstalk/*.global.yml!.elasticbeanstalk/config.yml first deploy 1eb deploy Configure Elastic Beanstalk with Circle CI Set AWS credentials as Environemnt Variable in Circle CI Modify the ebs configure yaml file 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253version: 2jobs: build: docker: - image: circleci/node:11.13.0 # source code will be put into this repo working_directory: ~/project_build # run the following code in the repo directory steps: - checkout - run: name: Install Node Packages command: | yarn install deployment: docker: - image: circleci/python:2.7 working_directory: ~/project_deployment steps: - checkout - run: name: Install AWS CLI &amp; PM2 command: | sudo pip install awsebcli --upgrade - run: name: Create AWS Credentials Manually command: | mkdir ~/.aws touch ~/.aws/config chmod 600 ~/.aws/config echo "[profile eb-cli]" &gt; ~/.aws/config echo "region=ap-southeast-2" &gt;&gt; ~/.aws/config echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" &gt;&gt; ~/.aws/config echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" &gt;&gt; ~/.aws/config - run: name: Deploy to EB if branch is master command: | eb use demo-prod --profile eb-cli eb deploy --profile eb-cliworkflows: version: 2 build-deploy: jobs: - build: filters: branches: ignore: - master - deployment: filters: branches: only: - master Each time you merge a branch to master, to deployment to elastic beanstalk will be executed Customize the start command in elastic beanstalk 123cd project_demomkdir .ebextensionstouch .ebextensions/node-settings.config &amp;&amp; nano .ebextensions/node-settings.config modify the node-settings.config file 12345option_settings: aws:elasticbeanstalk:container:nodejs: NodeCommand: &quot;npm start&quot; ProxyServer: nginx GzipCompression: true modify the package.json file 123456// package.json"scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "start": "node ./node_modules/pm2/bin/pm2 start app.js utils/scheduler/reports.js -i max", "poststart": "node ./node_modules/pm2/bin/pm2 logs"&#125; Important Notes After 1st deployment from local, you could use aws ebs console to create environment and customize more configurations like security group, auto scaling and load balancing If there is any error, please use the aws eb console &gt; logs to inspect the issue. Not Covered: How proxy server works and how to configure it? Good References: 超新手的一日CI/CD初體驗，使用CircleCi、Github-Flow自動部署Node.JS於AWS Elastic Beanstalk]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>DevOps</tag>
        <tag>Elastic Beanstalk</tag>
        <tag>Circle CI</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端优化三大法宝]]></title>
    <url>%2Ffrontendoptimise.html</url>
    <content type="text"><![CDATA[code spliting tree shaking lazy loading]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Performance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS block inline inline-block]]></title>
    <url>%2Fcssdisplay.html</url>
    <content type="text"><![CDATA[display的默认值视type而定； Value Description Note block 独占一行 宽度默认为父级宽度 有height/width 有margin/padding inline 不独占一行 宽度随内容变化 无heigh/width 仅水平marign/padding生效 inline-block 不独占一行 宽度默认随内容变化 有height/width 有margin/padding 高宽 padding margin none 不予显示 不占空间 hidden 不予显示 占据空间]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS中的auto关键字]]></title>
    <url>%2Fcss-auto.html</url>
    <content type="text"><![CDATA[Image居中 1&lt;img style="width: 100%; margin-left:auto; margin-right:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-5.png"&gt;&lt;/img&gt; 为什么auto可以实现img的居中？ 答： 因为CSS规范中说明了：一个有特定宽度的元素，若左右边距为auto，浏览器会取它的容器和该容器的宽度之差，除以2，作为该元素的左边距和右边距。]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Tricks]]></title>
    <url>%2Fcss-tricks.html</url>
    <content type="text"><![CDATA[How to add style to html? Inline CSS Style Not Recommended for most cases. HTML: 123&lt;div style="color: black; background: red"&gt; Hello World!&lt;/div&gt; &lt;head&gt; CSS Style For single page HTML: 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .text &#123; color: black &#125; body &#123; background: white; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="text"&gt; Hello World! &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS file Mutile-html reuse; recommended HTML: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="main.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="text"&gt; Hello World!&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; CSS: 1234567.text &#123; color: black&#125;body &#123; background: white;&#125; Things you can do with &lt;head&gt;&lt;/head&gt; charset viewport compatible title favicon css import google fonts 1234567891011&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="style.css"&gt; &lt;link rel="shortcut icon" href="favicon.ico" type="image/x-icon"&gt; &lt;!-- import google fonts that you can specify it in css file - main.css --&gt; &lt;link href="https://fonts.googleapis.com/css?family=Baloo+Bhai|Indie+Flower&amp;display=swap" rel="stylesheet"&gt; &lt;link rel="stylesheet" href="main.css"&gt;&lt;/head&gt; CSS Selector Example Description Stress .btn Select all elements with class=“btn” 类 #firstname Selects the element with id=“firstname” ID * Selects all elements 继承断层时应用 p Selects all &lt;p&gt; elements 单个元素 div, p any &lt;div&gt; elements and &lt;p&gt; elements 多个元素 div p any &lt;p&gt; item that is a descendant of an &lt;div&gt; 儿子们 div.btn div element with btn as class 单个元素(多个条件无空格) div &gt; p any &lt;p&gt; item that is a direct descendant of an &lt;div&gt; 最亲儿子(only one) div ~ p any &lt;p&gt; after an &lt;img&gt; with something in between. 弟弟们 div + p any &lt;p&gt; after an &lt;img&gt; with nothing in between. 最近弟弟(only one) [href] style all element with a href attribute. 属性 :hover selects elements when the mouse cursor is current over them 状态 ::before allows you to insert content onto a page from CSS 内容 CSS Specificity Simple Case Inheritance &gt; CSS file Tags(div, p) &gt; CSS file Class &gt; CSS file Id &gt; Inline Style &gt; !Important Real Case Online Calculator Element/pseudo element: div,p,:first-letter class/psuedo-class/attibute: .col_3, ::hover, [href] id: #nav inline: &lt;style&gt; Update: The :not() sort-of-pseudo-class adds no specificity by itself, only what’s inside the parens is added to specificity value. Margin Collapsing It happens by default to resolve the collapsing of two adjecent margin by eliminating the shorter one. 1. Adjacent Siblings In this case, the first element might have a margin of 10px (on all sides let’s say) and the second one has 5px (or 20px - the values don’t matter).CSS will collapse the margins and only add the bigger one between the elements. So if we got margins of 10px and 5px , a 10px margin would be added between the elements? 2. A parent with children that have a margin To be precise, the first and/ or last or the only child has to have margins (top and/ or bottom). In that case, the parent elements margin will collapse with the child element(s)’ margins. Again, the bigger margin wins and will be applied to the parent element.If the parent element has padding, inline content (other than the child elements) or a border, this behavior should not occur, the child margin will instead be added to the content of the wrapping parent element. 3. An empty element with margins This case probably doesn’t occur that often but if you got an element with no content, no padding, no border and no height, then the top and bottom margin will be merged into one single margin. Again, the bigger one wins. Height &amp;&amp; Width 100%表示占父级元素，若父级元素未设定，则不生效 box-sizing width/height的设定默认是content的，不包含padding，border和margin width/height设定包含padding和border: box-sizing: border-box width/height设定无法将margin包含进去，只能手工减去margin的大小 何时用*{} *的优先级要比inherited高 在多级继承序列中，期望的style可能被中间元素override，alternative是：不使用inherited，而使用* class名的设计要体现继承关系]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Tricks]]></title>
    <url>%2Freacstate.html</url>
    <content type="text"><![CDATA[Automatically add state variable this.setState({val1: value}) will automatically create val1 in state. You don’t have to initialize it in the state. Unless: Some functions might need to set initial state after some operations. ? : 1good? do good : do bad &amp;&amp; 1a &amp;&amp; do a 1a &amp;&amp; b &amp;&amp; c]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Frosted Glass Effect]]></title>
    <url>%2Fcssfrostedglass.html</url>
    <content type="text"><![CDATA[Two Ways to Create a Frosted Glass Effect in CSS; CSS技巧收集——毛玻璃效果]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
        <tag>Frosted Glass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Websites built with React.js]]></title>
    <url>%2Fwhousereact.html</url>
    <content type="text"><![CDATA[Khan Academy Codecademy New York Times Dropbox Netflix Airbnb Hashnode Skyscanner]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yarn add with version]]></title>
    <url>%2Fyarn.html</url>
    <content type="text"><![CDATA[1yarn add @version/react-router-v3]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Import Stylesheets into React]]></title>
    <url>%2Fimportcssreact.html</url>
    <content type="text"><![CDATA[Context 今天在一个React项目里面，相近办法把node-modules里的两个css的文件给载入到index中的link，以失败告终。 Reason: React项目启动后，并不能access到node-modules文件，也就是说node-modules只是你在写代码时可见的东西。 Solution: 通过在React入口文件处载入node-modules中的css文件即可 import ‘…/node_modules/…’ import ‘package-name/…’ 会直接从node_modules中导入 通过gulp工具，将css文件复制到public文件夹下即可]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React UI Library]]></title>
    <url>%2Freactuilibrary.html</url>
    <content type="text"><![CDATA[Ant Design 蚂蚁金服出品，优秀的中文React UI库. Blueprint 优秀的英文React UI库. Element-React 入门级的React UI库.]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Frontend</tag>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 小杂碎]]></title>
    <url>%2Fcssh1.html</url>
    <content type="text"><![CDATA[&lt;h1/&gt;系列自带margin 123456789h1 &#123; display: block; font-size: 2em; margin-block-start: 0.67em; margin-block-end: 0.67em; margin-inline-start: 0px; margin-inline-end: 0px; font-weight: bold;&#125; 这个margin是用来干啥的？ margin和padding都可以用来设置item间的间距]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React vs MVC]]></title>
    <url>%2Freactvsmvc.html</url>
    <content type="text"><![CDATA[模式 这里的模式是指代码分离的方式。 MVC模式 我更喜欢叫它MCV模式，将一个项目的代码分离为数据、控制和视图。Model负责数据管理，Controller负责Model和View的沟通，而View负责呈现视图。注意view不是视图本身，而是呈现视图需要的代码。 这样的代码分离方式，有利于数据的复用，有利于控制器的复用，有利于视图代码的复用。 但是，不利于数据+控制器+视图代码的复用。MVC的复用模式是这样的： React模式 而React的复用模式是这样的： 是不是感觉在MVC上面横切了一刀！ 这样可以实现 一个组件的完整复用，包括数据，控制器和视图层。 控制器：func + state + props(context consumer/redux client) 数据管理：func + state + props(context consumer/redux client) 视图： func + state + props(context consumer/redux client) 进一步看，其实不是这么简单，React不是简单的MVC的横截。它融合了MVC的横截以及MVC本身。 抛去代码不看，React中最重要的其实是数据流。 一个组件里一定有view，一定有数据（state,props,…）,一定有控制器(func); React模式总结 变量和方法紧密相关，模型和控制紧密联动。数据（变量+方法）共享的方式：变量提升和向下传递(传func以改变，传变量以引用)React ContextReact Redux]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Fullstack</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React 数据传递]]></title>
    <url>%2Freactstatefunc.html</url>
    <content type="text"><![CDATA[引言 我们先来看几个问题 React中的变量应该放在哪个component里？ - 变量的归属 如何判断一个变量需要传入到一个component？- 变量的传递 React的中函数应该放在那个component里？ - 方法的归属 如何判断一个函数需要传入到一个component里? - 方法的传递 导图 归属 在一个React项目中，有很多个组件，这些组件构成一颗巨大的树，我们称之为组件树(Component Tree).那么，如何确定方法和变量在组件树的位置呢？这涉及到方法和变量的归属。因为方法的归属相对固定，也较容易理解，先撸它。 方法直接服务于state的变化，所以方法要紧随相关的state. 接下里是变量的归属。归属不涉及props，因为state是指从哪里来，props指的是到哪里去，这个我们后面会讨论。变量的归属，我总结有以下两种情况： 组件A和组件B是兄弟组件，组件C是二者的最近父组件，如果有一个state变量v, 是在A和B之间进行共享的，就要将其归属在父组件C中。这里之所以放置v在最近父组件中，是为了避免多层数据传递造成的不必要损耗（姑且这么说，我对于react的性能还有待于深入研究）。 使用 这里的使用是指到哪里去。方法的使用是指方法要传到哪个component里面，变量的使用是指在state中的某个变量要传到哪个component里面. 这里有一个讨论的前提：方法和变量的传递是通过props或者context的方式。到哪里去的问题也可以转化成：要在哪里传入特定的props，要在哪里封装context的consumer。另外一种情况是Redux，我看的还少，就暂不讨论，抛砖引玉。 方法的使用的基本准则是哪个component触发了这个方法，就把这个方法传给谁。如果component不触发该方法，则不要传入。 变量的使用的基本准则是哪个component需要引用该变量，就把这个变量传给谁。如果component不引用该变量，则不要传入。 引用变量而非改变变量。变量的改变要求通过方法来实现，而这个方法要尽量跟变量在一个component里面。如果一个子组件里面会触发某个父组件变量的改变，无需将该变量传入到子组件中, 只需要传入父组件对于于该变量的方法即可。 进阶 React总结篇之二_设计高质量的React组件 如有不恰当的地方，请在下方讨论区告知，感激不尽！]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Fullstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT学习方法论]]></title>
    <url>%2Flearnitbydoing.html</url>
    <content type="text"><![CDATA[核心： Learn By Doing 掌握基本知识，能够构建大致雏形 在线寻找项目，udemy等平台，跟着撸一遍 在撸的时候，不断google，积累相关资源 在撸的时候，寻找知识主导的教程，形成自己的模块化知识 在撸的时候，内化的知识要定期总结成Blog 在撸的时候，通过version control来控制代码变化，为代码复习积累资源 在撸的时候，写清楚需求文档，为后续阶段使用 根据写出来的需求文档或者代码框架，自己从头到尾再撸一遍 无需求文档，直接撸一遍 学习方法进化论 学渣的就不说了，属于不用心的类别 伪学霸，大致分类，可类比作Array 学霸，族谱分类，可类比作Tree 学神，知识图谱，可类比作Graph 在平时学习的过程中，要将知识模块化(解耦)，加强复用以便建立知识图谱。]]></content>
      <categories>
        <category>Methodology</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 页面维度]]></title>
    <url>%2Fhtmldimension.html</url>
    <content type="text"><![CDATA[5 Dimensions in HTML]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Router 小记 (未完)]]></title>
    <url>%2Frouter.html</url>
    <content type="text"><![CDATA[什么是Router? Router是用来匹配url以返回特定页面的工具。 全局页面的切换可以通过Router来实现，这种切换最直接地通过改变url来实现。 12345678&lt;BrowserRouter&gt; &lt;Common/&gt; &lt;Routes /&gt; &lt;Routes /&gt; &lt;Routes /&gt; &lt;Routes /&gt; &lt;Routes /&gt;&lt;/BrowserRouter&gt; 局部页面的切换可以通过nested router来实现，这种切换最直接地通过改变url来实现。]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Javascript</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS z-index]]></title>
    <url>%2Fcsszindex.html</url>
    <content type="text"><![CDATA[Z-index 123div &#123; z-index: 1 /* 整数 */&#125; 在未设定z-index的情况下，从底层到上层依次是： The background and borders of the root element Descendant non-positioned blocks, in order of appearance in the HTML Descendant positioned elements, in order of appearance in the HTML z-index 生效的前提是：页面元素position非默认值，即non-static 数值越大，优先级越高； 同层non-static元素的z-index相同，同样遵循in order of appearance in the HTML context的子元素优先级比context本身要高 注意：父元素a的优先级比父元素b的优先级低，那么无论父元素a的子元素b的优先级多高，都不会覆盖父元素b Methodology of Comparing Z-index 比较在html中的位置 比较三种层次 比较z-index大小 比较html中的前后位置]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宇宙全息论]]></title>
    <url>%2Fyuzhouquanxilun.html</url>
    <content type="text"><![CDATA[正信：相信本自具足 迷信：相信外在智慧 大信：本自具足 大愿：佛道终点 大行：颠覆认知 证悟：当下一念 五净： 心地干净 心里平静，放下情缘 内心恭敬，打开通道 球镜：反求诸己 境境：远离尘嚣，得定 爱是单向付出 情是能量纠缠 众生需度吗？ 不需！ 为何？ 众生只是你的相，相有何可度？ 是众生度了你！]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>刘丰</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Position]]></title>
    <url>%2Fposition.html</url>
    <content type="text"><![CDATA[Positioning Default: static In the flow of Document 12345678910.flow &#123; /* default value for every element. no reference point. cannot move. */ position: static; /* 或者什么都不写 */ top: 50px; /* 无效 */ right: 100px; /* 无效 */ /* offset from its static position */ position: relative; top: 50px; /* 有效 */ right: 100px; /* 有效 */&#125; Out of the flow of Document Relative to Viewport 1234567.view &#123; /* out of the flow of document */ /* a fixed postion within the viewport */ position: fixed; top: 50px; right: 100px; &#125; Relative to Containing Element The containing element is the viewport by default. How to set the direct containing elememt? set the containing-element position as relative. 12345678910.container &#123; position: relative&#125;.item &#123; /* a fixd position within its containing element */ position: absolute; top: 50px; right: 100px;&#125;]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Percentage]]></title>
    <url>%2Flengthpercentage.html</url>
    <content type="text"><![CDATA[CSS百分比长度单位 123456.test &#123; /* 显示为百分比时，基于父级元素 */ height: 90%; /* 显示为百分比时，基于父级元素 */ width: 50%;&#125; viewport: the rectangle where the webpage shows up scrollable via a scrollbar. chrome: all the UI that’s not the webpage, i.e. everything but the viewport. 12345678.test &#123; /* 1/100 of the viewport height */ height: 1vh; /* 1/100 of the viewport width */ width: 1vw ; /* calculate width and height based on content-box or border-box */ box-sizing: content-box | border-box&#125;]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 New Features]]></title>
    <url>%2Fcss3.html</url>
    <content type="text"><![CDATA[calc 1234.test &#123; width: calc(50%-10px); width: calc(100% / 6);&#125; CSS variables 1234567:root &#123; --primary-color: hotpink; &#125;h1 &#123; background-color: var(--primary-color);&#125; em, rem em: relative size to the font-szie of its direct or nearest parent. rem: relative size of root(html) elemetn; and 1rem means 100% of the root]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compelete guide to flexbox]]></title>
    <url>%2Fflexbox.html</url>
    <content type="text"><![CDATA[The Flexbox Layout (Flexible Box) module aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). 123456789101112131415161718192021222324252627.container &#123; display: flex; flex-direction: row | row-reverse | column | column-reverse; flex-wrap: nowrap | wrap | wrap-reverse; flex-flow: row nowrap /* shorthand for flex-direction + flex-wrap */; /* 想象每一列为一条竖线，多条竖线如何对齐， 一般在多列时进行考虑*/ justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly /* 主轴对齐方式 */; /* 想象每一行为一条横线，多条横线如何对齐, 一般在多行是进行考虑 */ align-content: flex-start | flex-end | center | stretch | space-between | space-around; /* 副轴 */ /* 每条横线中如何对齐（副轴），一般在单行时进行考虑, 单行最大高度为容器高度，多行最大高度为该行最高元素的高度, 默认值为stretch, 在未设定高度时有效*/ align-items: flex-start | flex-end | center | stretch | baseline;&#125;.item &#123; /* 单个item的显示序号，序号越大越靠后 */ order: 0; /* 主轴上，当有闲置空间时的空间分配规则，1表示主轴长度大于flex-basis时尽可能放大, 数字为相对大小，越大表示放得越大. 默认为0, 0为不放大 */ flex-grow: 0; /* 主轴上，当无闲置空间时的空间分配规则，1表示主轴长度小于flex-basis时尽可能缩小， 数字为相对大小，越小表示缩得越小，默认为1, 0为不缩小 */ flex-shrink: 1; /* 元素主轴长度，无width、height设定，要么是content-size,要么就是flex-basis */ flex-basis: &lt;length&gt; | auto; /* auto表示基于content */ /* 推荐使用：shorthand */ flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]; /* 单个item副轴上的对齐方式 */ align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; Flexbox Playground]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>CSS</tag>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build React Project With Amplify - NoteMaker]]></title>
    <url>%2Famplifyreactnotemaker.html</url>
    <content type="text"><![CDATA[Preparation Install Create-React-App 123sudo npm i -g create-react-app# oryarn global add create-react-app Install Amplify Cli 1yarn global add @aws-amplify/cli Configure Amplify with AWS Account 1amplify configure Initialize Project 1create-react-app project1 Initialize Project with Amplify 1amplify init Frontend - Simple Page Add Tachyons CSS to Index.html 1&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tachyons/4.11.1/tachyons.min.css"&gt; Tachyons CSS Stylings 12&lt;div className="flex flex-column items-center justify-center pa3 bg-washed-red"&gt;&lt;/div&gt; flex: display:flex 布局模式为flex flex-column: flex-direction:column 主轴方向为上下 items-center: align-items:center 沿主轴居中 justify-center: justify-content:center 垂直于主轴居中 pa3: padding: 1rem; 1rem相对于root元素字体大小的10% bg-washed-red: background-color:var(–washed-red) code: font-family:Consolas, monaco, monospace f2-l: font-size:2.25rem mb3: margin-bottom:var(–spacing-medium) list: list-style-type:none bg-transparent: background-color:var(–transparent) bn: border-style:none border-width:0 &amp;times; 乘号 Backend - API &amp; Database Add Amplify API 12345amplify add api# Edit the GraphQL Schemaamplify push# query code generated in src/graphql folderamplify console -&gt; api # get in AppSync to inspect your porject GraphQL Basics Type Language 123456789type Post @model &#123; id: ID! title: String metadata: MetaData&#125;type MetaData &#123; category: Category&#125;enum Category &#123; comedy news &#125; Post: a GraphQL Object Type id, title, metadata: fields of Character object. !: non-nullable Category: Enumeration Types Scalar Types Int: 32-bit integer Float: double-precision floating-point value String: UTF-8 Character sequence Boolean: true of false ID: uuid []: array enum: wherever we use the type Category, we expect it to be exactly one of comedy or news. Directives @model: Objects annotated with @model are stored in Amazon DynamoDB capable of being protected via @auth, related to other objects via @connection, and streamed into Amazon Elasticsearch via @searchable. automatically configure CRUDL queries and mutations. @auth: only supports APIs with Amazon Cognito User Pools enabled. @connection: one-one, one-to-many, many-to-many @versioned: directive adds object versioning and conflict resolution to a type. @searchable:handles streaming the data of an @model object type to Amazon Elasticsearch Service and configures search resolvers that search that information. Integrate React with Amplify 1yarn add aws-amplify aws-amplify-react 1234// app.jsimport Amplify from 'aws-amplify';import aws_exports from './aws-exports';Amplify.configure(aws_exports); Authentication Add Amplify Auth (HOC) 123// app.jsimport &#123; withAuthenticator &#125; from 'aws-amplify-react';export default withAuthenticator(App, &#123; includeGreetings: true &#125;); User-specific Page Modify GraphQL Schema 1234type Note @model @auth(rules: [&#123; allow: owner &#125;]) &#123; id: ID! note: String!&#125; Clear DynamoDB Data Amplify Update 12amplify update apiamplify push # must push after update locally Code Improvement: Subscription GraphQL Subscription Subscription: Once the remote update is completed, the update of local state will be applied. In handle function, you don’t have to worry about updating state locally. This will increase code resuability. Subscription follows one-to-many trigger schema. 123456789101112131415161718192021222324252627282930313233343536// App_Sub.jscomponentDidMount = async () =&gt; &#123; const result = await API.graphql(graphqlOperation(listNotes)); this.setState(&#123; notes: result.data.listNotes.items &#125;); API.graphql(graphqlOperation(onCreateNote)).subscribe(&#123; next: (noteData) =&gt; &#123; const &#123; id, note &#125; = noteData.value.data.onCreateNote; const prevNotes = this.state.notes; const updatedNotes = [ &#123; id, note &#125;, ...prevNotes ]; this.setState(&#123; notes: updatedNotes, id: null, note: '' &#125;); &#125; &#125;); API.graphql(graphqlOperation(onDeleteNote)).subscribe(&#123; next: (noteData) =&gt; &#123; const &#123; id &#125; = noteData.value.data.onDeleteNote; const prevNotes = this.state.notes; const updatedNotes = prevNotes.filter((item) =&gt; item.id !== id); this.setState(&#123; notes: updatedNotes &#125;); &#125; &#125;); API.graphql(graphqlOperation(onUpdateNote)).subscribe(&#123; next: (noteData) =&gt; &#123; const &#123; id, note &#125; = noteData.value.data.onUpdateNote; const prevNotes = this.state.notes; const updatedNotes = prevNotes.map((item) =&gt; &#123; if (item.id === id) return &#123; id, note &#125;; return item; &#125;); this.setState(&#123; notes: updatedNotes, id: null, note: '' &#125;); &#125; &#125;);&#125;; Deployment 12amplify add hostingamplify publish # must be publish Summary GitHub Point Click on Button will trigger onSubmit of the outside From. The location of preventDefault() doesn’t matter. Question What’s the difference between type and input? Resource CSS Libraries Semantic UI Bootstrap Tachyons]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Amplify</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT Courses List]]></title>
    <url>%2Fcertificate.html</url>
    <content type="text"><![CDATA[AWS Cloud Solution Architect Associate Medium A Cloud Guru (Many Labs) Udemy Whizlab (Exam Practice) The CSAA exam has 65 questions to be answered in 130 minutes. It costs 150 USD. You can cancel or reschedule for free with more than 48 hours to go for the exam. Within 48 hours and a day before the exam, you can reschedule or cancel for 60 USD. I would strongly suggest booking the exam first, you can reschedule it later if you can’t make it or are not prepared. This will give you a tangible goal to work towards, which in my case prevented me from procrastinating. Cloud Computing &amp; Linux Cloud Academy Linux Academy A Cloud Guru FrontEnd Frontend Master CSS Tricks]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Certificate Exam</tag>
        <tag>AWS Cloud Soution Architect</tag>
        <tag>Cloud Computing</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 定时任务]]></title>
    <url>%2Fnodescheduler.html</url>
    <content type="text"><![CDATA[定时任务 Install Node Schedule with Timezone Setting 1yarn add later Schedule Module in Node.js 1234567891011121314151617// import packageconst later = require('later');// set timezone as 000later.date.UTC();// cron format: https://crontab.guru/// Timezone List: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones// every 1 minute using cron formatconst cron = '* * * * *';const s = later.parse.cron(cron);// executelater.setInterval(() =&gt; &#123; slack(); gmail('rachel@tcpinpoint.com');&#125;, s);]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Schedule</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWK 读取csv输出csv]]></title>
    <url>%2Fawkparsecsv.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#!/bin/bash# Please put the input.csv in the same directory as this file.# if output.csv already exists, delete it.if [ -e output.csv ]then rm -f output.csvfi# awk function to generate the output.csvgawk ' # define a function to trim each column function rtrim(s) &#123; sub(/[ \t\r\n]+$/, "", s); return s &#125;BEGIN &#123; # awk option to escape the comma within quotes. FPAT = "([^,]*)|(\"[^\"]+\")" # initialize an array, which is used to store unique line. a[0]=""&#125;&#123; # get the first name firstName = "" if ($4 == "StudentFirstName")&#123; # correct the column name as First Name firstName = "First Name" &#125; else &#123; # define the firstname without trailing spaces. firstName = rtrim($4) &#125; # get the last name lastName = "" if ($6 == "StudentFamilyName")&#123; # correct the column name as Last Name lastName = "Last Name" &#125; else &#123; # define the firstname without trailing spaces. lastName = rtrim($6) &#125; # get the email email = "" if ($9 == "StudentEmailAddress")&#123; # correct the column name as Email Address email = "Email Address" &#125; else &#123; # define the firstname without trailing spaces. email = rtrim($9) &#125; # get the student id id = "" if ($1 == "StudentID")&#123; # correct the column name as Institition Student ID id = "Institution Student ID" &#125; else &#123; # define the id without trailing spaces. id = rtrim($1) &#125; # define firstname,lastname,email and id as one line, seperated by comma result = firstName "," lastName "," email "," id # output one line only if it is not duplicated in the pre-defined array if (!a[result]++) &#123; # output line by line to file "output.csv" print(result) &gt;&gt; "output.csv" &#125;&#125;' input.csv # the input source References: Parse CSV file ignoring comma within quotes - 4.7 Defining Fields by Content String comparison in awk String concatenation Regular Expression Right trim in awk Define function in awk The Principle of removing duplicated lines in awk Define array in awk Output as csv file in awk Comments in awk]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>AWK</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ORM vs SQL]]></title>
    <url>%2Fresuablesql.html</url>
    <content type="text"><![CDATA[ORM: pros: Simple Suitable for smal query easy to reuse cons: new things to learn slow down the performance when query is complex. SQL pros: easy to optimise cons: can be quite complex can be hard to reuse Layers of Abstraction Low Level: Database Driver This is basically as low-level as you can get — short of manually generating TCP packets and delivering them to the database. A database driver is going to handle connecting to a database (and sometimes connection pooling). At this level you’re going to be writing raw SQL strings and delivering them to a database, and receiving a response from the database. In the Node.js ecosystem there are many libraries operating at this layer. Here are three popular libraries: mysql: MySQL (13k stars / 330k weekly downloads) pg: PostgreSQL (6k stars / 520k weekly downloads) sqlite3: SQLite (3k stars / 120k weekly downloads) Each of these libraries essentially works the same way: take the database credentials, instantiate a new database instance, connect to the database, and send it queries in the form of a string and asynchronously handle the result. Here is a simple example using the pg module to get a list of ingredients required to cook Chicken Tikka Masala: Middle Level: Query Builder This is the intermediary level between using the simpler Database Driver module vs a full-fledged ORM. The most notable module which operates at this layer is Knex. This module is able to generate queries for a few different SQL dialects. This module depends on one of the aforementioned libraries — you’ll need to install the particular ones you plan on using with Knex. knex: Query Builder (8k stars / 170k weekly downloads) When creating a Knex instance you provide the connection details, along with the dialect you plan on using and are then able to start making queries. The queries you write will closely resemble the underlying SQL queries. One nicety is that you’re able to programmatically generate dynamic queries in a much more convenient way than if you were to concatenate strings together to form SQL (which often introduces security vulnerabilities). High Level: ORM This is the highest level of abstraction we’re going to consider. When working with ORMs we typically need to do a lot more configuration ahead of time. The point of an ORM, as the name implies, is to map a record in a relational database to an object (typically, but not always, a class instance) in our application. What this means is that we’re defining the structure of these objects, as well as their relationships, in our application code. sequelize: (16k stars / 270k weekly downloads) bookshelf: Knex based (5k stars / 23k weekly downloads) waterline: (5k stars / 20k weekly downloads) objection: Knex based (3k stars / 20k weekly downloads)]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Express Tutorial]]></title>
    <url>%2FexpressTutorial.html</url>
    <content type="text"><![CDATA[query vs params vs body req.query // search?q=tobi+ferret req.params // /companies/:id req.body // json file express]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Express.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js Tutorial]]></title>
    <url>%2Fnodetutorial.html</url>
    <content type="text"><![CDATA[Deploy to server helmet compression 12345678// prod.jsconst helmet = require('helmet');const compression = require('compression');module.exports = app =&gt; &#123; app.use(helmet()); app.use(compression());&#125; Configure package.json 12// index.jsrequire('prod.js')(app); 12345// package.json "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "start": "node app.js" &#125;, 安装pm2, 本机多发package manager 12sudo npm i -g pm2pm2 completion install pm2]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install aria2c on Mac]]></title>
    <url>%2Faria2c.html</url>
    <content type="text"><![CDATA[Mac Install Aria2c github -repo: .aria2]]></content>
      <categories>
        <category>DownloadTools</category>
      </categories>
      <tags>
        <tag>Aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWS Commands]]></title>
    <url>%2Faws-command.html</url>
    <content type="text"><![CDATA[ec2通过密码ssh 123sudo nano /etc/ssh/sshd_configs # PasswordAuthentication yessudo passwd ubuntusudo service sshd restart ec2设置ubuntu密码 1sudo password ubuntu]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Zsh on Ubuntu 18.04]]></title>
    <url>%2Fubuntuinstallzsh.html</url>
    <content type="text"><![CDATA[Ubuntu Install Zsh &amp; Oh My Zsh &amp; Plugins 12345678910sudo apt install -y zshsh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" # need password.# install pluginsgit clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlightingnano ~/.zshrcplugins=(git zsh-autosuggestions zsh-syntax-highlighting) # ~/.zshrc# theme 'amuse'source ~/.zshrc]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu 18.04</tag>
        <tag>ZSH</tag>
        <tag>Oh My Zsh</tag>
        <tag>Installation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Node/Postgres on Ubuntu 18.04]]></title>
    <url>%2Finstallnodepostgreonubuntu.html</url>
    <content type="text"><![CDATA[Install Node.js + Yarn in Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y nodejs npm &amp;&amp; nodejs -v &amp;&amp; npm -v Install Yarn in Ubuntu 18 123curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - &amp;&amp; \echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list &amp;&amp; \sudo apt-get update &amp;&amp; sudo apt-get install -y --no-install-recommends yarn Install Git in Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y git &amp;&amp; git --version Github Generate SSH key 1ssh-keygen -t rsa -b 4096 -C "sx.ba2017@gmail.com" &amp;&amp; cat ~/.ssh/id_rsa.pub Enter/Quit node 12node.exit Install postgresql on Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y postgresql postgresql-contrib Connect/Quit to RDS PostGres 1234alias aapi='ssh -i "tcp-admin-stats-api.pem" ubuntu@ec2-52-64-238-208.ap-southeast-2.compute.amazonaws.com'alias cdb='psql postgres://postgres:holiness-oversize-revile@aahagt7pql2i3f.cxizqzlaqvcg.ap-southeast-2.rds.amazonaws.com:5432/ebdb'cdb\q]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Postgres</tag>
        <tag>Ubuntu 18.04</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Restful协议规范]]></title>
    <url>%2FrestfulProtocol.html</url>
    <content type="text"><![CDATA[RESTful api 设计规范]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Protocol</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript Notes]]></title>
    <url>%2FjavscriptTutorial.html</url>
    <content type="text"><![CDATA[Javascript遍历方式比较 javascript遍历; 1234var arr = [&#123;name:'bb'&#125;,5,'test']for (item of arr) &#123; console.log(item)&#125; Javascript写入文本文件 javascript写入文本文件 12345678910111213141516// writefile.jsconst fs = require('fs');let lyrics = 'But still I\'m having memories of high speeds when the cops crashed\n' + 'As I laugh, pushin the gas while my Glocks blast\n' + 'We was young and we was dumb but we had heart';// write to a new file named 2pac.txtfs.writeFile('2pac.txt', lyrics, (err) =&gt; &#123; // throws an error, you could also catch it here if (err) throw err; // success case, the file was saved console.log('Lyric saved!');&#125;); Javascript单复数转化 单复数转化; Javascript判断数据类型 js判断数据类型 1console.log(typeof variable); Javascript读取json文件 1234const fs = require('fs')const dict = fs.readFileSync('utils/swagger/dict.json')dictObj = JSON.parse(dict);console.log(dictObj['timestamp without time zone']);]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR Information]]></title>
    <url>%2Fssrinfo.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vscode Tutorial]]></title>
    <url>%2FvscodeTutorial.html</url>
    <content type="text"><![CDATA[vscode多光标编辑 手动: Option + left click 尾部: 选中 + shift + option + i 同词: command + shift + l 设置 Remote Browser 12345678"remoteBrowser.connectionOptions": &#123; "host": "host", // MANDATORY "username": "ubuntu", // MANDATORY "privateKey": "/Users/xiangt/tcp-admin-stats-api.pem", // Path to private key on local machine "localHostname": "localhost", "localUsername": "xiangt", // Identify as myuser@myhost "defaultPath": "/home/ubuntu/tcp-stats-api" // Default directory to start in on connect (Absolute path)&#125;]]></content>
      <categories>
        <category>Editor</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Postgres Tutorial]]></title>
    <url>%2FpostgresTutorial.html</url>
    <content type="text"><![CDATA[postgres 列出表名 1234SELECT *FROM information_schema.columnsWHERE table_schema = 'your_schema' AND table_name = 'your_table' postgre教程 postgres postgre结果为obejct的原因 返回对象为obejct 在express中，如果use express.json()中间件，则会自动将object转化成为string 解决：JSON.parse()]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由匹配]]></title>
    <url>%2Froutermatch.html</url>
    <content type="text"><![CDATA[规律：从长倒短，从定到变（waterfall） 123router.get('/projects/count',db.xxx1);router.get('/projects/count',db.xxx2);router.get('/projects/:id/count',db.xxx3);]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Restful</tag>
        <tag>Router</tag>
        <tag>Path Match</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node-postgres Tutorial]]></title>
    <url>%2Fpg.html</url>
    <content type="text"><![CDATA[Connection Pool 123456789101112const &#123; Pool &#125; = require('pg');const pool = new Pool(&#123; user: process.env.POSTGRES_USERNAME, host: process.env.POSTGRES_HOST, database: process.env.POSTGRES_DATABASE, password: process.env.POSTGRES_PASSWORD, port: process.env.POSTGRES_PORT, max: process.env.POSTGRES_MAX_CONNECTION&#125;);module.exports = &#123; pool&#125;; Pool Usage 1234567891011 const &#123; pool &#125; = require('../utils/db');const sql = 'select * from users';pool.query(sql).then((result) =&gt; &#123; res.status(200).send(result.rows);&#125;).catch((err) =&gt; &#123; console.log(err.stack); res.status(400).json(err);&#125;); References: node-postgres]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgre</tag>
        <tag>Node</tag>
        <tag>Restful API</tag>
        <tag>DB Client</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Integrate Express with Swagger]]></title>
    <url>%2FswaggerTutorial.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
        <tag>API docs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Shortcuts]]></title>
    <url>%2Fmymacshortcut.html</url>
    <content type="text"><![CDATA[Mac Open Finder in terminal 1open . Alfred: Double Command Alfred file search: Space + Search Content Alfred file preview: shift Alfred Search Chrome Bookmark: b + Search Content Alfred 查单词 define opera Alfred 模糊单词拼写查询：spell dialect Alfred 查看剪切板：clip Alfred 清空剪切板：clean Alfred google翻译： translate sth Alfred google搜索： ggl sth Alfred map搜索: maps sth Alfred gmail搜索： gmail sth Alfred 添加文件进缓存：Option + Up Alfred 添加文件进缓存，然后光标下移： Option + Down Alfred 删除缓存最后一个文件： Option + Left Alfred 缓存文件action: Option + Right Alfred Home Folder: ` 调出Preferences: Command + &lt; 切换APP：Command + Tab 全屏: Control-Command-F 修改后：Control+ Space [基于BetterTouchTool] 切换桌面: Control + Left (Right){F5/F6} Launchpad: Command + Up Launchpad切换页面： Command + Left(Right) Lanuchpad 删除app：长按Option Spotlight: Control + Space Chrome 前进、后退: Command + Left(Right) 黑白模式切换：Control + Command 打开新标签 Command + T 切换输入法: Command + Space 打开欧陆词典: Option + Up 1password7: Command + \ 显示隐藏文件夹:Shift + Command + . 调整菜单栏图标顺序：Command + drag vscode 自动换行: option + z Dash查询选中文本: Option + \ 三个键盘流神器： BetterTouchTool： 定制任意快捷键 Alfred3：一个搜索框打开一切，不再需要dock Context： 强化版的程序切换]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install PostGres in Mac]]></title>
    <url>%2Fpostgreinstallonmac.html</url>
    <content type="text"><![CDATA[Installation 123brew updatebrew doctorbrew install postgresql Initialize DB 1initdb /usr/local/var/postgres Start Service 1pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start Configure Service on Boot 123ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist Create Default Database 1createdb # create database postgres(default name). CLI 1234567891011121314151617181920psql# user：当前mac用户# database：用户同名数据库# 主机：localhost# 端口号：5432，postgresql的默认端口是5432psql -U [user] -d [database] -h [host] -p [post]# \password：设置当前登录用户的密码# \h：查看SQL命令的解释，比如\h select。# \?：查看psql命令列表。# \l：列出所有数据库。# \c [database_name]：连接其他数据库。# \d：列出当前数据库的所有表格。# \d [table_name]：列出某一张表格的结构。# \du：列出所有用户。# \e：打开文本编辑器。# \conninfo：列出当前数据库和连接的信息。# \password [user]: 修改用户密码# \q：退出 Configure User 12345CREATE USER username WITH PASSWORD 'password';DROP DATABASE postgres;CREATE DATABASE user_database OWNER username;GRANT ALL PRIVILEGES ON DATABASE user_database to username;ALTER ROLE username CREATEDB; Mac安装PostgreSQL]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu Commands All in One]]></title>
    <url>%2Flinuxcommands.html</url>
    <content type="text"><![CDATA[File Permission r: Read w: Write x: eXecute Binary Octal Permission 000 0 — 001 1 –x 010 2 -w- 011 3 -wx 100 4 r– 101 5 r-x 110 6 rw- 111 7 rwx id display the user id and the group id id [-gGnru][--help][--version][username] Options -u: display current user id -n: display current user name (used with -u) Examples 12id -u # Result: 501id -un # Result: xiangt chown modify the owner of files or directories\ must using root Options: -R: recursive all files Examples 12# set current user as the ownersudo chown -R `id -un` /data/db chmod modify the read, write and execute permission of files or directories. 属主权限 属组权限 其它用户权限 Octal number Symbolic Permission 0 --- none 1 --x execute 2 -w- write 3 -wx write/execute 4 r-- read 5 r-x read/execute 6 rw- read/write 7 rwx read/write/execute 单行命令换行 1\ 多行命令执行 123a &amp;&amp; b # execute the b based on the successful status of aa || b # execute a and b, doesn't care about what happened beforea ; b # execute a and b, doesn't care about what happened before 给shell命令设置alias 1alias ll='ls ~' Some Alias 123alias tq="cd ~/tcp-stats-api &amp;&amp; node /home/ubuntu/tcp-stats-api/utils/temp/index.js"alias capi='ssh -i "~/tcp-admin-stats-api.pem" ubuntu@ec2-52-64-238-208.ap-southeast-2.compute.amazonaws.com'alias cdb='psql postgeslink....' Ubuntu获取当前用户名 1echo "$USER" Falling back to a fallback locale (&quot;C.UTF-8&quot;) 1sudo update-locale LC_ALL="en_US.UTF-8" chown/chmod 12chown -R $USER:$USER ./ 修改非隐藏文件chown -R $USER:$USER ./.[^.]* # 修改隐藏文件 linux read csv and process 1awk 'pattern&#123;action&#125;' file]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Using Node.js require vs. ES6 import/export]]></title>
    <url>%2Frequirevsimport.html</url>
    <content type="text"><![CDATA[Are there any performance benefits to using one over the other? The current answer is no, because none of the current browser engines implements import/export from the ES6 standard.]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>ES6</tag>
        <tag>Javscript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Student Rule]]></title>
    <url>%2Fdizigui.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Chinese Traditional Culture</category>
      </categories>
      <tags>
        <tag>Student Rules</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Push 免输账户密码]]></title>
    <url>%2Fgit-credential.html</url>
    <content type="text"><![CDATA[123456git config --global credential.helper storegit push# type your username and password# Next time you don't have to type]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 构建RESTful API]]></title>
    <url>%2Fnodeapi.html</url>
    <content type="text"><![CDATA[Introduction Install Node.js Run Node.js Node Module System NPM Introduction What is Node.js? Running Environemnt for Javascript outside browsers, often used for create backend services - API. Node is ideal for building highly-scalable, data-insentive and real-time apps. Easy to develop Can be used for prototyping and agile development Can be used in industry for large projects like Uber, Paypal, Netflix and Walmart. Friendly for javascript programmers Big community to support, libs Where is Node from? extract the javascript engine from Chrome called v8 integrate the v8 with additional modules Asynchronous in Node.js Synchronous by default in ASP.net Asynchronous by default in nodejs 异步机制：使用Event Queue, 频繁检查, 执行任务 What is Node.js used for? Node is ideal for I/O Intensive Applications. Node is not ideal for CPU Intensive Applications like video encoding and image processing applications. Install Node.js 1234# 也可以下载mac安装包brew install node# 查看版本node --version Run Node.js 1234567cd workspacemkdir newAppcd newAppcode . # use VS code# create js file and runnode app.js # for example Code Example 12345678hello = () =&gt; &#123; console.log('hello world')&#125;hello(); // vscode execute through node automaticallyconsole.log(window) // error// no window in node, that's for browser. Javascript Module Global object object that we can access everywhere, there is an object called global. 1234567global.console.log(1);global.setTimeout();global.clearTimeout();global.setInterval();global.clearInterval(); But in browser, the global obejct is the window object. 1234567window.console.log(1);window.setTimeout();window.clearTimeout();window.setInterval();window.clearInterval(); And we can just simplify it in whichever env. 1234567console.log(1);setTimeout();clearTimeout();setInterval();clearInterval(); But if you design your own obejct, it doesn’t belongs to global obejct. node different global and local 12var message = "hello";console.log(global.message);// undefinded error However it belongs to window if you use the browser rather than node. window literally eat all food all things belong to window. 12var message = 'hello';console.log(window.message); Insights: Why we need to use Module? Node is better. Browser is worse. Two js run in browser, with two variables or methods of the same name, the later one will override the previous one. Therefore, we use module to localize variables to avoid collapse. 在浏览器中，所有变量和方法都属于window 在Node中，如非特别定义，所有变量和方法都属于自己所在的文件，而不属于global Module Import and Export Module like private in Java Export module.exports.log = log 1234567891011121314151617// ./logger.jsvar url = "http://www.example.com/login";log = (m) =&gt; &#123; console.log(m)&#125;// export the log function as log.module.exports.log = log;// export single function module.exports = log;// Ormoduel.exports = &#123; log: log, url: url&#125; Import const {log, url} = require('./logger') 123456789101112// Way Oneconst logger = require('./logger') // const is better// execute the log methodlogger.log();// Way Two - better, more lightweightconst &#123;log, url&#125; = require('./logger')// If it is a single function// module.exports = log;const log = require('./logger');log("hello") './logger' vs 'logger' './logger': Current Ddirectory 'logger': Built in Current Directory in node_modules Node Wrapper 12345678(function (exports, require, module, __filename, __dirname) &#123; // file code console.log(exports); console.log(require); console.log(module); console.log(__filename); console.log(__dirname);&#125; Node Modules API Docs File System HTTP 12345678910const http = require('http');const server = http.createServer();// action after connection eventserver.on('connection',(s =&gt; console.log("new connection."))); // very low level// port 3003server.listen(3003);console.log('Listening on port 3000...'); 12345678910111213141516171819202122const http = require('http');const server = http.createServer( (req,res) =&gt; &#123; if (req.url === '/')&#123; res.write("hello world"); res.end(); &#125; if (req.url === '/api') &#123; res.write(JSON.stringify(&#123; "1":2 &#125;)); res.end(); &#125; &#125;);// port 3003server.listen(3003);console.log('Listening on port 3003...'); OS Path Process Query Strings Stream NPM Create NPM Project Switch Version of npm 1sudo npm i -g npm@5.5.1 Create package.json file 123npm init# default settingsnpm init --yes Install Node Package package is installed in node_modules 1234npm install underscore# shorternpm i underscore# you don't have to add --save anyore A better way yarn 12yarn add underscoreyarn remove underscore install all package in package.json 123yarn# ornpm i Git Ignore Packages to Push 123456789git inittouch .gitignore## inside .gitignorenode_modules/git add .git commit -m "..."git push Underscore.js 12var _ = require('underscore');console.log(_.contains([1,2,3],2)) Semantic Versioning 4.13.6 (Patch) 6: bugs fixing version (Minor) 13: new features version without breaking exsiting API (Main) 4: new features version with breaking existing application exact version : 4.13.6 stable Major and Minor: ~4.13.6 stable Major: ^4.13.6 Inspect installed versions 12345yarn listyarn list --depth=0# 效果是不一样的npm listnpm list --depth=0 View Packages 12npm view mongoosenpm view mongoose dependencies Update outdated packages 123456789npm outdated# this will only update minor and patch updatenpm update# update for major updatesudo npm i -g npm-check-updatesncu -u # to upgrade the json fileyarn # execute the update Install Packages only for Dev 1npm i jshint --save-dev Uninstall Packages 123npm un mongoose# oryarn remove mongoose Global Packages Global: can be used under any folders Local: can only be used withon on folder 12345678# update the npm to the latest versionsudo npm i -g npm# to see all outdated global packagesnpm -g outdated# uninstall global packagesnpm un -g npm NPM Registry Publish Your Own Package to NPM Registry 12345# prepare the projectmkdir lion-libcd lion-lib/npm init --yestouch index.js 12// index.jsmodule.exports.url = "asdadsad" 12345678# register for registrynpm adduser# loginnpm login# make sure your package name is unique in the pacakge.json file and the push to the registrynpm publish Updating your Published Packages 1234567# first you have to update the versio numbernpm version majornpm version minornpn version patch# then publish to the registrynpm publish RESTful Service REST Definition REST: Representational State Transfer It’s a convention for building these HTTP serivces. HTTP Protocol Http://vidly.com/api/customers/1 Http: Protocol vidly.com: Domain api: Path customers: Resource 1: Resource Unique Identifier HTTP Methods GET: retrive resources POST: upload resources PUT: update global resources PATCH: update local resources DELETE: delete resources 12345GET /api/customersGET /api/customers/1PUT /api/customers/1DELETE /api/customers/1POST /api/customers Node Monitor Reload the Node Automatically when changes apply. 12345sudo npm i -g nodemon# instead of node app.jsnodemon app.js# listen to customized file types.nodemon -e .yml,.js app.js 在配置vscode code runner为nodemon之后，nodemon失效 shell中nodemon app.js, nodemon不会失效. 推荐使用shell的方式 Express Basics Get to know express 1234# inspect it in shellnpm view express# get the official website# http://expressjs.com/ Install Express 1yarn add express Routes 1app.METHOD(URL,CALLBACK_FUNC) Example 123456789101112// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.get('/',(req, res) =&gt; &#123; res.send("Hello World")&#125;);// start listenapp.listen(port); Req Method Method Description Example req.get() 获取header中某属性的值 req.get('Content-type') req.is() 判别来的body的Content-Type req.is(html) Req Properties Property Description req.body 键值对数据 req.cookies 获取cookies req.hostname 获取域名 req.ip 获取ip req.method 获取方法 req.originalUrl 完整url req.baseUrl 路由插入的路径 req.path 细节路径 req.params 存储参数化数据 req.protocol http/https req.query 获取url中?间所夹参数 Res Method Method Description res.download() 提示将要下载文件。 res.end() 结束响应进程。 res.json() 发送 JSON 响应。 res.jsonp() 在 JSONP 的支持下发送 JSON 响应。 res.redirect() 重定向请求。 res.render() 呈现视图模板。 res.send() 发送各种类型的响应。 res.sendFile 以八位元流形式发送文件。 res.sendStatus() 设置响应状态码并以响应主体形式发送其字符串表示。 Middleware Routes 统一请求中间件：适合做User Authentication 12345678910111213141516// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.all('/', (req,res,next) =&gt; &#123; console.log('authentication'); next();&#125;);app.get('/',(req, res) =&gt; &#123; res.send("How are you?")&#125;);// start listenapp.listen(port); 单一路径多个回调 1234567891011121314// configure expressvar express = require('express');var app = express();var port = process.env.PORT || 3000;// routesapp.route("/").get((req,res)=&gt; &#123; res.send("get test");&#125;).post((req,res)=&gt; &#123; res.send("post test");&#125;)// listenapp.listen(port); express.Router Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”. Router Method Method Description router.all() 匹配所有http请求，无中间件 router.get() 匹配GET请求 router.param() 匹配特定参数 router.route() 单一路径匹配多个回调 router.use() 匹配所有http请求, 添加中间件 12345678910111213141516171819202122232425262728293031// bird.js// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router(); var port = process.env.PORT || 3000;// middlewarerouter.use((req,res,next) =&gt; &#123; console.log("authentication"); next();&#125;)router.get("/",(req,res) =&gt; &#123; res.send("main page.")&#125;)router.post("/",(req,res) =&gt; &#123; res.send("main post.")&#125;)router.get("/about", (req,res)=&gt;&#123; res.send("about page.")&#125;)// mount the middleware(router);app.use('/',router);// start listenapp.listen(port);module.exports.router = router; route.use’s callback is a middleware 12345// main.jsvar &#123;router&#125; = require('./birds');// birds is also a middlewareapp.use('/birds', birds);app.listen(3000); Parameter Route 123456789101112131415161718192021222324252627282930313233// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);//实际上 ： 充当了一个通配作用，通配规则如何，请看验证参数router.get('/:id', (req, res) =&gt; &#123; res.send('id namespace.');&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Parameter Check 有時候我們會需要針對傳入的路由參數來進行篩選或驗證，例如檢查使用者所輸入的字串是否是合法的名稱，這時候就可以使用 .param() 這個專門用來處理參數的 middleware： 12345678910111213141516171819202122232425262728293031323334353637383940414243// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);// 位于路由之前，充当另外一个middlewarerouter.param('id', (req, res, next, id) =&gt; &#123; // validation logi here console.log('valid id'); // send back request req.id = id; next();&#125;);router.get('/:id/:name', (req, res) =&gt; &#123; res.send(req.params); // res.send(req.params.name);&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Query String Parameters 1234567891011121314151617181920var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/:id", (req,res) =&gt; &#123; // 对应？后面的query参数 // 例如: localhost:3000/courses/1?sortBy=name, query中包含sortBy的key-value pair res.send(req.query);&#125;);app.use("/courses",router);app.listen(port); HTTP Get Request 1234567891011121314151617181920212223242526272829303132333435363738// http get request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);app.use("/courses",router);app.listen(port); HTTP Post Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// http post request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);// use the json middleware.app.use(express.json());app.use("/courses",router);app.listen(port); Simple Input Validation 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - simple version if (! req.body.name || req.body.name.length &lt; 3)&#123; res.status(400).send("Name is required and should be minimum 3 characters."); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); Complex Input Validation yarn add joi 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var express = require("express");// import joiconst Joi = require('joi')var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - joi version const schema = &#123; name: Joi.string().min(3).required(), &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); req.body vs req.params req.body里装的是post的data req.params里装的是url中的某个值 HTTP Update Request 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); HTTP Delete Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);router.delete("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) &#123; res.status(404).send("Course doesn't exsit."); return; &#125; // this happens in place courses.splice(courses.indexOf(course),1); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); Code One Genre: Vidly 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192var express = require("express");// for json validationvar Joi = require("joi");var app = express();var port = process.env.PORT || 3000;var router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre); console.log(genres);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)// for parsing json objectapp.use(express.json());app.use("/api/genres",router);app.listen(port); Advanced Express Middleware Middleware: modular and mountable component Custom Middleware function 12345// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;) Build-in Middlware the url encoded middleware 1app.use(express.urlencoded(&#123;extended: true&#125;)) the static resouces hosting middleware 123// static files hosted in "./public" folder// access by localhost:3000/filename.app.use(express.static("public")); Third Party Middleware Resources the performance matters. helmet - https 1npm i helmet The helmet test failed. 12const helmet = require('helmet')app.use(helmet()) // as early as possible. morgan - console logger 1npm i morgan 12const morgan = require('morgan');app.use(morgan(tiny)); Environment Development Production Testing Get the ENV variable in Javascript First method 1process.env.NODE_ENV; // might be undefined. Second method 1app.get("env") // if undefined will return default value: development. Use Morgan only in Development ENV 123456// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Set the Environment Variable in shell 1export NODE_ENV=production Use Config Management Package 1npm install config write the config file 1234567// development.json -&gt; NODE_ENV=development and so on&#123; "name" : "My Express App - Development", "mail": &#123; "host": "dev-mail-server" &#125;&#125; 通过export NODE_ENV可以根据文件名自动载入相应配置 12345678910111213const config = require("config");// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; But don't store password in default/prodcution/testing.json files. How to deal with secret/password? - In Environment Variable 1export app_privateKey = hellworld 123456789// config/custom-environment-variables.json&#123; "name" : "My Express App - Development", "mail": &#123; "host": "dev-mail-server", "password": "app-privateKey" // the env var name &#125;&#125;` Debugging 不必每次都删除consol.log() 设置环境变量，控制debug启动或者关闭 设置显示信息的内容，程度 Install the Debug Package 1npm i debug Use debugger in code 123456const startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");// console.log("Morgan Loaded in Development Stage")startupDebugger("Morgan Loaded in Development Stage");dbDebugger("Database debugger started.") Set the Env and Start Project 12345678910# set the debugger to app: startupexport DEBUG=app:startup # enable startup debuggingexport DEBUG=app:db # enable database debuggingexport DEBUG= # disable debugging.export DEBUG=app:startup,app:db # enable two debuggingexport DEBUG=APP:* # enable all debuggingnodemon app.js# shortcut to set debug and lanuch the applicationDEBUG=app:db nodemon app.js Template Engine used to return html Pug Mustache EJS Install pug 1npm i pug Set the views file. Use views in code 12345678910app.get("/", (req,res) =&gt; &#123; // view file name + variables res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);app.set('view engine', 'pug');app.set('views','./views'); Database Integration Code One Genre: Refractured FolderDescriptionconfigstore configurationmiddlewarestore all middlewarespublicstore static filesroutersstore all routersviewsstore template pug files 12345678910111213// routers/home.jsconst express = require("express");const router = express.Router();router.get("/", (req,res) =&gt; &#123; res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);module.exports = router; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192// routers/genres.jsconst express = require("express");const Joi = require("joi");const router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;)// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)module.exports = router; 123456789101112131415161718192021222324252627282930313233343536373839// app.jsconst startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");const config = require("config");const morgan = require("morgan");const express = require("express");const home = require("./routes/home");const genres = require("./routes/genres")const app = express();const port = process.env.PORT || 3000;// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); startupDebugger("Morgan Loaded in Development Stage")&#125;// database work ...dbDebugger("database debugger")app.set('view engine', 'pug');app.set('views','./views');app.use(express.static("public"));app.use(express.urlencoded(&#123;extended: true&#125;))app.use(express.json());app.use("/",home);app.use("/api/genres",genres);app.listen(port); MongoDB Configuration Install MongoDB 1brew install mongodb Create Data Directory Modify mongod.conf to set the database path. 12sudo mkdir -p /data/dbsudo chown -R `id -un` /data/db Run MongoDB in Shell 12mongod # ormongod --config /usr/local/etc/mongod.conf the port is 27017 Run MongoDB by brew 12brew services start mongodbbrew services stop mongodb MongoDB GUI Client Robot 3T [Simple][Free] dbKoda [import &amp; output &amp; charts] Studo 3T [Support SQL][Expensive] Node to MongoDB Connect simple api: mongoose. Install Mongoose 1npm i mongoose Connect to Mongodb mongoose will create database for you automatically once you create a new record in it. 12345678910const mongoose = require('mongoose');// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123;useNewUrlParser: true&#125;) // MongoDB will create the playground automatically .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err)); Define Collections and Validations 123456789101112// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema); CRUD Create Documents Mongo Conceptcollection: similar to one table in the relational databasedocument: similar to one row in the relational databaseMongoose Conceptschema: define the shape of documentsmodel: correspont to class in javascript, referring to collection, defined and created using the schema. Mongoose Data Types String Number(包含小数) Date Boolean Array Map Mixed ObjectId Decimal128 Buffer 12345678910111213141516171819// CREATE operationconst data = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true&#125;;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;createSingleCourse(data); Query Documents Compare Operator$eq: equal$ne: not equal$gt: greater than$gte: greater than or equal to$lt: less than$lte: less than or equal to$in: in$nin: not inLogical Opeartoror: orand :and 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;getAllCourses();// READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourse();// READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourseCompare();// READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareOr();// READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareRegular();// READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;getCourseCompareCount();// READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;getCourseComparePagination(); Update Documents When you need check the existence of document at first 12345678910111213// UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;findThenUpdateCourse("5c919cb9310fd622b1db90bd"); When you confirm the existence of document Update Operator 123456789101112// UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourse("5c919cb9310fd622b1db90bd"); When you want to get the old documents as results. 12345678910// UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourseWithOldRecords("5c919cb9310fd622b1db90bd"); When you want to get the updated documents as results. 12345678910// UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd"); Remove Documents 123456789async function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;removeCourse("5c919cb9310fd622b1db90bd"); Code Two Course: CRUD 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207const mongoose = require('mongoose');mongoose.set('useCreateIndex',true);// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123; useNewUrlParser: true &#125;) .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err));// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema);// CRUD is based on model.// 1. CREATE operationconst data1 = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'database', 'backend' ], // use default value for date isPublished: true, price: 10.2&#125;;const data2 = &#123; name: 'Node Js Course', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true, price: 30&#125;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;// createSingleCourse(data1);// createSingleCourse(data2);// 2.1 READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;// getAllCourses();// 2.2 READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourse();// 2.3 READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourseCompare();// 2.4 READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareOr();// 2.5 READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareRegular();// 2.6 READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;// getCourseCompareCount();// 2.6 READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;// getCourseComparePagination();// 3.1 UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;// findThenUpdateCourse("5c919cb9310fd622b1db90bd");// 3.2 UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourse("5c919cb9310fd622b1db90bd");// 3.3 UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourseWithOldRecords("5c919cb9310fd622b1db90bd");// 3.4 UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;// updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd");// 4 REMOVE Operation - update with new as resultasync function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;// removeCourse("5c919cb9310fd622b1db90bd"); Data Validation Validation Happens in Mongoose Level, not in Database Level. Three Levels of Validation:Router Level: JoiMongoose Level: Built-in ValidationDatabase Level: MySQL … 12345678910// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;); Error handling 12345678910111213async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); try &#123; // return a promise const result = await course.save(); &#125;catch(err) &#123; console.log(err.message); &#125;&#125;createSingleCourse(data1);createSingleCourse(data2); Built-in Validation Price is only required when it is published 1234567891011121314151617181920212223242526const courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: [String], date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Custom Validation 123456789101112131415161718192021222324252627282930313233343536// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; validator: function(v) &#123; return v &amp;&amp; v.length &gt; 0; &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Async Validation What if you need to call another api during the validation? The Answer is the callback function 12345678910111213141516171819202122232425262728293031323334353637383940// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; isAsync: true, validator: function(v, callback) &#123; setTimeout(() =&gt; &#123; const result = v &amp;&amp; v.length &gt; 0; callback(result); &#125;, 2000); &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Mongoose Connect Document References (normalization) 1234567let author = &#123; name:"James"&#125;let course = &#123; author: 'id' // id is the reference to James.&#125; Embedded Documents (denormalization) 12345let course = &#123; auther : &#123; name: James &#125;&#125; Hybrid Approach useful when you want to snasx492021 1234567891011let author = &#123; name： "James", // other 50 properties&#125;let course = &#123; author: &#123; id: 'ref', // embedeed approach name: "James" // reference approach &#125;&#125; Compare: Reference can ensure consistence but low performance. Embedded method can ensure high performance but low consistency. Consistency means every time you update the author data, all the same record elsewhere are also updated. Reference use central store to keep consistence. But every time you query course, you have to query the auther once which reduce the performance. Reference Document 123456789101112131415161718192021const Course = mongoose.model('Course',new mongoose.Schema(&#123; name: String, author: &#123; type: mongoose.Schema.Types.ObejctId, ref: 'Author' &#125;&#125;))async function createCourse(name, author) &#123; const course = new Course(&#123; name, author &#125;);createCourse('James', 'authorID'); async function listCourses() &#123; const courses = await Course.find().select('name'); console.log(courses);&#125; Populate Method 1234567async function listCourses() &#123; const courses = await Course.find().select('name author'); console.log(courses);&#125;// here you only got an idlistCourses(); if you want the entire author obejct 123456789async function listCourses() &#123; const courses = await Course.find() .populate('author') .select('name author'); // seperate by space console.log(courses);&#125;// here you only got the entire author obejctlistCourses(); if you only want name property for author object` 12345678async function listCourse() &#123; const courses = await Course.find() .populate('author','name -_id') // core code .populate('category', 'name') .select('name author'); console.log(courses);&#125;listCourse(); Embedded Document 123456789101112131415161718192021222324const authorSchema = new mongoose.Schema(&#123; name: String, bio: String, website: String&#125;);const Author = mongoose.model('Author', authorSchema);// core code: schema in schemaconst Course = mongoose.model('Course', new mongoose.Schema(&#123; name: String, author: authorSchema&#125;));async function createCourse(name, author) &#123; const course = new Course(&#123; name, author: authorSchema &#125;); const result = await course.save(); console.log(result);&#125;createCourse('The Secret', new Author(&#123;name: 'James'&#125;)); Remove item in an array 12345678910async function removeAuthor(courseId, authorId) &#123; const course = await Course.findById(courseId); // core code const author = course.authors.id(authorId); author.remove(); // core code course.save();&#125; Validate Object Id 12yarn joiyarn add joi-objectid 12345678910111213// import joi-objectidconst Joi = require('joi');Joi.obejctId = require('joi-objectid')(Joi);function validateId(rental) &#123; const schema = &#123; // customerId: Joi.string().required(); // core code customerId: Joi.objectId().required(); &#125; return Joi.validate(rental, schema);&#125; Transactions &amp;&amp; Two-Phase Commit Transaction: several operations as a unit in relational database. Two-phase Commit: the same idea in Mongo DB Tool: yarn add fawn Authentication &amp; Authorization Concepts: Authentication: Registered user Authorization: right access for some operations Auth Flow User Model 123456789101112131415161718192021222324252627// ./models/userconst config = require('config');const jwt = require('jsonwebtoken');const Joi = require('joi');const mongoose = require('mongoose');const userSchema = new mongoose.Schema(&#123; ... isAdmin: Boolean&#125;);// instance method is defined in schema level.userSchema.methods.generateAuthToken = function() &#123; const token = jwt.sign(&#123; _id: this._id, isAdmin: this.isAdmin &#125;, config.get('jwtPrivateKey')); return token;&#125;;const User = mongoose.model('User', userSchema);function validateUser(user) &#123; ...&#125;exports.User = User;exports.validate = validateUser; User Router 123456789101112131415161718192021222324252627282930313233// ./routes/users.jsconst auth = require('../middleware/auth');const jwt = require('jsonwebtoken');const config = require('config');const bcrypt = require('bcrypt');const _ = require('lodash');const &#123; User, validate &#125; = require('../models/user');const mongoose = require('mongoose');const express = require('express');const router = express.Router();router.get('/me', auth, async (req, res) =&gt; &#123; const user = await User.findById(req.user._id).select('-password'); res.send(user);&#125;);router.post('/', async (req, res) =&gt; &#123; const &#123; error &#125; = validate(req.body); if (error) return res.status(400).send(error.details[0].message); let user = await User.findOne(&#123; email: req.body.email &#125;); if (user) return res.status(400).send('User already registered.'); user = new User(_.pick(req.body, [ 'name', 'email', 'password' ])); const salt = await bcrypt.genSalt(10); user.password = await bcrypt.hash(user.password, salt); await user.save(); const token = user.generateAuthToken(); res.header('x-auth-token', token).send(_.pick(user, [ '_id', 'name', 'email' ]));&#125;);module.exports = router; Auth Router 123456789101112131415161718192021222324252627const Joi = require('joi');const bcrypt = require('bcrypt');const _ = require('lodash');const &#123;User&#125; = require('../models/user');const mongoose = require('mongoose');const express = require('express');const router = express.Router();router.post('/', async (req, res) =&gt; &#123; const &#123; error &#125; = validate(req.body); if (error) return res.status(400).send(error.details[0].message); let user = await User.findOne(&#123; email: req.body.email &#125;); if (!user) return res.status(400).send('Invalid email or password.'); const validPassword = await bcrypt.compare(req.body.password, user.password); if (!validPassword) return res.status(400).send('Invalid email or password.'); const token = user.generateAuthToken(); res.send(token);&#125;);function validate(req) &#123; ...&#125;module.exports = router; Auth Middleware 12345678910111213141516const jwt = require('jsonwebtoken');const config = require('config');module.exports = function (req, res, next) &#123; const token = req.header('x-auth-token'); if (!token) return res.status(401).send('Access denied. No token provided.'); try &#123; const decoded = jwt.verify(token, config.get('jwtPrivateKey')); req.user = decoded; next(); &#125; catch (ex) &#123; res.status(400).send('Invalid token.'); &#125;&#125; Admin Middleware 12345678module.exports = function (req, res, next) &#123; // 401 Unauthorized // 403 Forbidden if (!req.user.isAdmin) return res.status(403).send('Access denied.'); next();&#125; Add Auth to Router 1234567app.use('/some-route', auth, ()=&gt; &#123; // example function&#125;)router.user('/some-route', auth, () =&gt; &#123; // example function&#125;) Lodash - a improve version of Underscore 1yarn add lodash Typically 123456789user = new User(&#123; name: req.body.name, email: req.body.email, password: req.body.password&#125;);res.send(&#123; name: user.name, email: user.email,&#125;) Better way 1234const _ = require('lodash');user = new User(_.pick(req.body, ['name','email','password']));res.send(_.pick(user,['_id','name','email'])); Enforce Password Complexity 1yarn add joi-password-complexity Hashing Password 1yarn add bcrypt 12345// bcrypt 加密const salt = await bcrypt.genSalt(10);const password = await bcrypt.hash(user.password, salt);// bcrypt 验密const validPassword = await bcrypt.compare(req.body.password, password); Then we should store the hashed password into database. JWT For auth router, this time we return a string instead of true or invalid password. The JWT will store in localstorage for future access to api. More 1yarn add jsonwebtoken 12345678910// Generate and send Tokenconst token = jwt.sign(&#123; _id: this._id&#125;, "privateKey");res.header('auth-token', token).send();// verify tokentry &#123; const decoded = jwt.verify(token, config.get('jwtPrivateKey'));&#125;catch(err) &#123; console.log("Access Denied.")&#125; Set JWT Private Key in Environment Variable 1yarn add config 1234// config/default.json&#123; "jwtPrivateKey": "anything"&#125; mapping bewtween setting name and env var name 1export vidly_jwtPrivateKey=anything 1234// config/custom-environment-variables.json&#123; "jwtPrivateKey": "vidly_jwtPrivateKey"&#125; Set Token in Response Header We want to give the user the JWT token after they registering. Assume users don’t have to do email confirmation after registration. We will not store the token in reponse. We will store the token in reposne header. 12const token = jwt.sign(&#123;_id: user.id&#125;, 'anystring'); // anything should be replaced by environment variableres.header('x-auth-token',token).send(_.pick(user,['_id','name','email'])); Some Notes err.stack err.stack: the trace of error 1console.log(err.stack);]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Restful API</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端工程师技术图谱]]></title>
    <url>%2Fbackendallinone.html</url>
    <content type="text"><![CDATA[数据结构 常用算法 并发 操作系统 设计模式 运维 &amp; 统计 &amp; 技术支持 中间件 网络 数据库 搜索引擎 … 数据结构 队列 集合 链表、数组 字典、关联数组 栈 树 二叉树 完全二叉树 平衡二叉树 二叉查找树（BST） 红黑树 B-，B+，B*树 LSM 树 BitSet 常用算法 排序、查找算法 选择排序 冒泡排序 插入排序 快速排序 归并排序 希尔排序 堆排序 计数排序 桶排序 基数排序 二分查找 Java 中的排序工具 布隆过滤器 字符串比较 KPM 算法 深度优先、广度优先 贪心算法 回溯算法 剪枝算法 动态规划 朴素贝叶斯 推荐算法 最小生成树算法 最短路径算法 并发 多线程 线程安全 一致性、事务 事务 ACID 特性 事务的隔离级别 锁 Java中的锁和同步类 公平锁 &amp; 非公平锁 悲观锁 &amp; 乐观锁 &amp; CAS ABA 问题 CopyOnWrite容器 RingBuffer 可重入锁 &amp; 不可重入锁 互斥锁 &amp; 共享锁 死锁 操作系统 计算机原理 进程 线程 协程 Linux 设计模式 设计模式的六大原则 23种常见设计模式 应用场景 单例模式 责任链模式 MVC IOC AOP UML 微服务思想 康威定律 运维 &amp; 统计 &amp; 技术支持 常规监控 APM 统计分析 持续集成(CI/CD) Jenkins 环境分离 自动化运维 Ansible puppet chef 测试 TDD 理论 单元测试 压力测试 全链路压测 A/B Test 虚拟化 KVM Xen OpenVZ 容器技术 Docker 云技术 OpenStack DevOps 文档管理 中间件 Web Server Nginx OpenResty Apache Httpd Tomcat 架构原理 调优方案 Jetty 缓存 本地缓存 客户端缓存 Memcached Redis 架构 回收策略 Tair 消息队列 消息总线 消息的顺序 RabbitMQ RocketMQ ActiveMQ Kafka Redis 消息推送 ZeroMQ 定时调度 单机定时调度 分布式定时调度 RPC Dubbo Thrift gRPC 数据库中间件 Sharding Jdbc 日志系统 日志搜集 配置中心 API 网关 网络 协议 OSI 七层协议 TCP/IP HTTP HTTP2.0 HTTPS 网络模型 Epoll NIO kqueue 连接和短连接 框架 零拷贝（Zero-copy） 序列化(二进制协议) Hessian Protobuf 数据库 基础理论 数据库设计的三大范式 MySQL 原理 InnoDB 优化 索引 聚集索引, 非聚集索引 复合索引 自适应哈希索引(AHI) explain NoSQL MongoDB Hbase 搜索引擎 搜索引擎原理 Lucene Elasticsearch Solr sphinx 性能 性能优化方法论 容量评估 CDN 网络 连接池 性能调优 流式计算 Storm Flink Kafka Stream 应用场景 Hadoop HDFS MapReduce Yarn Spark 安全 web 安全 XSS CSRF SQL 注入 Hash Dos 脚本注入 漏洞扫描工具 验证码 DDoS 防范 用户隐私信息保护 加密解密 对称加密 哈希算法 非对称加密 服务器安全 数据安全 数据备份 网络隔离 内外网分离 登录跳板机 授权 RBAC OAuth2.0 常用开源框架 开源协议 日志框架 Log4j、Log4j2 Logback ORM 网络框架 Web 框架 Spring 家族 工具框架 分布式设计 扩展性设计 稳定性 &amp; 高可用 硬件负载均衡 软件负载均衡 限流 应用层容灾 跨机房容灾 容灾演练流程 平滑启动 数据库扩展 读写分离模式 分片模式 服务治理 服务注册与发现 服务路由控制 分布式一致 CAP 与 BASE 理论 分布式锁 分布式一致性算法 PAXOS Zab Raft Gossip 两阶段提交、多阶段提交 幂等 分布式一致方案 分布式 Leader 节点选举 TCC(Try/Confirm/Cancel) 柔性事务 分布式文件系统 唯一ID 生成 全局唯一ID 一致性Hash算法 设计思想 &amp; 开发模式 DDD(Domain-driven Design - 领域驱动设计) 命令查询职责分离(CQRS) 贫血，充血模型 Actor 模式 响应式编程 DODAF2.0 Serverless 项目管理 架构评审 重构 代码规范 RUP 看板管理 SCRUM 极限编程 敏捷开发 结对编程 通用业务术语 技术趋势 架构师素质 团队管理 招聘 资讯 行业资讯 公众号列表 博客 团队博客 个人博客 综合门户、社区 问答、讨论类社区 行业数据分析 专项网站 其他类 推荐参考书 在线电子书 纸质书 开发方面 架构方面 技术管理方面 基础理论 工具方面 大数据方面 技术资源 开源资源 手册、文档、教程 在线课堂 会议、活动 常用APP 找工作 工具 代码托管 文件服务 综合云服务商]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么在中国，规定白衣不能阅戒?]]></title>
    <url>%2Fjielv.html</url>
    <content type="text"><![CDATA[为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。 为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[佛法在印度的分期弘扬以及三乘教学]]></title>
    <url>%2Ffofafenqi.html</url>
    <content type="text"><![CDATA[一。小乘佛教时期 1. 原始佛教时期 2. 部派佛教时期 二。 大乘佛教时期 三。 密教时期 四。 小乘、大乘、密乘 五。 教外别传 [TOC] 一。小乘佛教时期 佛法在印度传播 重点： 出离红尘，持戒，修四禅八定，寂灭定 见地： 知苦及苦的根源，离情去欲 1. 原始佛教时期 佛初转法轮 - 涅槃，约100年左右 教授重点：小乘佛法 弟子果味：有弟子证得阿罗汉果 2. 部派佛教时期 涅槃后400年 教授重点：小乘教理 弟子果位：已证阿罗汉果的弟子从阿罗汉转向菩萨乘 二。 大乘佛教时期 在印度传播 重点：六度（布施，持戒，忍辱，精进，禅定，般若）；入世行菩萨道，自度度人，圆满功德。 见地：色空不二，心无挂碍。 修证：中观、唯识，证十地菩萨果位 佛涅槃后的第二个500年 教授重点：大乘佛法 弟子果位：有弟子证得菩萨果味 三。 密教时期 印度佛法传播转入密乘 重点：身口意清净，与诸佛相应，得到果位上师和佛菩萨的灌顶。 主张：以欲制欲，以贪治贪，最后实证“这世界一切法与实相不相违背”，即身成佛。 佛涅槃后的第三个500年 教授重点：密法 弟子果位：菩萨乘和金刚乘果味皆有人证得 四。 小乘、大乘、密乘 《法华经》：声闻乘，缘觉乘，菩萨乘 现在：声闻缘觉为小乘，菩萨为大乘，大乘又分显密两宗。两宗在戒律和修证法门上都有很大不同，但是都以大乘见地为指导思想。 三乘：小乘，大乘，密乘 五。 教外别传 小乘，大乘，密乘都是此地修学。称为渐修。 教外别传，以心印心。称为顿悟。 佛嘱托迦叶尊者将以心印心在印度传下去，在二十八祖菩提达摩之时，传至中国，从而形成了禅宗！ 如果我们把成佛比喻成从有生死的此岸到解脱生死的彼岸,那佛法就像一艘从此岸到彼岸的船或航海的灯塔。我们要驾着这艘船，在航灯的照耀下，越过心灵的情天欲海，破除在三界中的种种执着，分别，而后登上成佛的变。那时，此岸彼岸、这艘船以及灯塔对于我们来说也如梦如幻，可以全部放下不要了。此时，我们领悟的就是教外别传的心法。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple Notes]]></title>
    <url>%2Fdailynotes.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>DayNotes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Github上传大文件]]></title>
    <url>%2Fgitlfs.html</url>
    <content type="text"><![CDATA[Install git lfs 12# mac上安装brew install git-lfs Git init 必须在git repo中使用git lfs 123git lfs installgit init# git add -A Track file 在push大文件前，要手动track这些文件 123git lfs track "bigfile.suffix"git lfs track "*.zip"git lfs track "repo/" Commit &amp; Push track之后正常git commit push就可以，会自动上传 12git commit -m "commit comment"git push 后记 期待可以不用track，全自动的git lfs.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git lfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next Generation JavaScript]]></title>
    <url>%2Fes6.html</url>
    <content type="text"><![CDATA[Variables 123var: 可以重复命名，全局作用域let: 可变，块级作用域，不能重复命名const: 不可变 Functions 123function myFunc() &#123;&#125;// ES6const myFunc = (parameters) =&gt; &#123;&#125; Modules 1234567891011121314// ./person.jsexport default person// ./utility.jsexport const clean = () =&gt; &#123;&#125;；export const baseData = 10;// ./app.jsimport person from './person.js'import prs from './person.js'// use &#123;&#125; to specifically import modules from js fileimport &#123;baseData&#125; from './utility.js'import &#123;clean&#125; from './utility.js' Class 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 123456789101112131415161718192021222324252627class Human &#123; constructor()&#123; this.gender = 'male'; &#125; printGender()&#123; console.log(this.gender); &#125;&#125;class Person &#123; constructor()&#123; // must be declared explicitly super(); this.name = 'Max'; this.gender = 'female' &#125; printMyName()&#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); ES6 Syntax 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 子类构造器中必须出现super 因为子类未指定this作用域 12345678910111213141516171819class Human &#123; gender = 'male'; printGender = () =&gt; &#123; console.log(this.gender); &#125;&#125;class Person &#123; name = 'Max'; gender = 'female' printMyName = () =&gt; &#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); Spread &amp; Rest 1234567891011121314151617181920212223242526272829// use ... to unwrap the old arrayconst newArray = [...oldArray,1,2]// use ... to unwrap the old objectconst newObject - &#123;...oldObject, newProp:5&#125;// use ... to wrap variable length of arguments into one arrayfunciton sortArgs(...args)&#123; return args.sort();&#125;// example:// spread function on arrayconst arr1 = [1,2];const arr2 = [...arr1,3];console.log(arr2);// spread function on objectconst obj1 = &#123;name:'James'&#125;;const obj2 = &#123;...obj1, age:28&#125;;console.log(obj2)// rest function in function argsconst filter = (...args) =&gt;&#123; // === check type and value return args.filter(el =&gt; el === 1);&#125;console.log(filter(1,2,3,1)) Destructuring 123456789// array destructuring[a,b] = ['Hello','Max'];console.log(a);console.log(b);// object destructuring&#123;name&#125; = &#123;name:'Max',age:28&#125;;console.log(name);console.log(age); //undefined; Primitive type and Reference type 1234567891011121314151617const person = &#123; name:'James'&#125;;const secondPerson = person; // reference typeconsole.log(secondPerson);const person = &#123; name: 'James'&#125;;const secondPerson = &#123; ...person, age = 29&#125;;console.log(secondPerson); Array Function 无作用域 Cannot be used as the constructor 1234const numbers = [1,2,3];const doubleNumArray = numbers.map(el =&gt; el*2);console.log(doubleNumArray); Promise 先调用后声明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 基本结构new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:'...'. type:'post', success(res)&#123; resolve(res) &#125;, error(err)&#123; reject(err) &#125; &#125; )&#125; ).then((res)=&gt; console.log('success'),(err)=&gt; console.log("error"))// 链式操作var promiseFn1 = new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:"...", type:'post', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; )&#125; &#125;)var promiseFn2 = new Promise((resolve,reject) =&gt; &#123; $.ajax(&#123; url:"...", type:'get', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; &#125;) &#125;)// function -&gt; object orientedpromiseFn1.then(()=&gt; &#123; console.log("promise1 success") return promiseFn2 &#125;).then(()=&gt; console.log('promiseFn2 success!'))]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML页面加载过程]]></title>
    <url>%2Fhtmlloading.html</url>
    <content type="text"><![CDATA[页面加载过程 url解析 -&gt; DNS查询 -&gt; 资源请求 -&gt; 浏览器解析 url结构 协议 + 域名 + 端口 + 路径 + 参数 + 哈希 DNS查询 浏览器 - DNS缓存+DNS服务器 dns-fetch: fetch the ip address for some dns and cache 资源请求 browser -&gt; Request Header + 参数 -&gt; 服务器 服务器 -&gt; status + response header + body -&gt; browser 浏览器解析 DOM + JS(优先) -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Fullstack</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux/Unix下查找大于100mb的文件]]></title>
    <url>%2Ffindbigfilelinux.html</url>
    <content type="text"><![CDATA[查找当前目录下大于100mb的所有文件 1find . -type f -size +100M 显示当前目录大小 1du -sh . 显示当前目录或者文件夹的所占磁盘空间 1du -sh * 显示前十个占用空间最大的目录 1du -s * | sort -nr | head]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习面试攻略(国内)]]></title>
    <url>%2Fmlinterview.html</url>
    <content type="text"><![CDATA[机器学习求职攻略(国内) AI岗位招聘流程 公司与岗位盘点 简历的书写和优化 项目与竞赛 机器学习面试考察点 面试题的真实模样 机器学习求职攻略(国内) 根本原则：投其所好 AI岗位招聘流程 秋招 8月到10月底结束战斗 春招 春节过后 跳槽 春节前后人员流动大，难度系数较低，需要相关背景和项目要求 7月底高校抢人 8月初内推筛选 8月底9月初正式校招 公司与岗位盘点 知名企业 腾讯,阿里，金服，滴滴，网易，百度，头条，美团，陆金所 京东，爱奇艺，宜人贷，360，优酷，土豆，快手，抖音，苏宁易购，小米 岗位职能 平台数据处理类：数据清洗，大样本和高维度数据，mapreduce 算法研究应用类：文本挖掘，推荐，排序，风控，图像识别，商业智能，传统行业应用（预测用户行为） 比较热门的：图像视频，计算机视觉，文本的岗位更多一些， 薪资水平 AI&gt;后端&gt;移动=前端 简历的书写和优化 简历： 个人信息，专业技能，项目经历，科研经历 专业技能: 算法(机器学习算法，深度学习算法)，特定方向技能，编程语言，数据分析处理工具库(python,spark) 项目经历：学校项目，数据科学比赛，实习经历 科研经历：论文，学术成就 原则：真实具体-项目背景，用了什么工具，达到什么效果（加评估)，如果优化和改进的？ 项目与竞赛 核心 项目选择和岗位匹配，体现数据技能，还能加点paper就好了 项目名称和背景 项目数据和特点 项目的流程和关键 项目的核心技术及优化手段 竞赛平台：Kaggle, 天池， DataCastle 读别人的成果 写自己的项目 比赛的选择：和岗位背景匹配的竞赛，体现相关技能和技术的比赛，有优异成绩的比赛 比赛的一般思路： 问题分析和抽象 数据分析和发现 数据与特征处理 建模以及优化（在模型还是在数据层面优化） 机器学习面试考察点 主要内容： 常用机器学习算法理解 数据结构算法题 项目实施与优化细节 业务认识与沟通 考察方面： 算法模型和理论基础扎实程度 工程实现能力和编码水平 业务理解和思考深度 沟通和表达能力 备战资源： 代码算法：快排，二分查找； 剑指offer；leetcode 机器学习 李航《统计学习方法》 周志华《机器学习》 Coursera Stanford《Machine Learning》 Coursera台湾大学《机器学习高级技法》 项目：算法，优缺点，数据，特征，优化等等 海量数据处理： Map_Reduce Hadoop spark 面试题的真实模样 统计 统计的基本知识 贝叶斯公式 排列组合题目 数学期望 统计概率题目 算法 对时间复杂度和空间复杂度有基本的认知 排序与二分查找 链表翻转 打印矩阵倒三角 二叉树中任意两个节点的最近公共祖先 上亿的query中周到频率最高的k个 机器学习 机器学习算法-核心 推到逻辑回归算法，loss function L1/L2正则化的区别 决策树如何完成回归 解释随机森林和GBDT 数据幅度缩放和归一化 是偶写SVM间隔对偶的推到 K-MEANS中k如何选取 优化算法 介绍一些bagging和boosting 过拟合和欠拟合发生的原因，如何缓解过拟合]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My Resume (Markdown)]]></title>
    <url>%2Fmdresume.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Resume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Admin Dashboard MRD]]></title>
    <url>%2Fadmindata.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Job</category>
      </categories>
      <tags>
        <tag>MRD</tag>
        <tag>Job</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asynchronous Client - Axios]]></title>
    <url>%2Faxios.html</url>
    <content type="text"><![CDATA[Install Axios Import Axios Promise Async/await Axios API without async/await Request Config/Options Axios Response Object Axios Error Object Axios Instance Install Axios 123npm install ---save axios# oryarn add axios Import Axios 12345// react styleimport axios from "axios";// javascript styleconst axios = require(); Promise 1234567const promise = new Promise((resolve,reject) =&gt; &#123; if (//异步操作成功) &#123; resolve(value); // resolve 是请求成功后的解决方案 &#125; else &#123; reject(value); // reject 是请求失败后的解决方案 &#125;&#125;) async/await async: async ensures that the function returns a promise, and wraps non-promises in it. [强制返回 promise] 12345678910async function f() &#123; return Promise.resolve(1);&#125;f().then(alert); // 1/****** Automatically Wrap ********/async function f() &#123; return 1;&#125;f().then(alert); // 1 await: The keyword await makes JavaScript wait until that promise settles and returns its result. 在async代码框内部，是synchronous执行；在async代码框外部，是asynchronous执行。 123456// works only inside async functions, the following is wrongres = await axios(&#123; url: "https://api.github.com/users/KrunalLathiya", method: "get"&#125;);console.log(res); Wrap the await with async 1234567891011121314151617// run in the chrome consoleconst axios = require("axios");async function getData() &#123; console.log(1); res = await axios(&#123; // await only stuck code afterwards but within the same async block url: "https://api.github.com/users/KrunalLathiya", method: "get" &#125;); console.log(2);&#125;console.log(0);getData();console.log(3);// the result is 0 - 1 - 3 - 2 Conclusion: async: a wrapper of await which forces to return a promise. await to stuck code afterwards which needs a wrapper ( async ) They are twins. Promise + async/await Wrong 1234567891011121314151617181920async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; await pool // put a await before a promise won't work // put a await ebfore a promise's reult works. .query(sql) .then((result) =&gt; &#123; const data = result.rows; final += getSingleTable(table, data); &#125;) .catch((err) =&gt; &#123; console.log(err.stack); &#125;) &#125;&#125; Right 12345678910111213141516async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; try &#123; const result = await pool.query(sql); // return result const data = result.rows; final += getSingleTable(table, data); &#125;catch(err) &#123; // error is catched in try/catch block console.log(err.stack); &#125; &#125;&#125; Put a await before a promise won’t work.Put a await ebfore a promise’s result works. Axios API without async/await API methods 1234567axios.get(); // get dataaxios.post(); // insert new dataaxios.put(); // replace oldaxios.delete(); // remove dataaxios.patch(); // send only changed dataaxios.options();axios.head(); Elegant usage 123456789101112131415161718const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://api.github.com/users/KrunalLathiya", &#123; params: &#123; ID: 12345 &#125; &#125;) .then(res =&gt; &#123; console.log(res.data.login); &#125;) .catch(err =&gt; &#123; console.log(err); &#125;);&#125;;getGithubData(); Request Config/Options Authorization (GET) 1234567891011121314const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://appdividend.com", &#123; // params: &#123;&#125; .. headers: &#123; Authorization: "Bearer " + "" //the token is a variable which holds the token &#125; &#125;) .then(res =&gt; console.log(res)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Authorization (POST) 123456789101112131415161718192021const axios = require("axios");let data = &#123; email: "test@163.com"&#125;;let config = &#123; headers: &#123; "Content-Type": "application/x-www-form-urlencoded", Authorization: "Bearer " + "token" &#125;, responseType: "blob"&#125;;getGithubData = () =&gt; &#123; axios .post("http://appdivident.com", data, config) .then(res =&gt; console.log(res.data)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Axios Response Object data: the payload returned from the server. By default, Axios expects JSON and will parse this back into a JavaScript object for you. status: the HTTP code returned from the server. statusText: the HTTP status message returned by the server. headers: all the headers sent back by the server. config: the original request configuration. request: the actual XMLHttpRequest object (when running in a browser). Axios Error Object message: the error message text response: the response obejct (if received) as described in the previous section. request: the actual XMLHttpRequest object (when running in a browser). config: the original request configuration Axios Instance 123456const axios = require("axios");request = axios.create(&#123; baseURL: "http://ec2-13-211-47-167.ap-southeast-2.compute.amazonaws.com:3000"&#125;);request.get("/articles").then(res =&gt; console.log(res.data)); Summary 何时使用async/await,何时使用axios自带API?async/await: 自定义复杂代码块axios API: 简单代码块调用注意： promise本来就是异步的。]]></content>
      <categories>
        <category>Fullstack</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Javascript</tag>
        <tag>Async</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Markdown]]></title>
    <url>%2Fmdtutorial.html</url>
    <content type="text"><![CDATA[Font’s Color and Size 字体Alignment 对齐方式Next Notes 便签Tab 选项卡Label 标签Button 按钮Video 视频PDF 电子书Images 图片Tables 表格Footnotes 脚注 Headings 标题 123456# heading level 1## heading level 2### heading level 3#### heading level 4##### heading level 5###### heading level 6 Paragraph 段落 1I really like using Markdown. Space 空格 I really like using Markdown. I think I’ll use it from now on. 1I really like using Markdown. &amp;nbsp; I think I'll use it from now on. Line Breaks 换行 I really like using Markdown. I think I’ll use it from now on. 12I really like using Markdown. &lt;/br&gt; I think I'll use it from now on. Emphasis 加粗 bold text 1**bold text** Italic 斜体 itabllic 1*italic* Bold and Italic 斜体加粗 important 1***important*** Strikethrough 删除线 The world is flat round. 1The world is ~~flat~~ round. Font’s Color and Size 字体 color=green size=3 1&lt;font color=green size=3&gt;color=green size=3 &lt;/font&gt; color=red size=3 1&lt;font color=red size=3&gt;color=red size=3&lt;/font&gt; Background Color 背景色 orange 12345&lt;!-- tr for row --&gt;&lt;!-- td for data --&gt;&lt;!-- th for header --&gt;&lt;!-- t --&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Generate HTML Table MDN HTML Table Alignment 对齐方式 center 诶嘿 1&lt;center&gt;诶嘿&lt;/center&gt; left 诶嘿 1&lt;p align="left"&gt;诶嘿&lt;/p&gt; right 诶嘿 1&lt;p align="right"&gt;诶嘿&lt;/p&gt; Next Notes 便签 Nostyle NoteWelcome to Hexo! 1234&#123;% note %&#125;### Nostyle NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Default NoteWelcome to Hexo! 1234&#123;% note default %&#125;### Default NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Primary NoteWelcome to Hexo! 1234&#123;% note primary %&#125;### Primary Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Info NoteWelcome to Hexo! 1234&#123;% note info %&#125;### Info Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Success NoteWelcome to Hexo! 1234&#123;% note success %&#125;### Success Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Warning NoteWelcome to Hexo! 1234&#123;% note warning %&#125;### Warning Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Danger NoteWelcome to Hexo! 1234&#123;% note danger %&#125;### Danger Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; No icon noteNote without icon: note info no-icon123code block in note tagcode block in note tagcode block in note tag 123456789&#123;% note info no-icon %&#125;### No icon noteNote **without** icon: `note info no-icon`&#123;% code %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Codeblock Note123code block in note tagcode block in note tagcode block in note tag 12345678&#123;% note success %&#125;### Codeblock Note&#123;% code lang:javascript %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Tab 选项卡 选项卡 1选项卡 2选项卡 3123 1234567891011121314152 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**Tab 1** 1&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 2** 2&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 3** 3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; Label 标签 default primary success info warning danger mark 123456&#123;% label default @default %&#125;&#123;% label primary @primary %&#125;&#123;% label success @success %&#125;&#123;% label info @info %&#125;&#123;% label warning @warning %&#125;&#123;% label danger @danger %&#125; &lt;mark&gt;mark&lt;/mark&gt; Button 按钮 text 1&#123;% btn #, text %&#125; Video 视频 12获取Youtube外链，粘贴即可&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wIHj9bxf5BI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt; PDF 电子书 1&#123;% pdf https://www.cs.cmu.edu/afs/cs.cmu.edu/user/gchen/www/download/java/LearnJava.pdf %&#125; superscript 上标 X2 subscript 下标 X2 Blockquotes 文字引用 Hello blockquotes 1&gt; Hellow Blockquotes Blockquotes with Multiple Paragraphs Line one Line Two Line Three 123&gt; Line one&gt; Line Two&gt; Line Three Nested Blockquotes Line One Nested Line 12&gt; Line One&gt;&gt; Nested Line Blockquotes with other elements The quarterly results look great! lone one line two 12345&gt; ###### The quarterly results look great!&gt;&gt; - lone one&gt; - line two&gt; Ordered Lists 有序列表 a b c 1231. a2. b3. c Nested Ordered Lists a a.a a.b b 12341. a 1. a.a 2. a.b2. b Unordered Lists 无序列表 a a.a a.b b 1234- a - a.a - a.b- b Paragraph in Lists a hello world b 123- a hello world- b Blockquotes in Lists a hello world b TODO LIST 任务列表 markdown [x] finished [ ] unfinished 12- [x] finished- [ ] unfinished hexo 已完成 未完成 1234&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt; Code Blocks 代码块 12345&lt;html&gt;&lt;head&gt;&lt;title&gt; Test &lt;/title&gt;&lt;/head&gt;&lt;/html&gt; Code 代码 Code 1`Code` Images 图片 123![star](https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656)&lt;img style="width: 40%; margin: auto" src="https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656 "&gt;&lt;/img&gt; Escaping Character 转义 * Hello world 1\* Hello world Tables 表格 Syntax Description Header Title Paragraph Text 1234|Syntax|Description||-|-||Header|Title||Paragraph|Text| Table Alignment 表格对齐 Column A Column B Column C A1 B1 C1 A2 B2 C2 A3 B3 C3 12345|Column A | Column B | Column C||:-|-:|:-:|| A1 | B1 | C1|| A2 | B2 | C2|| A3 | B3 | C3| Horizontal Lines 水平线 1--- Links 链接 http://www.baidu.com Website 1[Website](https://www.google.com) Cancel Link 取消链接 http://www.baidu.com 1`http://www.baidu.com` Footnotes 脚注 simple footnote, [1] 12simple footnote, [^1][^1]: This is the first footnote. This is the first footnote. ↩︎]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Personal Development for Programmers]]></title>
    <url>%2Fcoderpath.html</url>
    <content type="text"><![CDATA[Programming Language: Java, Javascript Computer Network: HTTP, Security Web Framework: Web Development Design Pattern: From code to architecture Data Structures and Algorithms: efficient implementation Industry Project: practical experience]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Definition</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Top CS University Courses]]></title>
    <url>%2Fcourse-recommendation.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>CMU CS Courses</tag>
      </tags>
  </entry>
</search>
