<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Express Tutorial]]></title>
    <url>%2FexpressTutorial.html</url>
    <content type="text"><![CDATA[query vs params vs body req.query // search?q=tobi+ferret req.params // /companies/:id req.body // json file express]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node.js Tutorial]]></title>
    <url>%2Fnodetutorial.html</url>
    <content type="text"><![CDATA[Deploy to server helmet compression 12345678// prod.jsconst helmet = require('helmet');const compression = require('compression');module.exports = app =&gt; &#123; app.use(helmet()); app.use(compression());&#125; Configure package.json 12// index.jsrequire('prod.js')(app); 12345// package.json "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "start": "node app.js" &#125;, 安装pm2, 本机多发package manager 12sudo npm i -g pm2pm2 completion install pm2]]></content>
  </entry>
  <entry>
    <title><![CDATA[Install aria2c on Mac]]></title>
    <url>%2Faria2c.html</url>
    <content type="text"><![CDATA[Mac Install Aria2c github -repo: .aria2]]></content>
      <categories>
        <category>Download Tools</category>
      </categories>
      <tags>
        <tag>Aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWS Commands]]></title>
    <url>%2Faws-command.html</url>
    <content type="text"><![CDATA[ec2通过密码ssh 123sudo nano /etc/ssh/sshd_configs # PasswordAuthentication yessudo passwd ubuntusudo service sshd restart ec2设置ubuntu密码 1sudo password ubuntu]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Zsh on Ubuntu 18.04]]></title>
    <url>%2Fubuntuinstallzsh.html</url>
    <content type="text"><![CDATA[Ubuntu Install Zsh &amp; Oh My Zsh &amp; Plugins 12345678910sudo apt install -y zshsh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" # need password.# install pluginsgit clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlightingnano ~/.zshrcplugins=(git zsh-autosuggestions zsh-syntax-highlighting) # ~/.zshrc# theme 'amuse'source ~/.zshrc]]></content>
      <categories>
        <category>Installation</category>
      </categories>
      <tags>
        <tag>Ubuntu 18.04</tag>
        <tag>ZSH</tag>
        <tag>Oh My Zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Node/Postgres on Ubuntu 18.04]]></title>
    <url>%2Finstallnodepostgreonubuntu.html</url>
    <content type="text"><![CDATA[Install Node.js + Yarn in Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y nodejs npm &amp;&amp; nodejs -v &amp;&amp; npm -v Install Yarn in Ubuntu 18 123curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - &amp;&amp; \echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list &amp;&amp; \sudo apt-get update &amp;&amp; sudo apt-get install -y --no-install-recommends yarn Install Git in Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y git &amp;&amp; git --version Github Generate SSH key 1ssh-keygen -t rsa -b 4096 -C "sx.ba2017@gmail.com" &amp;&amp; cat ~/.ssh/id_rsa.pub Enter/Quit node 12node.exit Install postgresql on Ubuntu 18 1sudo apt update &amp;&amp; sudo apt install -y postgresql postgresql-contrib Connect/Quit to RDS PostGres 1234alias aapi='ssh -i "tcp-admin-stats-api.pem" ubuntu@ec2-52-64-238-208.ap-southeast-2.compute.amazonaws.com'alias cdb='psql postgres://postgres:holiness-oversize-revile@aahagt7pql2i3f.cxizqzlaqvcg.ap-southeast-2.rds.amazonaws.com:5432/ebdb'cdb\q]]></content>
      <categories>
        <category>Installation</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
        <tag>Node.js</tag>
        <tag>Ubuntu 18.04</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Restful协议规范]]></title>
    <url>%2FrestfulProtocol.html</url>
    <content type="text"><![CDATA[RESTful api 设计规范]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Protocol</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript Notes]]></title>
    <url>%2FjavscriptTutorial.html</url>
    <content type="text"><![CDATA[Javascript遍历方式比较 javascript遍历; 1234var arr = [&#123;name:'bb'&#125;,5,'test']for (item of arr) &#123; console.log(item)&#125; Javascript写入文本文件 javascript写入文本文件 12345678910111213141516// writefile.jsconst fs = require('fs');let lyrics = 'But still I\'m having memories of high speeds when the cops crashed\n' + 'As I laugh, pushin the gas while my Glocks blast\n' + 'We was young and we was dumb but we had heart';// write to a new file named 2pac.txtfs.writeFile('2pac.txt', lyrics, (err) =&gt; &#123; // throws an error, you could also catch it here if (err) throw err; // success case, the file was saved console.log('Lyric saved!');&#125;); Javascript单复数转化 单复数转化; Javascript判断数据类型 js判断数据类型 1console.log(typeof variable); Javascript读取json文件 1234const fs = require('fs')const dict = fs.readFileSync('utils/swagger/dict.json')dictObj = JSON.parse(dict);console.log(dictObj['timestamp without time zone']);]]></content>
      <categories>
        <category>Programming Lanugage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR Information]]></title>
    <url>%2Fssrinfo.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Info</category>
      </categories>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vscode Tutorial]]></title>
    <url>%2FvscodeTutorial.html</url>
    <content type="text"><![CDATA[vscode多光标编辑 手动: Option + left click 尾部: 选中 + shift + option + i 同词: command + shift + l 设置 Remote Browser 12345678"remoteBrowser.connectionOptions": &#123; "host": "host", // MANDATORY "username": "ubuntu", // MANDATORY "privateKey": "/Users/xiangt/tcp-admin-stats-api.pem", // Path to private key on local machine "localHostname": "localhost", "localUsername": "xiangt", // Identify as myuser@myhost "defaultPath": "/home/ubuntu/tcp-stats-api" // Default directory to start in on connect (Absolute path)&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Postgres Tutorial]]></title>
    <url>%2FpostgresTutorial.html</url>
    <content type="text"><![CDATA[postgres 列出表名 1234SELECT *FROM information_schema.columnsWHERE table_schema = 'your_schema' AND table_name = 'your_table' postgre教程 postgres postgre结果为obejct的原因 返回对象为obejct 在express中，如果use express.json()中间件，则会自动将object转化成为string 解决：JSON.parse()]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由匹配]]></title>
    <url>%2Froutermatch.html</url>
    <content type="text"><![CDATA[规律：从长倒短，从定到变（waterfall） 123router.get('/projects/count',db.xxx1);router.get('/projects/count',db.xxx2);router.get('/projects/:id/count',db.xxx3);]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Router</tag>
        <tag>Path Match</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node-postgres Tutorial]]></title>
    <url>%2Fpg.html</url>
    <content type="text"><![CDATA[Connection Pool 123456789101112const &#123; Pool &#125; = require('pg');const pool = new Pool(&#123; user: process.env.POSTGRES_USERNAME, host: process.env.POSTGRES_HOST, database: process.env.POSTGRES_DATABASE, password: process.env.POSTGRES_PASSWORD, port: process.env.POSTGRES_PORT, max: process.env.POSTGRES_MAX_CONNECTION&#125;);module.exports = &#123; pool&#125;; Pool Usage 1234567891011 const &#123; pool &#125; = require('../utils/db');const sql = 'select * from users';pool.query(sql).then((result) =&gt; &#123; res.status(200).send(result.rows);&#125;).catch((err) =&gt; &#123; console.log(err.stack); res.status(400).json(err);&#125;); References: node-postgres]]></content>
      <categories>
        <category>DB Client</category>
      </categories>
      <tags>
        <tag>Postgre</tag>
        <tag>Node</tag>
        <tag>Restful API</tag>
        <tag>DB Client</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Integrate Express with Swagger]]></title>
    <url>%2FswaggerTutorial.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
        <tag>API docs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Shortcuts]]></title>
    <url>%2Fmymacshortcut.html</url>
    <content type="text"><![CDATA[Mac Open Finder in terminal 1open . Alfred: Double Command Alfred file search: Space + Search Content Alfred file preview: shift Alfred Search Chrome Bookmark: b + Search Content Alfred 查单词 define opera Alfred 模糊单词拼写查询：spell dialect Alfred 查看剪切板：clip Alfred 清空剪切板：clean Alfred google翻译： translate sth Alfred google搜索： ggl sth Alfred map搜索: maps sth Alfred gmail搜索： gmail sth Alfred 添加文件进缓存：Option + Up Alfred 添加文件进缓存，然后光标下移： Option + Down Alfred 删除缓存最后一个文件： Option + Left Alfred 缓存文件action: Option + Right Alfred Home Folder: ` 调出Preferences: Command + &lt; 切换APP：Command + Tab 全屏: Control-Command-F 修改后：Control+ Space [基于BetterTouchTool] 切换桌面: Control + Left (Right){F5/F6} Launchpad: Command + Up Launchpad切换页面： Command + Left(Right) Lanuchpad 删除app：长按Option Spotlight: Control + Space Chrome 前进、后退: Command + Left(Right) 黑白模式切换：Control + Command 打开新标签 Command + T 切换输入法: Command + Space 打开欧陆词典: Option + Up 1password7: Command + \ 显示隐藏文件夹:Shift + Command + . 调整菜单栏图标顺序：Command + drag vscode 自动换行: option + z 三个键盘流神器： BetterTouchTool： 定制任意快捷键 Alfred3：一个搜索框打开一切，不再需要dock Context： 强化版的程序切换]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install PostGres in Mac]]></title>
    <url>%2Fpostgreinstallonmac.html</url>
    <content type="text"><![CDATA[Installation 123brew updatebrew doctorbrew install postgresql Initialize DB 1initdb /usr/local/var/postgres Start Service 1pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start Configure Service on Boot 123ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist Create Default Database 1createdb # create database postgres(default name). CLI 1234567891011121314151617181920psql# user：当前mac用户# database：用户同名数据库# 主机：localhost# 端口号：5432，postgresql的默认端口是5432psql -U [user] -d [database] -h [host] -p [post]# \password：设置当前登录用户的密码# \h：查看SQL命令的解释，比如\h select。# \?：查看psql命令列表。# \l：列出所有数据库。# \c [database_name]：连接其他数据库。# \d：列出当前数据库的所有表格。# \d [table_name]：列出某一张表格的结构。# \du：列出所有用户。# \e：打开文本编辑器。# \conninfo：列出当前数据库和连接的信息。# \password [user]: 修改用户密码# \q：退出 Configure User 12345CREATE USER username WITH PASSWORD 'password';DROP DATABASE postgres;CREATE DATABASE user_database OWNER username;GRANT ALL PRIVILEGES ON DATABASE user_database to username;ALTER ROLE username CREATEDB; Mac安装PostgreSQL]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu Commands All in One]]></title>
    <url>%2Flinuxcommands.html</url>
    <content type="text"><![CDATA[File Permission r: Read w: Write x: eXecute Binary Octal Permission 000 0 — 001 1 –x 010 2 -w- 011 3 -wx 100 4 r– 101 5 r-x 110 6 rw- 111 7 rwx mkdir used to create directroy mkdir [options] [params] Options: -m: --mode set the permission while creating -p: --parents automatically create parents directories –version: display the version info Params: directory names, separated by space Example: 1234567# create test folder with 700 permissionmkdir -m 700 /usr/meng/test# create os_1 folder with 700 permission, automatically create parents folders.mkdir -p-m 750 bin/os_1mkdir -p /data/db id display the user id and the group id id [-gGnru][--help][--version][username] Options -u: display current user id -n: display current user name (used with -u) Examples 12id -u # Result: 501id -un # Result: xiangt chown modify the owner of files or directories\ must using root Options: -R: recursive all files Examples 12# set current user as the ownersudo chown -R `id -un` /data/db chmod modify the read, write and execute permission of files or directories. 属主权限 属组权限 其它用户权限 Octal number Symbolic Permission 0 --- none 1 --x execute 2 -w- write 3 -wx write/execute 4 r-- read 5 r-x read/execute 6 rw- read/write 7 rwx read/write/execute Linux Shell 换行 1\ 给shell命令设置alias 1alias ll='ls ~' Some Alias 123alias tq="cd ~/tcp-stats-api &amp;&amp; node /home/ubuntu/tcp-stats-api/utils/temp/index.js"alias capi='ssh -i "~/tcp-admin-stats-api.pem" ubuntu@ec2-52-64-238-208.ap-southeast-2.compute.amazonaws.com'alias cdb='psql postgeslink....' Ubuntu获取当前用户名 1echo "$USER" Falling back to a fallback locale (&quot;C.UTF-8&quot;) 1sudo update-locale LC_ALL="en_US.UTF-8"]]></content>
  </entry>
  <entry>
    <title><![CDATA[Using Node.js require vs. ES6 import/export]]></title>
    <url>%2Frequirevsimport.html</url>
    <content type="text"><![CDATA[Are there any performance benefits to using one over the other? The current answer is no, because none of the current browser engines implements import/export from the ES6 standard.]]></content>
  </entry>
  <entry>
    <title><![CDATA[弟子规讲课稿讨论]]></title>
    <url>%2Fdizigui.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>传统文化</category>
      </categories>
      <tags>
        <tag>弟子规</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Push 免输账户密码]]></title>
    <url>%2Fgit-credential.html</url>
    <content type="text"><![CDATA[123456git config --global credential.helper storegit push# type your username and password# Next time you don't have to type]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 构建RESTful API]]></title>
    <url>%2Fnodeapi.html</url>
    <content type="text"><![CDATA[Introduction Install Node.js Run Node.js Node Module System NPM Introduction What is Node.js? Running Environemnt for Javascript outside browsers, often used for create backend services - API. Node is ideal for building highly-scalable, data-insentive and real-time apps. Easy to develop Can be used for prototyping and agile development Can be used in industry for large projects like Uber, Paypal, Netflix and Walmart. Friendly for javascript programmers Big community to support, libs I have alreay install node yarn Where is Node from? extract the javascript engine from Chrome called v8 integrate the v8 with additional modules Asynchronous in Node.js Synchronous by default in ASP.net Asynchronous by default in nodejs 异步机制：使用Event Queue,频繁检查，执行任务 What is Node.js used for? Node is ideal for I/O Intensive Applications. Node is not ideal for CPU Intensive Applications like video encoding and image processing applications. Install Node.js 1234# 也可以下载mac安装包brew install node# 查看版本node --version Run Node.js 1234567cd workspacemkdir newAppcd newAppcode . # use VS code# create js file and runnode app.js # for example Code Example 12345678hello = () =&gt; &#123; console.log('hello world')&#125;hello(); // vscode execute through node automaticallyconsole.log(window) // error// no window in node, that's for browser. Javascript Module Global object object that we can access everywhere, there is an object called global. 1234567global.console.log(1);global.setTimeout();global.clearTimeout();global.setInterval();global.clearInterval(); But in browser, the global obejct is the window object. 1234567window.console.log(1);window.setTimeout();window.clearTimeout();window.setInterval();window.clearInterval(); And we can just simplify it in whichever env. 1234567console.log(1);setTimeout();clearTimeout();setInterval();clearInterval(); But if you design your own obejct, it doesn’t belongs to global obejct. node different global and local 12var message = "hello";console.log(global.message);// undefinded error However it belongs to window if you use the browser rather than node. window literally eat all food all things belong to window. 12var message = 'hello';console.log(window.message); Insights: Why we need to use Module? Node is better. Browser is worse. Two js run in browser, with two variables or methods of the same name, the later one will override the previous one. Therefore, we use module to localize variables to avoid collapse. 在浏览器中，所有变量和方法都属于window 在Node中，如非特别定义，所有变量和方法都属于自己所在的文件，而不属于global Module Import and Export Module like private in Java Export module.exports.log = log 1234567891011121314151617// ./logger.jsvar url = "http://www.example.com/login";log = (m) =&gt; &#123; console.log(m)&#125;// export the log function as log.module.exports.log = log;// export single function module.exports = log;// Ormoduel.exports = &#123; log: log, url: url&#125; Import const {log, url} = require('./logger') 123456789101112// Way Oneconst logger = require('./logger') // const is better// execute the log methodlogger.log();// Way Two - better, more lightweightconst &#123;log, url&#125; = require('./logger')// If it is a single function// module.exports = log;const log = require('./logger');log("hello") './logger' vs 'logger' './logger': Current Ddirectory 'logger': Built in Current Directory in node_modules Node Wrapper 12345678(function (exports, require, module, __filename, __dirname) &#123; // file code console.log(exports); console.log(require); console.log(module); console.log(__filename); console.log(__dirname);&#125; Node Modules API Docs File System HTTP 12345678910const http = require('http');const server = http.createServer();// action after connection eventserver.on('connection',(s =&gt; console.log("new connection."))); // very low level// port 3003server.listen(3003);console.log('Listening on port 3000...'); 12345678910111213141516171819202122const http = require('http');const server = http.createServer( (req,res) =&gt; &#123; if (req.url === '/')&#123; res.write("hello world"); res.end(); &#125; if (req.url === '/api') &#123; res.write(JSON.stringify(&#123; "1":2 &#125;)); res.end(); &#125; &#125;);// port 3003server.listen(3003);console.log('Listening on port 3003...'); OS Path Process Query Strings Stream NPM Create NPM Project Switch Version of npm 1sudo npm i -g npm@5.5.1 Create package.json file 123npm init# default settingsnpm init --yes Install Node Package package is installed in node_modules 1234npm install underscore# shorternpm i underscore# you don't have to add --save anyore A better way yarn 12yarn add underscoreyarn remove underscore install all package in package.json 123yarn# ornpm i Git Ignore Packages to Push 123456789git inittouch .gitignore## inside .gitignorenode_modules/git add .git commit -m "..."git push Underscore.js 12var _ = require('underscore');console.log(_.contains([1,2,3],2)) Semantic Versioning 4.13.6 (Patch) 6: bugs fixing version (Minor) 13: new features version without breaking exsiting API (Main) 4: new features version with breaking existing application exact version : 4.13.6 stable Major and Minor: ~4.13.6 stable Major: ^4.13.6 Inspect installed versions 12345yarn listyarn list --depth=0# 效果是不一样的npm listnpm list --depth=0 View Packages 12npm view mongoosenpm view mongoose dependencies Update outdated packages 123456789npm outdated# this will only update minor and patch updatenpm update# update for major updatesudo npm i -g npm-check-updatesncu -u # to upgrade the json fileyarn # execute the update Install Packages only for Dev 1npm i jshint --save-dev Uninstall Packages 123npm un mongoose# oryarn remove mongoose Global Packages Global: can be used under any folders Local: can only be used withon on folder 12345678# update the npm to the latest versionsudo npm i -g npm# to see all outdated global packagesnpm -g outdated# uninstall global packagesnpm un -g npm NPM Registry Publish Your Own Package to NPM Registry 12345# prepare the projectmkdir lion-libcd lion-lib/npm init --yestouch index.js 12// index.jsmodule.exports.url = "asdadsad" 12345678# register for registrynpm adduser# loginnpm login# make sure your package name is unique in the pacakge.json file and the push to the registrynpm publish Updating your Published Packages 1234567# first you have to update the versio numbernpm version majornpm version minornpn version patch# then publish to the registrynpm publish RESTful Service REST Definition REST: Representational State Transfer It’s a convention for building these HTTP serivces. HTTP Protocol Http://vidly.com/api/customers/1 Http: Protocol vidly.com: Domain api: Path customers: Resource 1: Resource Unique Identifier HTTP Methods GET: retrive resources POST: upload resources PUT: update global resources PATCH: update local resources DELETE: delete resources 12345GET /api/customersGET /api/customers/1PUT /api/customers/1DELETE /api/customers/1POST /api/customers Node Monitor Reload the Node Automatically when changes apply. 12345sudo npm i -g nodemon# instead of node app.jsnodemon app.js# listen to customized file types.nodemon -e .yml,.js app.js 在配置vscode code runner为nodemon之后，nodemon失效 shell中nodemon app.js, nodemon不会失效. 推荐使用shell的方式 Express Basics Get to know express 1234# inspect it in shellnpm view express# get the official website# http://expressjs.com/ Install Express 1yarn add express Hello World 123456789101112// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.get('/',(req, res) =&gt; &#123; res.send("Hello World")&#125;);// start listenapp.listen(port); Basic Routes 1app.METHOD(URL,CALLBACK_FUNC) Req Method Method Description req.get() 获取header中某属性的值 req.is() 判别Content-Type Req Properties Property Description req.body 键值对数据 req.cookies 获取cookies req.hostname 获取域名 req.ip 获取ip req.method 获取方法 req.originalUrl 完整url req.baseUrl 路由插入的路径 req.path 细节路径 req.params 存储参数化数据 req.protocol http/https req.query 获取url中?间所夹参数 Res Method Method Description res.download() 提示将要下载文件。 res.end() 结束响应进程。 res.json() 发送 JSON 响应。 res.jsonp() 在 JSONP 的支持下发送 JSON 响应。 res.redirect() 重定向请求。 res.render() 呈现视图模板。 res.send() 发送各种类型的响应。 res.sendFile 以八位元流形式发送文件。 res.sendStatus() 设置响应状态码并以响应主体形式发送其字符串表示。 Middleware Routes 统一请求中间件：适合做User Authentication 12345678910111213141516// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.all('/', (req,res,next) =&gt; &#123; console.log('authentication'); next();&#125;);app.get('/',(req, res) =&gt; &#123; res.send("How are you?")&#125;);// start listenapp.listen(port); 单一路径多个回调 1234567891011121314// configure expressvar express = require('express');var app = express();var port = process.env.PORT || 3000;// routesapp.route("/").get((req,res)=&gt; &#123; res.send("get test");&#125;).post((req,res)=&gt; &#123; res.send("post test");&#125;)// listenapp.listen(port); express.Router Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”. Router Method Method Description router.all() 匹配所有http请求，无中间件 router.get() 匹配GET请求 router.param() 匹配特定参数 router.route() 单一路径匹配多个回调 router.use() 匹配所有http请求, 添加中间件 12345678910111213141516171819202122232425262728293031// bird.js// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router(); var port = process.env.PORT || 3000;// middlewarerouter.use((req,res,next) =&gt; &#123; console.log("authentication"); next();&#125;)router.get("/",(req,res) =&gt; &#123; res.send("main page.")&#125;)router.post("/",(req,res) =&gt; &#123; res.send("main post.")&#125;)router.get("/about", (req,res)=&gt;&#123; res.send("about page.")&#125;)// mount the middleware(router);app.use('/',router);// start listenapp.listen(port);module.exports.router = router; route.use’s callback is a middleware 12345// main.jsvar &#123;router&#125; = require('./birds');// birds is also a middlewareapp.use('/birds', birds);app.listen(3000); Parameter Route 123456789101112131415161718192021222324252627282930313233// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);//实际上 ： 充当了一个通配作用，通配规则如何，请看验证参数router.get('/:id', (req, res) =&gt; &#123; res.send('id namespace.');&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Parameter Check 有時候我們會需要針對傳入的路由參數來進行篩選或驗證，例如檢查使用者所輸入的字串是否是合法的名稱，這時候就可以使用 .param() 這個專門用來處理參數的 middleware： 12345678910111213141516171819202122232425262728293031323334353637383940414243// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);// 位于路由之前，充当另外一个middlewarerouter.param('id', (req, res, next, id) =&gt; &#123; // validation logi here console.log('valid id'); // send back request req.id = id; next();&#125;);router.get('/:id/:name', (req, res) =&gt; &#123; res.send(req.params); // res.send(req.params.name);&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Query String Parameters 1234567891011121314151617181920var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/:id", (req,res) =&gt; &#123; // 对应？后面的query参数 // 例如: localhost:3000/courses/1?sortBy=name, query中包含sortBy的key-value pair res.send(req.query);&#125;);app.use("/courses",router);app.listen(port); HTTP Get Request 1234567891011121314151617181920212223242526272829303132333435363738// http get request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);app.use("/courses",router);app.listen(port); HTTP Post Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// http post request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);// use the json middleware.app.use(express.json());app.use("/courses",router);app.listen(port); Simple Input Validation 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - simple version if (! req.body.name || req.body.name.length &lt; 3)&#123; res.status(400).send("Name is required and should be minimum 3 characters."); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); Complex Input Validation yarn add joi 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var express = require("express");// import joiconst Joi = require('joi')var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - joi version const schema = &#123; name: Joi.string().min(3).required(), &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); req.body vs req.params req.body里装的是post的data req.params里装的是url中的某个值 HTTP Update Request 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); HTTP Delete Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);router.delete("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) &#123; res.status(404).send("Course doesn't exsit."); return; &#125; // this happens in place courses.splice(courses.indexOf(course),1); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); Code One Genre: Vidly 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192var express = require("express");// for json validationvar Joi = require("joi");var app = express();var port = process.env.PORT || 3000;var router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre); console.log(genres);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)// for parsing json objectapp.use(express.json());app.use("/api/genres",router);app.listen(port); Advanced Express Middleware Middleware: modular and mountable component Custom Middleware function 12345// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;) Build-in Middlware the url encoded middleware 1app.use(express.urlencoded(&#123;extended: true&#125;)) the static resouces hosting middleware 123// static files hosted in "./public" folder// access by localhost:3000/filename.app.use(express.static("public")); Third Party Middleware Resources the performance matters. helmet - https 1npm i helmet The helmet test failed. 12const helmet = require('helmet')app.use(helmet()) // as early as possible. morgan - console logger 1npm i morgan 12const morgan = require('morgan');app.use(morgan(tiny)); Environment Development Production Testing Get the ENV variable in Javascript First method 1process.env.NODE_ENV; // might be undefined. Second method 1app.get("env") // if undefined will return default value: development. Use Morgan only in Development ENV 123456// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Set the Environment Variable in shell 1export NODE_ENV=production Use Config Management Package 1npm install config write the config file 1234567// development&#123; "name" : "My Express App - Development", "mail": &#123; "host": "dev-mail-server" &#125;&#125; 通过export NODE_ENV可以自动载入相应配置 12345678910111213const config = require("config");// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Debugging 不必每次都删除consol.log() 设置环境变量，控制debug启动或者关闭 设置显示信息的内容，程度 Install the Debug Package 1npm i debug Use debugger in code 123456const startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");// console.log("Morgan Loaded in Development Stage")startupDebugger("Morgan Loaded in Development Stage");dbDebugger("Database debugger started.") Set the Env and Start Project 12345678910# set the debugger to app: startupexport DEBUG=app:startup # enable startup debuggingexport DEBUG=app:db # enable database debuggingexport DEBUG= # disable debugging.export DEBUG=app:startup,app:db # enable two debuggingexport DEBUG=APP:* # enable all debuggingnodemon app.js# shortcut to set debug and lanuch the applicationDEBUG=app:db nodemon app.js Template Engine used to return html Pug Mustache EJS Install pug 1npm i pug Set the views file. Use views in code 12345678910app.get("/", (req,res) =&gt; &#123; // view file name + variables res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);app.set('view engine', 'pug');app.set('views','./views'); Database Integration Code One Genre: Refractured FolderDescriptionconfigstore configurationmiddlewarestore all middlewarespublicstore static filesroutersstore all routersviewsstore template pug files 12345678910111213// routers/home.jsconst express = require("express");const router = express.Router();router.get("/", (req,res) =&gt; &#123; res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);module.exports = router; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192// routers/genres.jsconst express = require("express");const Joi = require("joi");const router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;)// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)module.exports = router; 123456789101112131415161718192021222324252627282930313233343536373839// app.jsconst startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");const config = require("config");const morgan = require("morgan");const express = require("express");const home = require("./routes/home");const genres = require("./routes/genres")const app = express();const port = process.env.PORT || 3000;// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); startupDebugger("Morgan Loaded in Development Stage")&#125;// database work ...dbDebugger("database debugger")app.set('view engine', 'pug');app.set('views','./views');app.use(express.static("public"));app.use(express.urlencoded(&#123;extended: true&#125;))app.use(express.json());app.use("/",home);app.use("/api/genres",genres);app.listen(port); MongoDB Configuration Install MongoDB 1brew install mongodb Create Data Directory Modify mongod.conf to set the database path. 12sudo mkdir -p /data/dbsudo chown -R `id -un` /data/db Run MongoDB in Shell 12mongod # ormongod --config /usr/local/etc/mongod.conf the port is 27017 Run MongoDB by brew 12brew services start mongodbbrew services stop mongodb MongoDB GUI Client Robot 3T [Simple][Free] dbKoda [import &amp; output &amp; charts] Studo 3T [Support SQL][Expensive] Node to MongoDB Connect simple api: mongoose. Install Mongoose 1npm i mongoose Connect to Mongodb mongoose will create database for you automatically once you create a new record in it. 12345678910const mongoose = require('mongoose');// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123;useNewUrlParser: true&#125;) // MongoDB will create the playground automatically .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err)); Define Collections and Validations 123456789101112// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema); CRUD Create Documents Mongo Conceptcollection: similar to one table in the relational databasedocument: similar to one row in the relational databaseMongoose Conceptschema: define the shape of documentsmodel: correspont to class in javascript, referring to collection, defined and created using the schema. Mongoose Data Types String Number(包含小数) Date Boolean Array Map Mixed ObjectId Decimal128 Buffer 12345678910111213141516171819// CREATE operationconst data = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true&#125;;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;createSingleCourse(data); Query Documents Compare Operator$eq: equal$ne: not equal$gt: greater than$gte: greater than or equal to$lt: less than$lte: less than or equal to$in: in$nin: not inLogical Opeartoror: orand :and 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;getAllCourses();// READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourse();// READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourseCompare();// READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareOr();// READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareRegular();// READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;getCourseCompareCount();// READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;getCourseComparePagination(); Update Documents When you need check the existence of document at first 12345678910111213// UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;findThenUpdateCourse("5c919cb9310fd622b1db90bd"); When you confirm the existence of document Update Operator 123456789101112// UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourse("5c919cb9310fd622b1db90bd"); When you want to get the old documents as results. 12345678910// UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourseWithOldRecords("5c919cb9310fd622b1db90bd"); When you want to get the updated documents as results. 12345678910// UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd"); Remove Documents 123456789async function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;removeCourse("5c919cb9310fd622b1db90bd"); Code Two Course: CRUD 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207const mongoose = require('mongoose');mongoose.set('useCreateIndex',true);// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123; useNewUrlParser: true &#125;) .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err));// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema);// CRUD is based on model.// 1. CREATE operationconst data1 = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'database', 'backend' ], // use default value for date isPublished: true, price: 10.2&#125;;const data2 = &#123; name: 'Node Js Course', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true, price: 30&#125;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;// createSingleCourse(data1);// createSingleCourse(data2);// 2.1 READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;// getAllCourses();// 2.2 READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourse();// 2.3 READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourseCompare();// 2.4 READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareOr();// 2.5 READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareRegular();// 2.6 READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;// getCourseCompareCount();// 2.6 READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;// getCourseComparePagination();// 3.1 UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;// findThenUpdateCourse("5c919cb9310fd622b1db90bd");// 3.2 UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourse("5c919cb9310fd622b1db90bd");// 3.3 UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourseWithOldRecords("5c919cb9310fd622b1db90bd");// 3.4 UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;// updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd");// 4 REMOVE Operation - update with new as resultasync function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;// removeCourse("5c919cb9310fd622b1db90bd"); Data Validation Validation Happens in Mongoose Level, not in Database Level. Three Levels of Validation:Router Level: JoiMongoose Level: Built-in ValidationDatabase Level: MySQL … 12345678910// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;); Error handling 12345678910111213async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); try &#123; // return a promise const result = await course.save(); &#125;catch(err) &#123; console.log(err.message); &#125;&#125;createSingleCourse(data1);createSingleCourse(data2); Built-in Validation Price is only required when it is published 1234567891011121314151617181920212223242526const courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: [String], date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Custom Validation 123456789101112131415161718192021222324252627282930313233343536// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; validator: function(v) &#123; return v &amp;&amp; v.length &gt; 0; &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Async Validation What if you need to call another api during the validation? The Answer is the callback function 12345678910111213141516171819202122232425262728293031323334353637383940// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; isAsync: true, validator: function(v, callback) &#123; setTimeout(() =&gt; &#123; const result = v &amp;&amp; v.length &gt; 0; callback(result); &#125;, 2000); &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Some Notes err.stack err.stack: the trace of error 1console.log(err.stack);]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Restful API</tag>
        <tag>Frontend</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端工程师技术图谱]]></title>
    <url>%2Fbackendallinone.html</url>
    <content type="text"><![CDATA[数据结构 常用算法 并发 操作系统 设计模式 运维 &amp; 统计 &amp; 技术支持 中间件 网络 数据库 搜索引擎 … 数据结构 队列 集合 链表、数组 字典、关联数组 栈 树 二叉树 完全二叉树 平衡二叉树 二叉查找树（BST） 红黑树 B-，B+，B*树 LSM 树 BitSet 常用算法 排序、查找算法 选择排序 冒泡排序 插入排序 快速排序 归并排序 希尔排序 堆排序 计数排序 桶排序 基数排序 二分查找 Java 中的排序工具 布隆过滤器 字符串比较 KPM 算法 深度优先、广度优先 贪心算法 回溯算法 剪枝算法 动态规划 朴素贝叶斯 推荐算法 最小生成树算法 最短路径算法 并发 多线程 线程安全 一致性、事务 事务 ACID 特性 事务的隔离级别 锁 Java中的锁和同步类 公平锁 &amp; 非公平锁 悲观锁 &amp; 乐观锁 &amp; CAS ABA 问题 CopyOnWrite容器 RingBuffer 可重入锁 &amp; 不可重入锁 互斥锁 &amp; 共享锁 死锁 操作系统 计算机原理 进程 线程 协程 Linux 设计模式 设计模式的六大原则 23种常见设计模式 应用场景 单例模式 责任链模式 MVC IOC AOP UML 微服务思想 康威定律 运维 &amp; 统计 &amp; 技术支持 常规监控 APM 统计分析 持续集成(CI/CD) Jenkins 环境分离 自动化运维 Ansible puppet chef 测试 TDD 理论 单元测试 压力测试 全链路压测 A/B Test 虚拟化 KVM Xen OpenVZ 容器技术 Docker 云技术 OpenStack DevOps 文档管理 中间件 Web Server Nginx OpenResty Apache Httpd Tomcat 架构原理 调优方案 Jetty 缓存 本地缓存 客户端缓存 Memcached Redis 架构 回收策略 Tair 消息队列 消息总线 消息的顺序 RabbitMQ RocketMQ ActiveMQ Kafka Redis 消息推送 ZeroMQ 定时调度 单机定时调度 分布式定时调度 RPC Dubbo Thrift gRPC 数据库中间件 Sharding Jdbc 日志系统 日志搜集 配置中心 API 网关 网络 协议 OSI 七层协议 TCP/IP HTTP HTTP2.0 HTTPS 网络模型 Epoll NIO kqueue 连接和短连接 框架 零拷贝（Zero-copy） 序列化(二进制协议) Hessian Protobuf 数据库 基础理论 数据库设计的三大范式 MySQL 原理 InnoDB 优化 索引 聚集索引, 非聚集索引 复合索引 自适应哈希索引(AHI) explain NoSQL MongoDB Hbase 搜索引擎 搜索引擎原理 Lucene Elasticsearch Solr sphinx 性能 性能优化方法论 容量评估 CDN 网络 连接池 性能调优 流式计算 Storm Flink Kafka Stream 应用场景 Hadoop HDFS MapReduce Yarn Spark 安全 web 安全 XSS CSRF SQL 注入 Hash Dos 脚本注入 漏洞扫描工具 验证码 DDoS 防范 用户隐私信息保护 加密解密 对称加密 哈希算法 非对称加密 服务器安全 数据安全 数据备份 网络隔离 内外网分离 登录跳板机 授权 RBAC OAuth2.0 常用开源框架 开源协议 日志框架 Log4j、Log4j2 Logback ORM 网络框架 Web 框架 Spring 家族 工具框架 分布式设计 扩展性设计 稳定性 &amp; 高可用 硬件负载均衡 软件负载均衡 限流 应用层容灾 跨机房容灾 容灾演练流程 平滑启动 数据库扩展 读写分离模式 分片模式 服务治理 服务注册与发现 服务路由控制 分布式一致 CAP 与 BASE 理论 分布式锁 分布式一致性算法 PAXOS Zab Raft Gossip 两阶段提交、多阶段提交 幂等 分布式一致方案 分布式 Leader 节点选举 TCC(Try/Confirm/Cancel) 柔性事务 分布式文件系统 唯一ID 生成 全局唯一ID 一致性Hash算法 设计思想 &amp; 开发模式 DDD(Domain-driven Design - 领域驱动设计) 命令查询职责分离(CQRS) 贫血，充血模型 Actor 模式 响应式编程 DODAF2.0 Serverless 项目管理 架构评审 重构 代码规范 RUP 看板管理 SCRUM 极限编程 敏捷开发 结对编程 通用业务术语 技术趋势 架构师素质 团队管理 招聘 资讯 行业资讯 公众号列表 博客 团队博客 个人博客 综合门户、社区 问答、讨论类社区 行业数据分析 专项网站 其他类 推荐参考书 在线电子书 纸质书 开发方面 架构方面 技术管理方面 基础理论 工具方面 大数据方面 技术资源 开源资源 手册、文档、教程 在线课堂 会议、活动 常用APP 找工作 工具 代码托管 文件服务 综合云服务商]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Programmer</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么在中国，规定白衣不能阅戒?]]></title>
    <url>%2Fjielv.html</url>
    <content type="text"><![CDATA[为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。 为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[佛法在印度的分期弘扬以及三乘教学]]></title>
    <url>%2Ffofafenqi.html</url>
    <content type="text"><![CDATA[一。小乘佛教时期 1. 原始佛教时期 2. 部派佛教时期 二。 大乘佛教时期 三。 密教时期 四。 小乘、大乘、密乘 五。 教外别传 [TOC] 一。小乘佛教时期 佛法在印度传播 重点： 出离红尘，持戒，修四禅八定，寂灭定 见地： 知苦及苦的根源，离情去欲 1. 原始佛教时期 佛初转法轮 - 涅槃，约100年左右 教授重点：小乘佛法 弟子果味：有弟子证得阿罗汉果 2. 部派佛教时期 涅槃后400年 教授重点：小乘教理 弟子果位：已证阿罗汉果的弟子从阿罗汉转向菩萨乘 二。 大乘佛教时期 在印度传播 重点：六度（布施，持戒，忍辱，精进，禅定，般若）；入世行菩萨道，自度度人，圆满功德。 见地：色空不二，心无挂碍。 修证：中观、唯识，证十地菩萨果位 佛涅槃后的第二个500年 教授重点：大乘佛法 弟子果位：有弟子证得菩萨果味 三。 密教时期 印度佛法传播转入密乘 重点：身口意清净，与诸佛相应，得到果位上师和佛菩萨的灌顶。 主张：以欲制欲，以贪治贪，最后实证“这世界一切法与实相不相违背”，即身成佛。 佛涅槃后的第三个500年 教授重点：密法 弟子果位：菩萨乘和金刚乘果味皆有人证得 四。 小乘、大乘、密乘 《法华经》：声闻乘，缘觉乘，菩萨乘 现在：声闻缘觉为小乘，菩萨为大乘，大乘又分显密两宗。两宗在戒律和修证法门上都有很大不同，但是都以大乘见地为指导思想。 三乘：小乘，大乘，密乘 五。 教外别传 小乘，大乘，密乘都是此地修学。称为渐修。 教外别传，以心印心。称为顿悟。 佛嘱托迦叶尊者将以心印心在印度传下去，在二十八祖菩提达摩之时，传至中国，从而形成了禅宗！ 如果我们把成佛比喻成从有生死的此岸到解脱生死的彼岸,那佛法就像一艘从此岸到彼岸的船或航海的灯塔。我们要驾着这艘船，在航灯的照耀下，越过心灵的情天欲海，破除在三界中的种种执着，分别，而后登上成佛的变。那时，此岸彼岸、这艘船以及灯塔对于我们来说也如梦如幻，可以全部放下不要了。此时，我们领悟的就是教外别传的心法。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple Notes]]></title>
    <url>%2Fdailynotes.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>DayNotes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Github上传大文件]]></title>
    <url>%2Fgitlfs.html</url>
    <content type="text"><![CDATA[Install git lfs 12# mac上安装brew install git-lfs Git init 必须在git repo中使用git lfs 123git lfs installgit init# git add -A Track file 在push大文件前，要手动track这些文件 123git lfs track "bigfile.suffix"git lfs track "*.zip"git lfs track "repo/" Commit &amp; Push track之后正常git commit push就可以，会自动上传 12git commit -m "commit comment"git push 后记 期待可以不用track，全自动的git lfs.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git lfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next Generation JavaScript]]></title>
    <url>%2Fes6.html</url>
    <content type="text"><![CDATA[Variables 123var: 可以重复命名，全局作用域let: 可变，块级作用域，不能重复命名const: 不可变 Functions 123function myFunc() &#123;&#125;// ES6const myFunc = (parameters) =&gt; &#123;&#125; Modules 1234567891011121314// ./person.jsexport default person// ./utility.jsexport const clean = () =&gt; &#123;&#125;；export const baseData = 10;// ./app.jsimport person from './person.js'import prs from './person.js'// use &#123;&#125; to specifically import modules from js fileimport &#123;baseData&#125; from './utility.js'import &#123;clean&#125; from './utility.js' Class 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 123456789101112131415161718192021222324252627class Human &#123; constructor()&#123; this.gender = 'male'; &#125; printGender()&#123; console.log(this.gender); &#125;&#125;class Person &#123; constructor()&#123; // must be declared explicitly super(); this.name = 'Max'; this.gender = 'female' &#125; printMyName()&#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); ES6 Syntax 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 子类构造器中必须出现super 因为子类未指定this作用域 12345678910111213141516171819class Human &#123; gender = 'male'; printGender = () =&gt; &#123; console.log(this.gender); &#125;&#125;class Person &#123; name = 'Max'; gender = 'female' printMyName = () =&gt; &#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); Spread &amp; Rest 1234567891011121314151617181920212223242526272829// use ... to unwrap the old arrayconst newArray = [...oldArray,1,2]// use ... to unwrap the old objectconst newObject - &#123;...oldObject, newProp:5&#125;// use ... to wrap variable length of arguments into one arrayfunciton sortArgs(...args)&#123; return args.sort();&#125;// example:// spread function on arrayconst arr1 = [1,2];const arr2 = [...arr1,3];console.log(arr2);// spread function on objectconst obj1 = &#123;name:'James'&#125;;const obj2 = &#123;...obj1, age:28&#125;;console.log(obj2)// rest function in function argsconst filter = (...args) =&gt;&#123; // === check type and value return args.filter(el =&gt; el === 1);&#125;console.log(filter(1,2,3,1)) Destructuring 123456789// array destructuring[a,b] = ['Hello','Max'];console.log(a);console.log(b);// object destructuring&#123;name&#125; = &#123;name:'Max',age:28&#125;;console.log(name);console.log(age); //undefined; Primitive type and Reference type 1234567891011121314151617const person = &#123; name:'James'&#125;;const secondPerson = person; // reference typeconsole.log(secondPerson);const person = &#123; name: 'James'&#125;;const secondPerson = &#123; ...person, age = 29&#125;;console.log(secondPerson); Array Function 无作用域 Cannot be used as the constructor 1234const numbers = [1,2,3];const doubleNumArray = numbers.map(el =&gt; el*2);console.log(doubleNumArray); Promise 先调用后声明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 基本结构new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:'...'. type:'post', success(res)&#123; resolve(res) &#125;, error(err)&#123; reject(err) &#125; &#125; )&#125; ).then((res)=&gt; console.log('success'),(err)=&gt; console.log("error"))// 链式操作var promiseFn1 = new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:"...", type:'post', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; )&#125; &#125;)var promiseFn2 = new Promise((resolve,reject) =&gt; &#123; $.ajax(&#123; url:"...", type:'get', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; &#125;) &#125;)// function -&gt; object orientedpromiseFn1.then(()=&gt; &#123; console.log("promise1 success") return promiseFn2 &#125;).then(()=&gt; console.log('promiseFn2 success!'))]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML页面加载过程]]></title>
    <url>%2Fhtmlloading.html</url>
    <content type="text"><![CDATA[页面加载过程 url解析 -&gt; DNS查询 -&gt; 资源请求 -&gt; 浏览器解析 url结构 协议 + 域名 + 端口 + 路径 + 参数 + 哈希 DNS查询 浏览器 - DNS缓存+DNS服务器 dns-fetch: fetch the ip address for some dns and cache 资源请求 browser -&gt; Request Header + 参数 -&gt; 服务器 服务器 -&gt; status + response header + body -&gt; browser 浏览器解析 DOM + JS(优先) -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>Web Development</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux/Unix下查找大于100mb的文件]]></title>
    <url>%2Ffindbigfilelinux.html</url>
    <content type="text"><![CDATA[查找当前目录下大于100mb的所有文件 1find . -type f -size +100M 显示当前目录大小 1du -sh . 显示当前目录或者文件夹的所占磁盘空间 1du -sh * 显示前十个占用空间最大的目录 1du -s * | sort -nr | head]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习面试攻略(国内)]]></title>
    <url>%2Fmlinterview.html</url>
    <content type="text"><![CDATA[机器学习求职攻略(国内) AI岗位招聘流程 公司与岗位盘点 简历的书写和优化 项目与竞赛 机器学习面试考察点 面试题的真实模样 机器学习求职攻略(国内) 根本原则：投其所好 AI岗位招聘流程 秋招 8月到10月底结束战斗 春招 春节过后 跳槽 春节前后人员流动大，难度系数较低，需要相关背景和项目要求 7月底高校抢人 8月初内推筛选 8月底9月初正式校招 公司与岗位盘点 知名企业 腾讯,阿里，金服，滴滴，网易，百度，头条，美团，陆金所 京东，爱奇艺，宜人贷，360，优酷，土豆，快手，抖音，苏宁易购，小米 岗位职能 平台数据处理类：数据清洗，大样本和高维度数据，mapreduce 算法研究应用类：文本挖掘，推荐，排序，风控，图像识别，商业智能，传统行业应用（预测用户行为） 比较热门的：图像视频，计算机视觉，文本的岗位更多一些， 薪资水平 AI&gt;后端&gt;移动=前端 简历的书写和优化 简历： 个人信息，专业技能，项目经历，科研经历 专业技能: 算法(机器学习算法，深度学习算法)，特定方向技能，编程语言，数据分析处理工具库(python,spark) 项目经历：学校项目，数据科学比赛，实习经历 科研经历：论文，学术成就 原则：真实具体-项目背景，用了什么工具，达到什么效果（加评估)，如果优化和改进的？ 项目与竞赛 核心 项目选择和岗位匹配，体现数据技能，还能加点paper就好了 项目名称和背景 项目数据和特点 项目的流程和关键 项目的核心技术及优化手段 竞赛平台：Kaggle, 天池， DataCastle 读别人的成果 写自己的项目 比赛的选择：和岗位背景匹配的竞赛，体现相关技能和技术的比赛，有优异成绩的比赛 比赛的一般思路： 问题分析和抽象 数据分析和发现 数据与特征处理 建模以及优化（在模型还是在数据层面优化） 机器学习面试考察点 主要内容： 常用机器学习算法理解 数据结构算法题 项目实施与优化细节 业务认识与沟通 考察方面： 算法模型和理论基础扎实程度 工程实现能力和编码水平 业务理解和思考深度 沟通和表达能力 备战资源： 代码算法：快排，二分查找； 剑指offer；leetcode 机器学习 李航《统计学习方法》 周志华《机器学习》 Coursera Stanford《Machine Learning》 Coursera台湾大学《机器学习高级技法》 项目：算法，优缺点，数据，特征，优化等等 海量数据处理： Map_Reduce Hadoop spark 面试题的真实模样 统计 统计的基本知识 贝叶斯公式 排列组合题目 数学期望 统计概率题目 算法 对时间复杂度和空间复杂度有基本的认知 排序与二分查找 链表翻转 打印矩阵倒三角 二叉树中任意两个节点的最近公共祖先 上亿的query中周到频率最高的k个 机器学习 机器学习算法-核心 推到逻辑回归算法，loss function L1/L2正则化的区别 决策树如何完成回归 解释随机森林和GBDT 数据幅度缩放和归一化 是偶写SVM间隔对偶的推到 K-MEANS中k如何选取 优化算法 介绍一些bagging和boosting 过拟合和欠拟合发生的原因，如何缓解过拟合]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My Resume (Markdown)]]></title>
    <url>%2Fmdresume.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Resume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Admin Dashboard MRD]]></title>
    <url>%2Fadmindata.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Job</category>
      </categories>
      <tags>
        <tag>MRD</tag>
        <tag>Job</tag>
        <tag>Private</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asynchronous Client - Axios]]></title>
    <url>%2Faxios.html</url>
    <content type="text"><![CDATA[Install Axios Import Axios Promise Async/await Axios API without async/await Request Config/Options Axios Response Object Axios Error Object Axios Instance Install Axios 123npm install ---save axios# oryarn add axios Import Axios 12345// react styleimport axios from "axios";// javascript styleconst axios = require(); Promise 1234567const promise = new Promise((resolve,reject) =&gt; &#123; if (//异步操作成功) &#123; resolve(value); // resolve 是请求成功后的解决方案 &#125; else &#123; reject(value); // reject 是请求失败后的解决方案 &#125;&#125;) async/await async: async ensures that the function returns a promise, and wraps non-promises in it. [强制返回 promise] 12345678910async function f() &#123; return Promise.resolve(1);&#125;f().then(alert); // 1/****** Automatically Wrap ********/async function f() &#123; return 1;&#125;f().then(alert); // 1 await: The keyword await makes JavaScript wait until that promise settles and returns its result. 在async代码框内部，是synchronous执行；在async代码框外部，是asynchronous执行。 123456// works only inside async functions, the following is wrongres = await axios(&#123; url: "https://api.github.com/users/KrunalLathiya", method: "get"&#125;);console.log(res); Wrap the await with async 1234567891011121314151617// run in the chrome consoleconst axios = require("axios");async function getData() &#123; console.log(1); res = await axios(&#123; // await only stuck code afterwards but within the same async block url: "https://api.github.com/users/KrunalLathiya", method: "get" &#125;); console.log(2);&#125;console.log(0);getData();console.log(3);// the result is 0 - 1 - 3 - 2 Conclusion: async: a wrapper of await which forces to return a promise. await to stuck code afterwards which needs a wrapper ( async ) They are twins. Promise + async/await Wrong 1234567891011121314151617181920async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; await pool // put a await before a promise won't work // put a await ebfore a promise's reult works. .query(sql) .then((result) =&gt; &#123; const data = result.rows; final += getSingleTable(table, data); &#125;) .catch((err) =&gt; &#123; console.log(err.stack); &#125;) &#125;&#125; Right 12345678910111213141516async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; try &#123; const result = await pool.query(sql); // return result const data = result.rows; final += getSingleTable(table, data); &#125;catch(err) &#123; // error is catched in try/catch block console.log(err.stack); &#125; &#125;&#125; Put a await before a promise won’t work.Put a await ebfore a promise’s result works. Axios API without async/await API methods 1234567axios.get(); // get dataaxios.post(); // insert new dataaxios.put(); // replace oldaxios.delete(); // remove dataaxios.patch(); // send only changed dataaxios.options();axios.head(); Elegant usage 123456789101112131415161718const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://api.github.com/users/KrunalLathiya", &#123; params: &#123; ID: 12345 &#125; &#125;) .then(res =&gt; &#123; console.log(res.data.login); &#125;) .catch(err =&gt; &#123; console.log(err); &#125;);&#125;;getGithubData(); Request Config/Options Authorization (GET) 1234567891011121314const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://appdividend.com", &#123; // params: &#123;&#125; .. headers: &#123; Authorization: "Bearer " + "" //the token is a variable which holds the token &#125; &#125;) .then(res =&gt; console.log(res)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Authorization (POST) 123456789101112131415161718192021const axios = require("axios");let data = &#123; email: "test@163.com"&#125;;let config = &#123; headers: &#123; "Content-Type": "application/x-www-form-urlencoded", Authorization: "Bearer " + "token" &#125;, responseType: "blob"&#125;;getGithubData = () =&gt; &#123; axios .post("http://appdivident.com", data, config) .then(res =&gt; console.log(res.data)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Axios Response Object data: the payload returned from the server. By default, Axios expects JSON and will parse this back into a JavaScript object for you. status: the HTTP code returned from the server. statusText: the HTTP status message returned by the server. headers: all the headers sent back by the server. config: the original request configuration. request: the actual XMLHttpRequest object (when running in a browser). Axios Error Object message: the error message text response: the response obejct (if received) as described in the previous section. request: the actual XMLHttpRequest object (when running in a browser). config: the original request configuration Axios Instance 123456const axios = require("axios");request = axios.create(&#123; baseURL: "http://ec2-13-211-47-167.ap-southeast-2.compute.amazonaws.com:3000"&#125;);request.get("/articles").then(res =&gt; console.log(res.data)); Summary 何时使用async/await,何时使用axios自带API?async/await: 自定义复杂代码块axios API: 简单代码块调用注意： promise本来就是异步的。]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Async</tag>
        <tag>Javascript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Markdown]]></title>
    <url>%2Fmdtutorial.html</url>
    <content type="text"><![CDATA[Font’s Color and Size 字体Alignment 对齐方式Next Notes 便签Tab 选项卡Label 标签Button 按钮Video 视频PDF 电子书Images 图片Tables 表格Footnotes 脚注 Headings 标题 123456# heading level 1## heading level 2### heading level 3#### heading level 4##### heading level 5###### heading level 6 Paragraph 段落 1I really like using Markdown. Space 空格 I really like using Markdown. I think I’ll use it from now on. 1I really like using Markdown. &amp;nbsp; I think I'll use it from now on. Line Breaks 换行 I really like using Markdown. I think I’ll use it from now on. 12I really like using Markdown. &lt;/br&gt; I think I'll use it from now on. Emphasis 加粗 bold text 1**bold text** Italic 斜体 itabllic 1*italic* Bold and Italic 斜体加粗 important 1***important*** Strikethrough 删除线 The world is flat round. 1The world is ~~flat~~ round. Font’s Color and Size 字体 color=green size=3 1&lt;font color=green size=3&gt;color=green size=3 &lt;/font&gt; color=red size=3 1&lt;font color=red size=3&gt;color=red size=3&lt;/font&gt; Background Color 背景色 orange 12345&lt;!-- tr for row --&gt;&lt;!-- td for data --&gt;&lt;!-- th for header --&gt;&lt;!-- t --&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Generate HTML Table MDN HTML Table Alignment 对齐方式 center 诶嘿 1&lt;center&gt;诶嘿&lt;/center&gt; left 诶嘿 1&lt;p align="left"&gt;诶嘿&lt;/p&gt; right 诶嘿 1&lt;p align="right"&gt;诶嘿&lt;/p&gt; Next Notes 便签 Nostyle NoteWelcome to Hexo! 1234&#123;% note %&#125;### Nostyle NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Default NoteWelcome to Hexo! 1234&#123;% note default %&#125;### Default NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Primary NoteWelcome to Hexo! 1234&#123;% note primary %&#125;### Primary Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Info NoteWelcome to Hexo! 1234&#123;% note info %&#125;### Info Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Success NoteWelcome to Hexo! 1234&#123;% note success %&#125;### Success Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Warning NoteWelcome to Hexo! 1234&#123;% note warning %&#125;### Warning Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Danger NoteWelcome to Hexo! 1234&#123;% note danger %&#125;### Danger Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; No icon noteNote without icon: note info no-icon123code block in note tagcode block in note tagcode block in note tag 123456789&#123;% note info no-icon %&#125;### No icon noteNote **without** icon: `note info no-icon`&#123;% code %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Codeblock Note123code block in note tagcode block in note tagcode block in note tag 12345678&#123;% note success %&#125;### Codeblock Note&#123;% code lang:javascript %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Tab 选项卡 选项卡 1选项卡 2选项卡 3123 1234567891011121314152 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**Tab 1** 1&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 2** 2&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 3** 3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; Label 标签 default primary success info warning danger mark 123456&#123;% label default @default %&#125;&#123;% label primary @primary %&#125;&#123;% label success @success %&#125;&#123;% label info @info %&#125;&#123;% label warning @warning %&#125;&#123;% label danger @danger %&#125; &lt;mark&gt;mark&lt;/mark&gt; Button 按钮 text 1&#123;% btn #, text %&#125; Video 视频 12获取Youtube外链，粘贴即可&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wIHj9bxf5BI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt; PDF 电子书 1&#123;% pdf https://www.cs.cmu.edu/afs/cs.cmu.edu/user/gchen/www/download/java/LearnJava.pdf %&#125; superscript 上标 X2 subscript 下标 X2 Blockquotes 文字引用 Hello blockquotes 1&gt; Hellow Blockquotes Blockquotes with Multiple Paragraphs Line one Line Two Line Three 123&gt; Line one&gt; Line Two&gt; Line Three Nested Blockquotes Line One Nested Line 12&gt; Line One&gt;&gt; Nested Line Blockquotes with other elements The quarterly results look great! lone one line two 12345&gt; ###### The quarterly results look great!&gt;&gt; - lone one&gt; - line two&gt; Ordered Lists 有序列表 a b c 1231. a2. b3. c Nested Ordered Lists a a.a a.b b 12341. a 1. a.a 2. a.b2. b Unordered Lists 无序列表 a a.a a.b b 1234- a - a.a - a.b- b Paragraph in Lists a hello world b 123- a hello world- b Blockquotes in Lists a hello world b TODO LIST 任务列表 markdown [x] finished [ ] unfinished 12- [x] finished- [ ] unfinished hexo 已完成 未完成 1234&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt; Code Blocks 代码块 12345&lt;html&gt;&lt;head&gt;&lt;title&gt; Test &lt;/title&gt;&lt;/head&gt;&lt;/html&gt; Code 代码 Code 1`Code` Images 图片 123![star](https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656)&lt;img style="width: 200px; margin: auto" src="https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656 "&gt;&lt;/img&gt; Escaping Character 转义 * Hello world 1\* Hello world Tables 表格 Syntax Description Header Title Paragraph Text 1234|Syntax|Description||-|-||Header|Title||Paragraph|Text| Table Alignment 表格对齐 Column A Column B Column C A1 B1 C1 A2 B2 C2 A3 B3 C3 12345|Column A | Column B | Column C||:-|-:|:-:|| A1 | B1 | C1|| A2 | B2 | C2|| A3 | B3 | C3| Horizontal Lines 水平线 1--- Links 链接 http://www.baidu.com Website 1[Website](https://www.google.com) Cancel Link 取消链接 http://www.baidu.com 1`http://www.baidu.com` Footnotes 脚注 simple footnote, [1] 12simple footnote, [^1][^1]: This is the first footnote. This is the first footnote. ↩︎]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Personal Development for Programmers]]></title>
    <url>%2Fcoderpath.html</url>
    <content type="text"><![CDATA[Programming Language: Java, Javascript Computer Network: HTTP, Security Web Framework: Web Development Design Pattern: From code to architecture Data Structures and Algorithms: efficient implementation Industry Project: practical experience]]></content>
      <tags>
        <tag>Programmer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Top CS University Courses]]></title>
    <url>%2Fcourse-recommendation.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>CMU好课推荐</tag>
      </tags>
  </entry>
</search>
