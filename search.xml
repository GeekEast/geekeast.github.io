<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Restful协议规范]]></title>
    <url>%2FrestfulProtocol.html</url>
    <content type="text"><![CDATA[RESTful api 设计规范]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Protocol</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript Notes]]></title>
    <url>%2FjavscriptTutorial.html</url>
    <content type="text"><![CDATA[Javascript遍历方式比较 javascript遍历; 1234var arr = [&#123;name:'bb'&#125;,5,'test']for (item of arr) &#123; console.log(item)&#125; Javascript写入文本文件 javascript写入文本文件 12345678910111213141516// writefile.jsconst fs = require('fs');let lyrics = 'But still I\'m having memories of high speeds when the cops crashed\n' + 'As I laugh, pushin the gas while my Glocks blast\n' + 'We was young and we was dumb but we had heart';// write to a new file named 2pac.txtfs.writeFile('2pac.txt', lyrics, (err) =&gt; &#123; // throws an error, you could also catch it here if (err) throw err; // success case, the file was saved console.log('Lyric saved!');&#125;); Javascript单复数转化 单复数转化; Javascript判断数据类型 js判断数据类型 1console.log(typeof variable); Javascript读取json文件 1234const fs = require('fs')const dict = fs.readFileSync('utils/swagger/dict.json')dictObj = JSON.parse(dict);console.log(dictObj['timestamp without time zone']);]]></content>
      <categories>
        <category>Programming Lanugage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR Information]]></title>
    <url>%2Fssrinfo.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Info</category>
      </categories>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vscode Tutorial]]></title>
    <url>%2FvscodeTutorial.html</url>
    <content type="text"><![CDATA[vscode多光标编辑 手动: Option + left click 尾部: 选中 + shift + option + i 同词: command + shift + l]]></content>
  </entry>
  <entry>
    <title><![CDATA[Postgres Tutorial]]></title>
    <url>%2FpostgresTutorial.html</url>
    <content type="text"><![CDATA[postgres 列出表名 1234SELECT *FROM information_schema.columnsWHERE table_schema = 'your_schema' AND table_name = 'your_table' postgre教程]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由匹配]]></title>
    <url>%2Froutermatch.html</url>
    <content type="text"><![CDATA[规律：从长倒短，从定到变（waterfall） 123router.get('/projects/count',db.xxx1);router.get('/projects/count',db.xxx2);router.get('/projects/:id/count',db.xxx3);]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Router</tag>
        <tag>Path Match</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node-postgres Tutorial]]></title>
    <url>%2Fpg.html</url>
    <content type="text"><![CDATA[Connection Pool 123456789101112const &#123; Pool &#125; = require('pg');const pool = new Pool(&#123; user: process.env.POSTGRES_USERNAME, host: process.env.POSTGRES_HOST, database: process.env.POSTGRES_DATABASE, password: process.env.POSTGRES_PASSWORD, port: process.env.POSTGRES_PORT, max: process.env.POSTGRES_MAX_CONNECTION&#125;);module.exports = &#123; pool&#125;; Pool Usage 1234567891011 const &#123; pool &#125; = require('../utils/db');const sql = 'select * from users';pool.query(sql).then((result) =&gt; &#123; res.status(200).send(result.rows);&#125;).catch((err) =&gt; &#123; console.log(err.stack); res.status(400).json(err);&#125;); References: node-postgres]]></content>
      <categories>
        <category>DB Client</category>
      </categories>
      <tags>
        <tag>Postgre</tag>
        <tag>Node</tag>
        <tag>Restful API</tag>
        <tag>DB Client</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Integrate Express with Swagger]]></title>
    <url>%2FswaggerTutorial.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Restful API</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
        <tag>API docs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Shortcuts]]></title>
    <url>%2Fmymacshortcut.html</url>
    <content type="text"><![CDATA[Alfred: Double Command Alfred file search: Space + Search Content Alfred file preview: shift Alfred Search Chrome Bookmark: b + Search Content Alfred 查单词 define opera Alfred 模糊单词拼写查询：spell dialect Alfred 查看剪切板：clip Alfred 清空剪切板：clean Alfred google翻译： translate sth Alfred google搜索： ggl sth Alfred map搜索: maps sth Alfred gmail搜索： gmail sth Alfred 添加文件进缓存：Option + Up Alfred 添加文件进缓存，然后光标下移： Option + Down Alfred 删除缓存最后一个文件： Option + Left Alfred 缓存文件action: Option + Right Alfred Home Folder: ` 调出Preferences: Command + &lt; 切换APP：Command + Tab 全屏: Control-Command-F 修改后：Control+ Space [基于BetterTouchTool] 切换桌面: Control + Left (Right){F5/F6} Launchpad: Command + Up Launchpad切换页面： Command + Left(Right) Lanuchpad 删除app：长按Option Spotlight: Control + Space Chrome 前进、后退: Command + Left(Right) 黑白模式切换：Control + Command 打开新标签 Command + T 切换输入法: Command + Space 打开欧陆词典: Option + Up 1password7: Command + \ 显示隐藏文件夹:Shift + Command + . 调整菜单栏图标顺序：Command + drag vscode 自动换行: option + z 三个键盘流神器： BetterTouchTool： 定制任意快捷键 Alfred3：一个搜索框打开一切，不再需要dock Context： 强化版的程序切换]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install PostGres in Mac]]></title>
    <url>%2Fpostgreinstallonmac.html</url>
    <content type="text"><![CDATA[Installation 123brew updatebrew doctorbrew install postgresql Initialize DB 1initdb /usr/local/var/postgres Start Service 1pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start Configure Service on Boot 123ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist Create Default Database 1createdb # create database postgres(default name). CLI 1234567891011121314151617181920psql# user：当前mac用户# database：用户同名数据库# 主机：localhost# 端口号：5432，postgresql的默认端口是5432psql -U [user] -d [database] -h [host] -p [post]# \password：设置当前登录用户的密码# \h：查看SQL命令的解释，比如\h select。# \?：查看psql命令列表。# \l：列出所有数据库。# \c [database_name]：连接其他数据库。# \d：列出当前数据库的所有表格。# \d [table_name]：列出某一张表格的结构。# \du：列出所有用户。# \e：打开文本编辑器。# \conninfo：列出当前数据库和连接的信息。# \password [user]: 修改用户密码# \q：退出 Configure User 12345CREATE USER username WITH PASSWORD 'password';DROP DATABASE postgres;CREATE DATABASE user_database OWNER username;GRANT ALL PRIVILEGES ON DATABASE user_database to username;ALTER ROLE username CREATEDB; Mac安装PostgreSQL]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Commands All in One]]></title>
    <url>%2Flinuxcommands.html</url>
    <content type="text"><![CDATA[File Permission r: Read w: Write x: eXecute Binary Octal Permission 000 0 — 001 1 –x 010 2 -w- 011 3 -wx 100 4 r– 101 5 r-x 110 6 rw- 111 7 rwx mkdir used to create directroy mkdir [options] [params] Options: -m: --mode set the permission while creating -p: --parents automatically create parents directories –version: display the version info Params: directory names, separated by space Example: 1234567# create test folder with 700 permissionmkdir -m 700 /usr/meng/test# create os_1 folder with 700 permission, automatically create parents folders.mkdir -p-m 750 bin/os_1mkdir -p /data/db id display the user id and the group id id [-gGnru][--help][--version][username] Options -u: display current user id -n: display current user name (used with -u) Examples 12id -u # Result: 501id -un # Result: xiangt chown modify the owner of files or directories\ must using root Options: -R: recursive all files Examples 12# set current user as the ownersudo chown -R `id -un` /data/db chmod modify the read, write and execute permission of files or directories. 属主权限 属组权限 其它用户权限 Octal number Symbolic Permission 0 --- none 1 --x execute 2 -w- write 3 -wx write/execute 4 r-- read 5 r-x read/execute 6 rw- read/write 7 rwx read/write/execute Examples 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[Using Node.js require vs. ES6 import/export]]></title>
    <url>%2Frequirevsimport.html</url>
    <content type="text"><![CDATA[Are there any performance benefits to using one over the other? The current answer is no, because none of the current browser engines implements import/export from the ES6 standard.]]></content>
  </entry>
  <entry>
    <title><![CDATA[弟子规讲课稿讨论]]></title>
    <url>%2Fdizigui.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>传统文化</category>
      </categories>
      <tags>
        <tag>弟子规</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Push 免输账户密码]]></title>
    <url>%2Fgit-credential.html</url>
    <content type="text"><![CDATA[123456git config --global credential.helper storegit push# type your username and password# Next time you don't have to type]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 构建RESTful API]]></title>
    <url>%2Fnodejs.html</url>
    <content type="text"><![CDATA[Introduction Install Node.js Run Node.js Node Module System NPM Introduction What is Node.js? Running Environemnt for Javascript outside browsers, often used for create backend services - API. Node is ideal for building highly-scalable, data-insentive and real-time apps. Easy to develop Can be used for prototyping and agile development Can be used in industry for large projects like Uber, Paypal, Netflix and Walmart. Friendly for javascript programmers Big community to support, libs I have alreay install node yarn Where is Node from? extract the javascript engine from Chrome called v8 integrate the v8 with additional modules Asynchronous in Node.js Synchronous by default in ASP.net Asynchronous by default in nodejs 异步机制：使用Event Queue,频繁检查，执行任务 What is Node.js used for? Node is ideal for I/O Intensive Applications. Node is not ideal for CPU Intensive Applications like video encoding and image processing applications. Install Node.js 1234# 也可以下载mac安装包brew install node# 查看版本node --version Run Node.js 1234567cd workspacemkdir newAppcd newAppcode . # use VS code# create js file and runnode app.js # for example Code Example 12345678hello = () =&gt; &#123; console.log('hello world')&#125;hello(); // vscode execute through node automaticallyconsole.log(window) // error// no window in node, that's for browser. Javascript Module Global object object that we can access everywhere, there is an object called global. 1234567global.console.log(1);global.setTimeout();global.clearTimeout();global.setInterval();global.clearInterval(); But in browser, the global obejct is the window object. 1234567window.console.log(1);window.setTimeout();window.clearTimeout();window.setInterval();window.clearInterval(); And we can just simplify it in whichever env. 1234567console.log(1);setTimeout();clearTimeout();setInterval();clearInterval(); But if you design your own obejct, it doesn’t belongs to global obejct. node different global and local 12var message = "hello";console.log(global.message);// undefinded error However it belongs to window if you use the browser rather than node. window literally eat all food all things belong to window. 12var message = 'hello';console.log(window.message); Insights: Why we need to use Module? Node is better. Browser is worse. Two js run in browser, with two variables or methods of the same name, the later one will override the previous one. Therefore, we use module to localize variables to avoid collapse. 在浏览器中，所有变量和方法都属于window 在Node中，如非特别定义，所有变量和方法都属于自己所在的文件，而不属于global Module Import and Export Module like private in Java Export module.exports.log = log 1234567891011121314151617// ./logger.jsvar url = "http://www.example.com/login";log = (m) =&gt; &#123; console.log(m)&#125;// export the log function as log.module.exports.log = log;// export single function module.exports = log;// Ormoduel.exports = &#123; log: log, url: url&#125; Import const {log, url} = require('./logger') 123456789101112// Way Oneconst logger = require('./logger') // const is better// execute the log methodlogger.log();// Way Two - better, more lightweightconst &#123;log, url&#125; = require('./logger')// If it is a single function// module.exports = log;const log = require('./logger');log("hello") './logger' vs 'logger' './logger': Current Ddirectory 'logger': Built in Current Directory in node_modules Node Wrapper 12345678(function (exports, require, module, __filename, __dirname) &#123; // file code console.log(exports); console.log(require); console.log(module); console.log(__filename); console.log(__dirname);&#125; Node Modules API Docs File System HTTP 12345678910const http = require('http');const server = http.createServer();// action after connection eventserver.on('connection',(s =&gt; console.log("new connection."))); // very low level// port 3003server.listen(3003);console.log('Listening on port 3000...'); 12345678910111213141516171819202122const http = require('http');const server = http.createServer( (req,res) =&gt; &#123; if (req.url === '/')&#123; res.write("hello world"); res.end(); &#125; if (req.url === '/api') &#123; res.write(JSON.stringify(&#123; "1":2 &#125;)); res.end(); &#125; &#125;);// port 3003server.listen(3003);console.log('Listening on port 3003...'); OS Path Process Query Strings Stream NPM Create NPM Project Switch Version of npm 1sudo npm i -g npm@5.5.1 Create package.json file 123npm init# default settingsnpm init --yes Install Node Package package is installed in node_modules 1234npm install underscore# shorternpm i underscore# you don't have to add --save anyore A better way yarn 12yarn add underscoreyarn remove underscore install all package in package.json 123yarn# ornpm i Git Ignore Packages to Push 123456789git inittouch .gitignore## inside .gitignorenode_modules/git add .git commit -m "..."git push Underscore.js 12var _ = require('underscore');console.log(_.contains([1,2,3],2)) Semantic Versioning 4.13.6 (Patch) 6: bugs fixing version (Minor) 13: new features version without breaking exsiting API (Main) 4: new features version with breaking existing application exact version : 4.13.6 stable Major and Minor: ~4.13.6 stable Major: ^4.13.6 Inspect installed versions 12345yarn listyarn list --depth=0# 效果是不一样的npm listnpm list --depth=0 View Packages 12npm view mongoosenpm view mongoose dependencies Update outdated packages 123456789npm outdated# this will only update minor and patch updatenpm update# update for major updatesudo npm i -g npm-check-updatesncu -u # to upgrade the json fileyarn # execute the update Install Packages only for Dev 1npm i jshint --save-dev Uninstall Packages 123npm un mongoose# oryarn remove mongoose Global Packages Global: can be used under any folders Local: can only be used withon on folder 12345678# update the npm to the latest versionsudo npm i -g npm# to see all outdated global packagesnpm -g outdated# uninstall global packagesnpm un -g npm NPM Registry Publish Your Own Package to NPM Registry 12345# prepare the projectmkdir lion-libcd lion-lib/npm init --yestouch index.js 12// index.jsmodule.exports.url = "asdadsad" 12345678# register for registrynpm adduser# loginnpm login# make sure your package name is unique in the pacakge.json file and the push to the registrynpm publish Updating your Published Packages 1234567# first you have to update the versio numbernpm version majornpm version minornpn version patch# then publish to the registrynpm publish RESTful Service REST Definition REST: Representational State Transfer It’s a convention for building these HTTP serivces. HTTP Protocol Http://vidly.com/api/customers/1 Http: Protocol vidly.com: Domain api: Path customers: Resource 1: Resource Unique Identifier HTTP Methods GET: retrive resources POST: upload resources PUT: update global resources PATCH: update local resources DELETE: delete resources 12345GET /api/customersGET /api/customers/1PUT /api/customers/1DELETE /api/customers/1POST /api/customers Node Monitor Reload the Node Automatically when changes apply. 12345sudo npm i -g nodemon# instead of node app.jsnodemon app.js# listen to customized file types.nodemon -e .yml,.js app.js 在配置vscode code runner为nodemon之后，nodemon失效 shell中nodemon app.js, nodemon不会失效. 推荐使用shell的方式 Express Basics Get to know express 1234# inspect it in shellnpm view express# get the official website# http://expressjs.com/ Install Express 1yarn add express Hello World 123456789101112// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.get('/',(req, res) =&gt; &#123; res.send("Hello World")&#125;);// start listenapp.listen(port); Basic Routes 1app.METHOD(URL,CALLBACK_FUNC) Req Method Method Description req.get() 获取header中某属性的值 req.is() 判别Content-Type Req Properties Property Description req.body 键值对数据 req.cookies 获取cookies req.hostname 获取域名 req.ip 获取ip req.method 获取方法 req.originalUrl 完整url req.baseUrl 路由插入的路径 req.path 细节路径 req.params 存储参数化数据 req.protocol http/https req.query 获取url中?间所夹参数 Res Method Method Description res.download() 提示将要下载文件。 res.end() 结束响应进程。 res.json() 发送 JSON 响应。 res.jsonp() 在 JSONP 的支持下发送 JSON 响应。 res.redirect() 重定向请求。 res.render() 呈现视图模板。 res.send() 发送各种类型的响应。 res.sendFile 以八位元流形式发送文件。 res.sendStatus() 设置响应状态码并以响应主体形式发送其字符串表示。 Middleware Routes 统一请求中间件：适合做User Authentication 12345678910111213141516// Import express and initialize an appvar express = require('express');var app = express();var port = process.env.PORT || 3000;// Set routesapp.all('/', (req,res,next) =&gt; &#123; console.log('authentication'); next();&#125;);app.get('/',(req, res) =&gt; &#123; res.send("How are you?")&#125;);// start listenapp.listen(port); 单一路径多个回调 1234567891011121314// configure expressvar express = require('express');var app = express();var port = process.env.PORT || 3000;// routesapp.route("/").get((req,res)=&gt; &#123; res.send("get test");&#125;).post((req,res)=&gt; &#123; res.send("post test");&#125;)// listenapp.listen(port); express.Router Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”. Router Method Method Description router.all() 匹配所有http请求，无中间件 router.get() 匹配GET请求 router.param() 匹配特定参数 router.route() 单一路径匹配多个回调 router.use() 匹配所有http请求, 添加中间件 12345678910111213141516171819202122232425262728293031// bird.js// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router(); var port = process.env.PORT || 3000;// middlewarerouter.use((req,res,next) =&gt; &#123; console.log("authentication"); next();&#125;)router.get("/",(req,res) =&gt; &#123; res.send("main page.")&#125;)router.post("/",(req,res) =&gt; &#123; res.send("main post.")&#125;)router.get("/about", (req,res)=&gt;&#123; res.send("about page.")&#125;)// mount the middleware(router);app.use('/',router);// start listenapp.listen(port);module.exports.router = router; route.use’s callback is a middleware 12345// main.jsvar &#123;router&#125; = require('./birds');// birds is also a middlewareapp.use('/birds', birds);app.listen(3000); Parameter Route 123456789101112131415161718192021222324252627282930313233// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);//实际上 ： 充当了一个通配作用，通配规则如何，请看验证参数router.get('/:id', (req, res) =&gt; &#123; res.send('id namespace.');&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Parameter Check 有時候我們會需要針對傳入的路由參數來進行篩選或驗證，例如檢查使用者所輸入的字串是否是合法的名稱，這時候就可以使用 .param() 這個專門用來處理參數的 middleware： 12345678910111213141516171819202122232425262728293031323334353637383940414243// Import express and initialize an appvar express = require('express');var app = express();var router = express.Router();var port = process.env.PORT || 3000;// middlewarerouter.use((req, res, next) =&gt; &#123; console.log('authentication'); next();&#125;);router.get('/', (req, res) =&gt; &#123; res.send('Main Page.');&#125;);// 位于路由之前，充当另外一个middlewarerouter.param('id', (req, res, next, id) =&gt; &#123; // validation logi here console.log('valid id'); // send back request req.id = id; next();&#125;);router.get('/:id/:name', (req, res) =&gt; &#123; res.send(req.params); // res.send(req.params.name);&#125;);router.post('/', (req, res) =&gt; &#123; res.send('main post.');&#125;);router.get('/about', (req, res) =&gt; &#123; res.send('about page.');&#125;);// mount the middleware(router);app.use('/', router);// start listenapp.listen(port); Query String Parameters 1234567891011121314151617181920var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/:id", (req,res) =&gt; &#123; // 对应？后面的query参数 // 例如: localhost:3000/courses/1?sortBy=name, query中包含sortBy的key-value pair res.send(req.query);&#125;);app.use("/courses",router);app.listen(port); HTTP Get Request 1234567891011121314151617181920212223242526272829303132333435363738// http get request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);app.use("/courses",router);app.listen(port); HTTP Post Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// http post request examplesvar express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; // array find const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); // 404 response. if (!course) res.status(404).send("The course doesn't exist."); // normal response res.send(course); &#125;);// use the json middleware.app.use(express.json());app.use("/courses",router);app.listen(port); Simple Input Validation 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var express = require("express");var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - simple version if (! req.body.name || req.body.name.length &lt; 3)&#123; res.status(400).send("Name is required and should be minimum 3 characters."); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); Complex Input Validation yarn add joi 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var express = require("express");// import joiconst Joi = require('joi')var app = express();var router = express.Router();var port = process.env.PORT || 3000;const courses = [ &#123;id: 1, name: "Statistics"&#125;, &#123;id: 2, name: "Data Mining"&#125;, &#123;id: 3, name: "Public Policy"&#125;]router.use((req,res,next)=&gt;&#123; next();&#125;);router.get("/",(req,res)=&gt;&#123; res.send(courses);&#125;)router.post("/", (req,res) =&gt; &#123; // validation - joi version const schema = &#123; name: Joi.string().min(3).required(), &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125; courses.push(course); res.send(course);&#125;)router.get("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course); &#125;);app.use(express.json());app.use("/courses",router);app.listen(port); req.body vs req.params req.body里装的是post的data req.params里装的是url中的某个值 HTTP Update Request 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); HTTP Delete Request 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586var express = require('express');// import joiconst Joi = require('joi');var app = express();var router = express.Router();var port = process.env.PORT || 3000;var courses = [ &#123; id: 1, name: 'Statistics' &#125;, &#123; id: 2, name: 'Data Mining' &#125;, &#123; id: 3, name: 'Public Policy' &#125; ];router.use((req, res, next) =&gt; &#123; next();&#125;);// put methodrouter.put('/:id', (req, res) =&gt; &#123; // look up the course let course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); // if no such course if (!course) &#123; res.status(400).send('no such course.'); return; &#125; // if exist, validate const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); // validation fails if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; // change data in place course.name = req.body.name; res.send(course);&#125;);router.get('/', (req, res) =&gt; &#123; res.send(courses);&#125;);router.post('/', (req, res) =&gt; &#123; const schema = &#123; name: Joi.string().min(3).required() &#125;; const result = Joi.validate(req.body, schema); if (result.error) &#123; res.status(400).send(result.error.details[0].message); return; &#125; const course = &#123; id: courses.length + 1, name: req.body.name &#125;; courses.push(course); res.send(course);&#125;);router.get('/:id', (req, res) =&gt; &#123; const course = courses.find((c) =&gt; c.id === parseInt(req.params.id)); if (!course) res.status(404).send("The course doesn't exist."); res.send(course);&#125;);router.delete("/:id", (req,res) =&gt; &#123; const course = courses.find(c =&gt; c.id === parseInt(req.params.id)); if (!course) &#123; res.status(404).send("Course doesn't exsit."); return; &#125; // this happens in place courses.splice(courses.indexOf(course),1); res.send(course);&#125;);app.use(express.json());app.use('/courses', router);app.listen(port); Code One Genre: Vidly 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192var express = require("express");// for json validationvar Joi = require("joi");var app = express();var port = process.env.PORT || 3000;var router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre); console.log(genres);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)// for parsing json objectapp.use(express.json());app.use("/api/genres",router);app.listen(port); Advanced Express Middleware Middleware: modular and mountable component Custom Middleware function 12345// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;) Build-in Middlware the url encoded middleware 1app.use(express.urlencoded(&#123;extended: true&#125;)) the static resouces hosting middleware 123// static files hosted in "./public" folder// access by localhost:3000/filename.app.use(express.static("public")); Third Party Middleware Resources the performance matters. helmet - https 1npm i helmet The helmet test failed. 12const helmet = require('helmet')app.use(helmet()) // as early as possible. morgan - console logger 1npm i morgan 12const morgan = require('morgan');app.use(morgan(tiny)); Environment Development Production Testing Get the ENV variable in Javascript First method 1process.env.NODE_ENV; // might be undefined. Second method 1app.get("env") // if undefined will return default value: development. Use Morgan only in Development ENV 123456// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Set the Environment Variable in shell 1export NODE_ENV=production Use Config Management Package 1npm install config write the config file 1234567// development&#123; "name" : "My Express App - Development", "mail": &#123; "host": "dev-mail-server" &#125;&#125; 通过export NODE_ENV可以自动载入相应配置 12345678910111213const config = require("config");// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); console.log("Morgan Loaded in Development Stage")&#125; Debugging 不必每次都删除consol.log() 设置环境变量，控制debug启动或者关闭 设置显示信息的内容，程度 Install the Debug Package 1npm i debug Use debugger in code 123456const startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");// console.log("Morgan Loaded in Development Stage")startupDebugger("Morgan Loaded in Development Stage");dbDebugger("Database debugger started.") Set the Env and Start Project 12345678910# set the debugger to app: startupexport DEBUG=app:startup # enable startup debuggingexport DEBUG=app:db # enable database debuggingexport DEBUG= # disable debugging.export DEBUG=app:startup,app:db # enable two debuggingexport DEBUG=APP:* # enable all debuggingnodemon app.js# shortcut to set debug and lanuch the applicationDEBUG=app:db nodemon app.js Template Engine used to return html Pug Mustache EJS Install pug 1npm i pug Set the views file. Use views in code 12345678910app.get("/", (req,res) =&gt; &#123; // view file name + variables res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);app.set('view engine', 'pug');app.set('views','./views'); Database Integration Code One Genre: Refractured FolderDescriptionconfigstore configurationmiddlewarestore all middlewarespublicstore static filesroutersstore all routersviewsstore template pug files 12345678910111213// routers/home.jsconst express = require("express");const router = express.Router();router.get("/", (req,res) =&gt; &#123; res.render("index", &#123; title: "View Testing", message: "Hello World" &#125;)&#125;);module.exports = router; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192// routers/genres.jsconst express = require("express");const Joi = require("joi");const router = express.Router();// data partconst genres = [ &#123;id: 1, name: "Comedy"&#125;, &#123;id: 2, name: "Fantasy"&#125;, &#123;id: 3, name: "Horror"&#125;,]// middleware functionrouter.use((req,res,next) =&gt; &#123; // sth you want to do. next();&#125;)// list all genresrouter.get("/", (req,res) =&gt; &#123; res.send(genres);&#125;)// GET requestrouter.get("/:id", (req,res) =&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre doesn't exist."); return; &#125; res.send(genre);&#125;)// POST requestrouter.post('/', (req, res) =&gt; &#123; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body,schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // update the data const genre = &#123; id: genres.length + 1, name: req.body.name &#125;; genres.push(genre); res.send(genre);&#125;);// PUT requestrouter.put("/:id", (req,res) =&gt; &#123; // find the genre const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if (!genre)&#123; res.status(404).send("Genre not found."); return; &#125; // validation const schema = &#123; name: Joi.string().required() &#125; const result = Joi.validate(req.body, schema); if (result.error)&#123; res.status(400).send(result.error.details[0].message); return; &#125; // modify the data genre.name = req.body.name; res.send(genre);&#125;)// DELETE requestrouter.delete("/:id", (req,res)=&gt; &#123; const genre = genres.find(c =&gt; c.id === parseInt(req.params.id)); if(!genre)&#123; res.status(404).send("genre not found."); &#125; genres.splice(genres.indexOf(genre), 1); res.send(genre);&#125;)module.exports = router; 123456789101112131415161718192021222324252627282930313233343536373839// app.jsconst startupDebugger = require('debug')("app:startup");const dbDebugger = require('debug')("app:db");const config = require("config");const morgan = require("morgan");const express = require("express");const home = require("./routes/home");const genres = require("./routes/genres")const app = express();const port = process.env.PORT || 3000;// configurationconsole.log("Application Name: " + config.get("name"));console.log("Mail Server Name: " + config.get("mail.host"));// environmentconst env = app.get("env");if (env === "development") &#123; app.use(morgan('tiny')); startupDebugger("Morgan Loaded in Development Stage")&#125;// database work ...dbDebugger("database debugger")app.set('view engine', 'pug');app.set('views','./views');app.use(express.static("public"));app.use(express.urlencoded(&#123;extended: true&#125;))app.use(express.json());app.use("/",home);app.use("/api/genres",genres);app.listen(port); MongoDB Configuration Install MongoDB 1brew install mongodb Create Data Directory Modify mongod.conf to set the database path. 12sudo mkdir -p /data/dbsudo chown -R `id -un` /data/db Run MongoDB in Shell 12mongod # ormongod --config /usr/local/etc/mongod.conf the port is 27017 Run MongoDB by brew 12brew services start mongodbbrew services stop mongodb MongoDB GUI Client Robot 3T [Simple][Free] dbKoda [import &amp; output &amp; charts] Studo 3T [Support SQL][Expensive] Node to MongoDB Connect simple api: mongoose. Install Mongoose 1npm i mongoose Connect to Mongodb mongoose will create database for you automatically once you create a new record in it. 12345678910const mongoose = require('mongoose');// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123;useNewUrlParser: true&#125;) // MongoDB will create the playground automatically .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err)); Define Collections and Validations 123456789101112// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema); CRUD Create Documents Mongo Conceptcollection: similar to one table in the relational databasedocument: similar to one row in the relational databaseMongoose Conceptschema: define the shape of documentsmodel: correspont to class in javascript, referring to collection, defined and created using the schema. Mongoose Data Types String Number(包含小数) Date Boolean Array Map Mixed ObjectId Decimal128 Buffer 12345678910111213141516171819// CREATE operationconst data = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true&#125;;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;createSingleCourse(data); Query Documents Compare Operator$eq: equal$ne: not equal$gt: greater than$gte: greater than or equal to$lt: less than$lte: less than or equal to$in: in$nin: not inLogical Opeartoror: orand :and 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;getAllCourses();// READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourse();// READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourseCompare();// READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareOr();// READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;getCourseCompareRegular();// READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;getCourseCompareCount();// READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;getCourseComparePagination(); Update Documents When you need check the existence of document at first 12345678910111213// UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;findThenUpdateCourse("5c919cb9310fd622b1db90bd"); When you confirm the existence of document Update Operator 123456789101112// UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourse("5c919cb9310fd622b1db90bd"); When you want to get the old documents as results. 12345678910// UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;updateCourseWithOldRecords("5c919cb9310fd622b1db90bd"); When you want to get the updated documents as results. 12345678910// UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd"); Remove Documents 123456789async function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;removeCourse("5c919cb9310fd622b1db90bd"); Code Two Course: CRUD 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207const mongoose = require('mongoose');mongoose.set('useCreateIndex',true);// host: localhost// 27017: port// database: playground// return: a promise object.mongoose .connect('mongodb://localhost:27017/playground', &#123; useNewUrlParser: true &#125;) .then(() =&gt; console.log('Connecting to the MongoDB...')) .catch((err) =&gt; console.log(err));// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;);// class Course &lt;=&gt; collection 'Course'const Course = mongoose.model('Course', courseSchema);// CRUD is based on model.// 1. CREATE operationconst data1 = &#123; name: 'Database Management', author: 'James Tan', tags: [ 'database', 'backend' ], // use default value for date isPublished: true, price: 10.2&#125;;const data2 = &#123; name: 'Node Js Course', author: 'James Tan', tags: [ 'node', 'backend' ], // use default value for date isPublished: true, price: 30&#125;async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); // return a promise const result = await course.save(); console.log(result);&#125;// createSingleCourse(data1);// createSingleCourse(data2);// 2.1 READ Operation - Get All Coursesasync function getAllCourses() &#123; const courses = await Course.find(); console.log(courses);&#125;// getAllCourses();// 2.2 READ Operation - query using filterasync function getCourse() &#123; const courses = await Course.find(&#123; name: 'Database Management' &#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourse();// 2.3 READ Operation - query compareasync function getCourseCompare() &#123; const courses = await Course // .find(&#123; price: &#123;$gt: 11&#125;&#125;) .find(&#123; price: &#123;$in: [10.2,30]&#125;&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;// getCourseCompare();// 2.4 READ Operation - query compare OR ANDasync function getCourseCompareOr() &#123; const courses = await Course .find() // find() is necessary .or(&#123;price: &#123;$gt: 15&#125;&#125;, &#123;name: "Database Management"&#125;) .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareOr();// 2.5 READ Operation - query compare Regular Expressionasync function getCourseCompareRegular() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;); console.log(courses);&#125;// getCourseCompareRegular();// 2.6 READ Operation - query countasync function getCourseCompareCount() &#123; const courses = await Course .find(&#123;name: /^data/i &#125;) // start with data or Data .limit(10) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) .countDocuments(); console.log(courses);&#125;// getCourseCompareCount();// 2.6 READ Operation - query paginationasync function getCourseComparePagination() &#123; // /api/courses?pageNumber=2&amp;pageSize=10 const pageNumber = 1; // 第几页 const pageSize = 10; // 一页几个documents const courses = await Course .find() // start with data or Data // these two lines are the pagination .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123; name: 1 &#125;) // 1 for ascending order .select(&#123; name: 1, tags: 1, price:1 &#125;) console.log(courses);&#125;// getCourseComparePagination();// 3.1 UPDATE Operation - find + save// when you need to check if the record exists or notasync function findThenUpdateCourse(id) &#123; const course = await Course.findById(id); if(!course) return; course.isPublished = true; course.name = "Java"; course.tags = ["backend","OOP"]; course.price = 15; const result = await course.save(); console.log(result);&#125;// findThenUpdateCourse("5c919cb9310fd622b1db90bd");// 3.2 UPDATE Operation - direct update// when you confirm the course already existsasync function updateCourse(id) &#123; const result = await Course.update( &#123; _id:id, isPublished: false&#125;, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourse("5c919cb9310fd622b1db90bd");// 3.3 UPDATE Operation - update with old as resultasync function updateCourseWithOldRecords(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;); console.log(result);&#125;// updateCourseWithOldRecords("5c919cb9310fd622b1db90bd");// 3.4 UPDATE Operation - update with new as resultasync function updateCourseWithUpdatedRecord(id) &#123; const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: "Mosh", isPublished: true &#125;&#125;,&#123;new:true&#125;); console.log(result);&#125;// updateCourseWithUpdatedRecord("5c919cb9310fd622b1db90bd");// 4 REMOVE Operation - update with new as resultasync function removeCourse(id) &#123; // delete the first one found const result = await Course.deleteOne(&#123;_id: id&#125;) // delete all // const result = await Course.deleteMany(&#123;isPublished:true&#125;) // const course = await Course.findByIdAndRemove(id); console.log(result);&#125;// removeCourse("5c919cb9310fd622b1db90bd"); Data Validation Validation Happens in Mongoose Level, not in Database Level. Three Levels of Validation:Router Level: JoiMongoose Level: Built-in ValidationDatabase Level: MySQL … 12345678910// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true &#125;, author: String, tags: [ String ], // this means a list of string date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123;type: Number, required: true&#125;&#125;); Error handling 12345678910111213async function createSingleCourse(data) &#123; // create an instance const course = new Course(data); try &#123; // return a promise const result = await course.save(); &#125;catch(err) &#123; console.log(err.message); &#125;&#125;createSingleCourse(data1);createSingleCourse(data2); Built-in Validation Price is only required when it is published 1234567891011121314151617181920212223242526const courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: [String], date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Custom Validation 123456789101112131415161718192021222324252627282930313233343536// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; validator: function(v) &#123; return v &amp;&amp; v.length &gt; 0; &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Async Validation What if you need to call another api during the validation? The Answer is the callback function 12345678910111213141516171819202122232425262728293031323334353637383940// Define the databaseconst courseSchema = new mongoose.Schema(&#123; // 使得unique生效，必须删除数据库，重启服务，才可以 name: &#123; type: String, required: true, unique: true, minlength: 5, maxlength: 150, // match: /^data/i // no need to use this one &#125;, category: &#123; type: String, required: true, enum: ['web', 'mobile', 'network'] // 固定的几种， 和in差不多 &#125;, author: String, tags: &#123; type: Array, validate: &#123; isAsync: true, validator: function(v, callback) &#123; setTimeout(() =&gt; &#123; const result = v &amp;&amp; v.length &gt; 0; callback(result); &#125;, 2000); &#125;, message: "A course at least has one tag" &#125; &#125;, date: &#123; type: Date, default: Date.now &#125;, isPublished: Boolean, price: &#123; type: Number, required: function() &#123;return this.isPublished&#125;, // price is only required when it is published min: 10, max: 100 &#125;&#125;); Some Notes err.stack err.stack: the trace of error 1console.log(err.stack);]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Restful API</tag>
        <tag>Frontend</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端工程师技术图谱]]></title>
    <url>%2Fbackendallinone.html</url>
    <content type="text"><![CDATA[数据结构 常用算法 并发 操作系统 设计模式 运维 &amp; 统计 &amp; 技术支持 中间件 网络 数据库 搜索引擎 … 数据结构 队列 集合 链表、数组 字典、关联数组 栈 树 二叉树 完全二叉树 平衡二叉树 二叉查找树（BST） 红黑树 B-，B+，B*树 LSM 树 BitSet 常用算法 排序、查找算法 选择排序 冒泡排序 插入排序 快速排序 归并排序 希尔排序 堆排序 计数排序 桶排序 基数排序 二分查找 Java 中的排序工具 布隆过滤器 字符串比较 KPM 算法 深度优先、广度优先 贪心算法 回溯算法 剪枝算法 动态规划 朴素贝叶斯 推荐算法 最小生成树算法 最短路径算法 并发 多线程 线程安全 一致性、事务 事务 ACID 特性 事务的隔离级别 锁 Java中的锁和同步类 公平锁 &amp; 非公平锁 悲观锁 &amp; 乐观锁 &amp; CAS ABA 问题 CopyOnWrite容器 RingBuffer 可重入锁 &amp; 不可重入锁 互斥锁 &amp; 共享锁 死锁 操作系统 计算机原理 进程 线程 协程 Linux 设计模式 设计模式的六大原则 23种常见设计模式 应用场景 单例模式 责任链模式 MVC IOC AOP UML 微服务思想 康威定律 运维 &amp; 统计 &amp; 技术支持 常规监控 APM 统计分析 持续集成(CI/CD) Jenkins 环境分离 自动化运维 Ansible puppet chef 测试 TDD 理论 单元测试 压力测试 全链路压测 A/B Test 虚拟化 KVM Xen OpenVZ 容器技术 Docker 云技术 OpenStack DevOps 文档管理 中间件 Web Server Nginx OpenResty Apache Httpd Tomcat 架构原理 调优方案 Jetty 缓存 本地缓存 客户端缓存 Memcached Redis 架构 回收策略 Tair 消息队列 消息总线 消息的顺序 RabbitMQ RocketMQ ActiveMQ Kafka Redis 消息推送 ZeroMQ 定时调度 单机定时调度 分布式定时调度 RPC Dubbo Thrift gRPC 数据库中间件 Sharding Jdbc 日志系统 日志搜集 配置中心 API 网关 网络 协议 OSI 七层协议 TCP/IP HTTP HTTP2.0 HTTPS 网络模型 Epoll NIO kqueue 连接和短连接 框架 零拷贝（Zero-copy） 序列化(二进制协议) Hessian Protobuf 数据库 基础理论 数据库设计的三大范式 MySQL 原理 InnoDB 优化 索引 聚集索引, 非聚集索引 复合索引 自适应哈希索引(AHI) explain NoSQL MongoDB Hbase 搜索引擎 搜索引擎原理 Lucene Elasticsearch Solr sphinx 性能 性能优化方法论 容量评估 CDN 网络 连接池 性能调优 流式计算 Storm Flink Kafka Stream 应用场景 Hadoop HDFS MapReduce Yarn Spark 安全 web 安全 XSS CSRF SQL 注入 Hash Dos 脚本注入 漏洞扫描工具 验证码 DDoS 防范 用户隐私信息保护 加密解密 对称加密 哈希算法 非对称加密 服务器安全 数据安全 数据备份 网络隔离 内外网分离 登录跳板机 授权 RBAC OAuth2.0 常用开源框架 开源协议 日志框架 Log4j、Log4j2 Logback ORM 网络框架 Web 框架 Spring 家族 工具框架 分布式设计 扩展性设计 稳定性 &amp; 高可用 硬件负载均衡 软件负载均衡 限流 应用层容灾 跨机房容灾 容灾演练流程 平滑启动 数据库扩展 读写分离模式 分片模式 服务治理 服务注册与发现 服务路由控制 分布式一致 CAP 与 BASE 理论 分布式锁 分布式一致性算法 PAXOS Zab Raft Gossip 两阶段提交、多阶段提交 幂等 分布式一致方案 分布式 Leader 节点选举 TCC(Try/Confirm/Cancel) 柔性事务 分布式文件系统 唯一ID 生成 全局唯一ID 一致性Hash算法 设计思想 &amp; 开发模式 DDD(Domain-driven Design - 领域驱动设计) 命令查询职责分离(CQRS) 贫血，充血模型 Actor 模式 响应式编程 DODAF2.0 Serverless 项目管理 架构评审 重构 代码规范 RUP 看板管理 SCRUM 极限编程 敏捷开发 结对编程 通用业务术语 技术趋势 架构师素质 团队管理 招聘 资讯 行业资讯 公众号列表 博客 团队博客 个人博客 综合门户、社区 问答、讨论类社区 行业数据分析 专项网站 其他类 推荐参考书 在线电子书 纸质书 开发方面 架构方面 技术管理方面 基础理论 工具方面 大数据方面 技术资源 开源资源 手册、文档、教程 在线课堂 会议、活动 常用APP 找工作 工具 代码托管 文件服务 综合云服务商]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Programmer</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么在中国，规定白衣不能阅戒?]]></title>
    <url>%2Fjielv.html</url>
    <content type="text"><![CDATA[为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。 为什么在中国，规定白衣不能阅戒？ 1. 小乘戒是在印度指定，传到中国环境发生巨大变化，使得中国的佛弟子们很难做到所有戒规，怕世人以此来攻击僧侣，诋毁佛教。 2. 大乘果位的菩萨利用各种善巧方便，普度众生，白衣阅戒，易使得世人诽谤、诋毁果位菩萨，造下口业。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[佛法在印度的分期弘扬以及三乘教学]]></title>
    <url>%2Ffofafenqi.html</url>
    <content type="text"><![CDATA[一。小乘佛教时期 1. 原始佛教时期 2. 部派佛教时期 二。 大乘佛教时期 三。 密教时期 四。 小乘、大乘、密乘 五。 教外别传 [TOC] 一。小乘佛教时期 佛法在印度传播 重点： 出离红尘，持戒，修四禅八定，寂灭定 见地： 知苦及苦的根源，离情去欲 1. 原始佛教时期 佛初转法轮 - 涅槃，约100年左右 教授重点：小乘佛法 弟子果味：有弟子证得阿罗汉果 2. 部派佛教时期 涅槃后400年 教授重点：小乘教理 弟子果位：已证阿罗汉果的弟子从阿罗汉转向菩萨乘 二。 大乘佛教时期 在印度传播 重点：六度（布施，持戒，忍辱，精进，禅定，般若）；入世行菩萨道，自度度人，圆满功德。 见地：色空不二，心无挂碍。 修证：中观、唯识，证十地菩萨果位 佛涅槃后的第二个500年 教授重点：大乘佛法 弟子果位：有弟子证得菩萨果味 三。 密教时期 印度佛法传播转入密乘 重点：身口意清净，与诸佛相应，得到果位上师和佛菩萨的灌顶。 主张：以欲制欲，以贪治贪，最后实证“这世界一切法与实相不相违背”，即身成佛。 佛涅槃后的第三个500年 教授重点：密法 弟子果位：菩萨乘和金刚乘果味皆有人证得 四。 小乘、大乘、密乘 《法华经》：声闻乘，缘觉乘，菩萨乘 现在：声闻缘觉为小乘，菩萨为大乘，大乘又分显密两宗。两宗在戒律和修证法门上都有很大不同，但是都以大乘见地为指导思想。 三乘：小乘，大乘，密乘 五。 教外别传 小乘，大乘，密乘都是此地修学。称为渐修。 教外别传，以心印心。称为顿悟。 佛嘱托迦叶尊者将以心印心在印度传下去，在二十八祖菩提达摩之时，传至中国，从而形成了禅宗！ 如果我们把成佛比喻成从有生死的此岸到解脱生死的彼岸,那佛法就像一艘从此岸到彼岸的船或航海的灯塔。我们要驾着这艘船，在航灯的照耀下，越过心灵的情天欲海，破除在三界中的种种执着，分别，而后登上成佛的变。那时，此岸彼岸、这艘船以及灯塔对于我们来说也如梦如幻，可以全部放下不要了。此时，我们领悟的就是教外别传的心法。]]></content>
      <categories>
        <category>Buddhism</category>
      </categories>
      <tags>
        <tag>易度门</tag>
        <tag>杨宁</tag>
        <tag>佛学笔记</tag>
        <tag>学习佛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple Notes]]></title>
    <url>%2Fdailynotes.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>DayNotes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Github上传大文件]]></title>
    <url>%2Fgitlfs.html</url>
    <content type="text"><![CDATA[Install git lfs 12# mac上安装brew install git-lfs Git init 必须在git repo中使用git lfs 123git lfs installgit init# git add -A Track file 在push大文件前，要手动track这些文件 123git lfs track "bigfile.suffix"git lfs track "*.zip"git lfs track "repo/" Commit &amp; Push track之后正常git commit push就可以，会自动上传 12git commit -m "commit comment"git push 后记 期待可以不用track，全自动的git lfs.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git lfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next Generation JavaScript]]></title>
    <url>%2Fes6.html</url>
    <content type="text"><![CDATA[Variables 123var: 可以重复命名，全局作用域let: 可变，块级作用域，不能重复命名const: 不可变 Functions 123function myFunc() &#123;&#125;// ES6const myFunc = (parameters) =&gt; &#123;&#125; Modules 1234567891011121314// ./person.jsexport default person// ./utility.jsexport const clean = () =&gt; &#123;&#125;；export const baseData = 10;// ./app.jsimport person from './person.js'import prs from './person.js'// use &#123;&#125; to specifically import modules from js fileimport &#123;baseData&#125; from './utility.js'import &#123;clean&#125; from './utility.js' Class 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 123456789101112131415161718192021222324252627class Human &#123; constructor()&#123; this.gender = 'male'; &#125; printGender()&#123; console.log(this.gender); &#125;&#125;class Person &#123; constructor()&#123; // must be declared explicitly super(); this.name = 'Max'; this.gender = 'female' &#125; printMyName()&#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); ES6 Syntax 12345678class Person &#123; constructor() &#123; this.name = 'James'; &#125; printMyName()&#123; console.log &#125;&#125; Inheritance 子类构造器中必须出现super 因为子类未指定this作用域 12345678910111213141516171819class Human &#123; gender = 'male'; printGender = () =&gt; &#123; console.log(this.gender); &#125;&#125;class Person &#123; name = 'Max'; gender = 'female' printMyName = () =&gt; &#123; console.log(this.name); &#125;&#125;const person = new Person();person.printMyName();person.printGender(); Spread &amp; Rest 1234567891011121314151617181920212223242526272829// use ... to unwrap the old arrayconst newArray = [...oldArray,1,2]// use ... to unwrap the old objectconst newObject - &#123;...oldObject, newProp:5&#125;// use ... to wrap variable length of arguments into one arrayfunciton sortArgs(...args)&#123; return args.sort();&#125;// example:// spread function on arrayconst arr1 = [1,2];const arr2 = [...arr1,3];console.log(arr2);// spread function on objectconst obj1 = &#123;name:'James'&#125;;const obj2 = &#123;...obj1, age:28&#125;;console.log(obj2)// rest function in function argsconst filter = (...args) =&gt;&#123; // === check type and value return args.filter(el =&gt; el === 1);&#125;console.log(filter(1,2,3,1)) Destructuring 123456789// array destructuring[a,b] = ['Hello','Max'];console.log(a);console.log(b);// object destructuring&#123;name&#125; = &#123;name:'Max',age:28&#125;;console.log(name);console.log(age); //undefined; Primitive type and Reference type 1234567891011121314151617const person = &#123; name:'James'&#125;;const secondPerson = person; // reference typeconsole.log(secondPerson);const person = &#123; name: 'James'&#125;;const secondPerson = &#123; ...person, age = 29&#125;;console.log(secondPerson); Array Function 无作用域 Cannot be used as the constructor 1234const numbers = [1,2,3];const doubleNumArray = numbers.map(el =&gt; el*2);console.log(doubleNumArray); Promise 先调用后声明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 基本结构new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:'...'. type:'post', success(res)&#123; resolve(res) &#125;, error(err)&#123; reject(err) &#125; &#125; )&#125; ).then((res)=&gt; console.log('success'),(err)=&gt; console.log("error"))// 链式操作var promiseFn1 = new Promise((resolve,reject) =&gt; &#123; $.ajax( &#123; url:"...", type:'post', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; )&#125; &#125;)var promiseFn2 = new Promise((resolve,reject) =&gt; &#123; $.ajax(&#123; url:"...", type:'get', success(res)&#123; resolve(res); &#125;, error(err)&#123; reject(err); &#125; &#125;) &#125;)// function -&gt; object orientedpromiseFn1.then(()=&gt; &#123; console.log("promise1 success") return promiseFn2 &#125;).then(()=&gt; console.log('promiseFn2 success!'))]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML页面加载过程]]></title>
    <url>%2Fhtmlloading.html</url>
    <content type="text"><![CDATA[页面加载过程 url解析 -&gt; DNS查询 -&gt; 资源请求 -&gt; 浏览器解析 url结构 协议 + 域名 + 端口 + 路径 + 参数 + 哈希 DNS查询 浏览器 - DNS缓存+DNS服务器 dns-fetch: fetch the ip address for some dns and cache 资源请求 browser -&gt; Request Header + 参数 -&gt; 服务器 服务器 -&gt; status + response header + body -&gt; browser 浏览器解析 DOM + JS(优先) -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>Web Development</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux/Unix下查找大于100mb的文件]]></title>
    <url>%2Ffindbigfilelinux.html</url>
    <content type="text"><![CDATA[查找当前目录下大于100mb的所有文件 1find . -type f -size +100M 显示当前目录大小 1du -sh . 显示当前目录或者文件夹的所占磁盘空间 1du -sh * 显示前十个占用空间最大的目录 1du -s * | sort -nr | head]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习面试攻略(国内)]]></title>
    <url>%2Fmlinterview.html</url>
    <content type="text"><![CDATA[机器学习求职攻略(国内) AI岗位招聘流程 公司与岗位盘点 简历的书写和优化 项目与竞赛 机器学习面试考察点 面试题的真实模样 机器学习求职攻略(国内) 根本原则：投其所好 AI岗位招聘流程 秋招 8月到10月底结束战斗 春招 春节过后 跳槽 春节前后人员流动大，难度系数较低，需要相关背景和项目要求 7月底高校抢人 8月初内推筛选 8月底9月初正式校招 公司与岗位盘点 知名企业 腾讯,阿里，金服，滴滴，网易，百度，头条，美团，陆金所 京东，爱奇艺，宜人贷，360，优酷，土豆，快手，抖音，苏宁易购，小米 岗位职能 平台数据处理类：数据清洗，大样本和高维度数据，mapreduce 算法研究应用类：文本挖掘，推荐，排序，风控，图像识别，商业智能，传统行业应用（预测用户行为） 比较热门的：图像视频，计算机视觉，文本的岗位更多一些， 薪资水平 AI&gt;后端&gt;移动=前端 简历的书写和优化 简历： 个人信息，专业技能，项目经历，科研经历 专业技能: 算法(机器学习算法，深度学习算法)，特定方向技能，编程语言，数据分析处理工具库(python,spark) 项目经历：学校项目，数据科学比赛，实习经历 科研经历：论文，学术成就 原则：真实具体-项目背景，用了什么工具，达到什么效果（加评估)，如果优化和改进的？ 项目与竞赛 核心 项目选择和岗位匹配，体现数据技能，还能加点paper就好了 项目名称和背景 项目数据和特点 项目的流程和关键 项目的核心技术及优化手段 竞赛平台：Kaggle, 天池， DataCastle 读别人的成果 写自己的项目 比赛的选择：和岗位背景匹配的竞赛，体现相关技能和技术的比赛，有优异成绩的比赛 比赛的一般思路： 问题分析和抽象 数据分析和发现 数据与特征处理 建模以及优化（在模型还是在数据层面优化） 机器学习面试考察点 主要内容： 常用机器学习算法理解 数据结构算法题 项目实施与优化细节 业务认识与沟通 考察方面： 算法模型和理论基础扎实程度 工程实现能力和编码水平 业务理解和思考深度 沟通和表达能力 备战资源： 代码算法：快排，二分查找； 剑指offer；leetcode 机器学习 李航《统计学习方法》 周志华《机器学习》 Coursera Stanford《Machine Learning》 Coursera台湾大学《机器学习高级技法》 项目：算法，优缺点，数据，特征，优化等等 海量数据处理： Map_Reduce Hadoop spark 面试题的真实模样 统计 统计的基本知识 贝叶斯公式 排列组合题目 数学期望 统计概率题目 算法 对时间复杂度和空间复杂度有基本的认知 排序与二分查找 链表翻转 打印矩阵倒三角 二叉树中任意两个节点的最近公共祖先 上亿的query中周到频率最高的k个 机器学习 机器学习算法-核心 推到逻辑回归算法，loss function L1/L2正则化的区别 决策树如何完成回归 解释随机森林和GBDT 数据幅度缩放和归一化 是偶写SVM间隔对偶的推到 K-MEANS中k如何选取 优化算法 介绍一些bagging和boosting 过拟合和欠拟合发生的原因，如何缓解过拟合]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My Resume (Markdown)]]></title>
    <url>%2Fmdresume.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Resume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Admin Dashboard MRD]]></title>
    <url>%2Fadmindata.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Job</category>
      </categories>
      <tags>
        <tag>MRD</tag>
        <tag>Job</tag>
        <tag>Private</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asynchronous Client - Axios]]></title>
    <url>%2Faxios.html</url>
    <content type="text"><![CDATA[Install Axios Import Axios Promise Async/await Axios API without async/await Request Config/Options Axios Response Object Axios Error Object Axios Instance Install Axios 123npm install ---save axios# oryarn add axios Import Axios 12345// react styleimport axios from "axios";// javascript styleconst axios = require(); Promise 1234567const promise = new Promise((resolve,reject) =&gt; &#123; if (//异步操作成功) &#123; resolve(value); // resolve 是请求成功后的解决方案 &#125; else &#123; reject(value); // reject 是请求失败后的解决方案 &#125;&#125;) async/await async: async ensures that the function returns a promise, and wraps non-promises in it. [强制返回 promise] 12345678910async function f() &#123; return Promise.resolve(1);&#125;f().then(alert); // 1/****** Automatically Wrap ********/async function f() &#123; return 1;&#125;f().then(alert); // 1 await: The keyword await makes JavaScript wait until that promise settles and returns its result. 在async代码框内部，是synchronous执行；在async代码框外部，是asynchronous执行。 123456// works only inside async functions, the following is wrongres = await axios(&#123; url: "https://api.github.com/users/KrunalLathiya", method: "get"&#125;);console.log(res); Wrap the await with async 1234567891011121314151617// run in the chrome consoleconst axios = require("axios");async function getData() &#123; console.log(1); res = await axios(&#123; // await only stuck code afterwards but within the same async block url: "https://api.github.com/users/KrunalLathiya", method: "get" &#125;); console.log(2);&#125;console.log(0);getData();console.log(3);// the result is 0 - 1 - 3 - 2 Conclusion: async: a wrapper of await which forces to return a promise. await to stuck code afterwards which needs a wrapper ( async ) They are twins. Promise + async/await Wrong 1234567891011121314151617181920async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; await pool // put a await before a promise won't work // put a await ebfore a promise's reult works. .query(sql) .then((result) =&gt; &#123; const data = result.rows; final += getSingleTable(table, data); &#125;) .catch((err) =&gt; &#123; console.log(err.stack); &#125;) &#125;&#125; Right 12345678910111213141516async function getDefinitions(tables)&#123; let final = 'definitions:\n'; for (const table of tables) &#123; const sql = `SELECT column_name, is_nullable, data_type FROM information_schema.columns WHERE table_name = '$&#123;table&#125;'`; try &#123; const result = await pool.query(sql); // return result const data = result.rows; final += getSingleTable(table, data); &#125;catch(err) &#123; // error is catched in try/catch block console.log(err.stack); &#125; &#125;&#125; Put a await before a promise won’t work.Put a await ebfore a promise’s result works. Axios API without async/await API methods 1234567axios.get(); // get dataaxios.post(); // insert new dataaxios.put(); // replace oldaxios.delete(); // remove dataaxios.patch(); // send only changed dataaxios.options();axios.head(); Elegant usage 123456789101112131415161718const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://api.github.com/users/KrunalLathiya", &#123; params: &#123; ID: 12345 &#125; &#125;) .then(res =&gt; &#123; console.log(res.data.login); &#125;) .catch(err =&gt; &#123; console.log(err); &#125;);&#125;;getGithubData(); Request Config/Options Authorization (GET) 1234567891011121314const axios = require("axios");getGithubData = () =&gt; &#123; axios .get("https://appdividend.com", &#123; // params: &#123;&#125; .. headers: &#123; Authorization: "Bearer " + "" //the token is a variable which holds the token &#125; &#125;) .then(res =&gt; console.log(res)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Authorization (POST) 123456789101112131415161718192021const axios = require("axios");let data = &#123; email: "test@163.com"&#125;;let config = &#123; headers: &#123; "Content-Type": "application/x-www-form-urlencoded", Authorization: "Bearer " + "token" &#125;, responseType: "blob"&#125;;getGithubData = () =&gt; &#123; axios .post("http://appdivident.com", data, config) .then(res =&gt; console.log(res.data)) .catch(err =&gt; console.log(err));&#125;;getGithubData(); Axios Response Object data: the payload returned from the server. By default, Axios expects JSON and will parse this back into a JavaScript object for you. status: the HTTP code returned from the server. statusText: the HTTP status message returned by the server. headers: all the headers sent back by the server. config: the original request configuration. request: the actual XMLHttpRequest object (when running in a browser). Axios Error Object message: the error message text response: the response obejct (if received) as described in the previous section. request: the actual XMLHttpRequest object (when running in a browser). config: the original request configuration Axios Instance 123456const axios = require("axios");request = axios.create(&#123; baseURL: "http://ec2-13-211-47-167.ap-southeast-2.compute.amazonaws.com:3000"&#125;);request.get("/articles").then(res =&gt; console.log(res.data)); Summary 何时使用async/await,何时使用axios自带API?async/await: 自定义复杂代码块axios API: 简单代码块调用注意： promise本来就是异步的。]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Async</tag>
        <tag>Javascript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Markdown]]></title>
    <url>%2Fmdtutorial.html</url>
    <content type="text"><![CDATA[Font’s Color and Size 字体Alignment 对齐方式Next Notes 便签Tab 选项卡Label 标签Button 按钮Video 视频PDF 电子书Images 图片Tables 表格Footnotes 脚注 Headings 标题 123456# heading level 1## heading level 2### heading level 3#### heading level 4##### heading level 5###### heading level 6 Paragraph 段落 1I really like using Markdown. Space 空格 I really like using Markdown. I think I’ll use it from now on. 1I really like using Markdown. &amp;nbsp; I think I'll use it from now on. Line Breaks 换行 I really like using Markdown. I think I’ll use it from now on. 12I really like using Markdown. &lt;/br&gt; I think I'll use it from now on. Emphasis 加粗 bold text 1**bold text** Italic 斜体 itabllic 1*italic* Bold and Italic 斜体加粗 important 1***important*** Strikethrough 删除线 The world is flat round. 1The world is ~~flat~~ round. Font’s Color and Size 字体 color=green size=3 1&lt;font color=green size=3&gt;color=green size=3 &lt;/font&gt; color=red size=3 1&lt;font color=red size=3&gt;color=red size=3&lt;/font&gt; Background Color 背景色 orange 12345&lt;!-- tr for row --&gt;&lt;!-- td for data --&gt;&lt;!-- th for header --&gt;&lt;!-- t --&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Generate HTML Table MDN HTML Table Alignment 对齐方式 center 诶嘿 1&lt;center&gt;诶嘿&lt;/center&gt; left 诶嘿 1&lt;p align="left"&gt;诶嘿&lt;/p&gt; right 诶嘿 1&lt;p align="right"&gt;诶嘿&lt;/p&gt; Next Notes 便签 Nostyle NoteWelcome to Hexo! 1234&#123;% note %&#125;### Nostyle NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Default NoteWelcome to Hexo! 1234&#123;% note default %&#125;### Default NoteWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Primary NoteWelcome to Hexo! 1234&#123;% note primary %&#125;### Primary Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Info NoteWelcome to Hexo! 1234&#123;% note info %&#125;### Info Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Success NoteWelcome to Hexo! 1234&#123;% note success %&#125;### Success Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Warning NoteWelcome to Hexo! 1234&#123;% note warning %&#125;### Warning Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; Danger NoteWelcome to Hexo! 1234&#123;% note danger %&#125;### Danger Note**Welcome** to [Hexo!](https://hexo.io)&#123;% endnote %&#125; No icon noteNote without icon: note info no-icon123code block in note tagcode block in note tagcode block in note tag 123456789&#123;% note info no-icon %&#125;### No icon noteNote **without** icon: `note info no-icon`&#123;% code %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Codeblock Note123code block in note tagcode block in note tagcode block in note tag 12345678&#123;% note success %&#125;### Codeblock Note&#123;% code lang:javascript %&#125;code block in note tagcode block in note tagcode block in note tag&#123;% endcode %&#125;&#123;% endnote %&#125; Tab 选项卡 选项卡 1选项卡 2选项卡 3123 1234567891011121314152 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**Tab 1** 1&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 2** 2&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**Tab 3** 3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; Label 标签 default primary success info warning danger mark 123456&#123;% label default @default %&#125;&#123;% label primary @primary %&#125;&#123;% label success @success %&#125;&#123;% label info @info %&#125;&#123;% label warning @warning %&#125;&#123;% label danger @danger %&#125; &lt;mark&gt;mark&lt;/mark&gt; Button 按钮 text 1&#123;% btn #, text %&#125; Video 视频 12获取Youtube外链，粘贴即可&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wIHj9bxf5BI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt; PDF 电子书 1&#123;% pdf https://www.cs.cmu.edu/afs/cs.cmu.edu/user/gchen/www/download/java/LearnJava.pdf %&#125; superscript 上标 X2 subscript 下标 X2 Blockquotes 文字引用 Hello blockquotes 1&gt; Hellow Blockquotes Blockquotes with Multiple Paragraphs Line one Line Two Line Three 123&gt; Line one&gt; Line Two&gt; Line Three Nested Blockquotes Line One Nested Line 12&gt; Line One&gt;&gt; Nested Line Blockquotes with other elements The quarterly results look great! lone one line two 12345&gt; ###### The quarterly results look great!&gt;&gt; - lone one&gt; - line two&gt; Ordered Lists 有序列表 a b c 1231. a2. b3. c Nested Ordered Lists a a.a a.b b 12341. a 1. a.a 2. a.b2. b Unordered Lists 无序列表 a a.a a.b b 1234- a - a.a - a.b- b Paragraph in Lists a hello world b 123- a hello world- b Blockquotes in Lists a hello world b TODO LIST 任务列表 markdown [x] finished [ ] unfinished 12- [x] finished- [ ] unfinished hexo 已完成 未完成 1234&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt; Code Blocks 代码块 12345&lt;html&gt;&lt;head&gt;&lt;title&gt; Test &lt;/title&gt;&lt;/head&gt;&lt;/html&gt; Code 代码 Code 1`Code` Images 图片 123![star](https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656)&lt;img style="width: 200px; margin: auto" src="https://p4.ssl.cdn.btime.com/t01ef01c4bf446fc9b7.jpg?size=410x656 "&gt;&lt;/img&gt; Escaping Character 转义 * Hello world 1\* Hello world Tables 表格 Syntax Description Header Title Paragraph Text 1234|Syntax|Description||-|-||Header|Title||Paragraph|Text| Table Alignment 表格对齐 Column A Column B Column C A1 B1 C1 A2 B2 C2 A3 B3 C3 12345|Column A | Column B | Column C||:-|-:|:-:|| A1 | B1 | C1|| A2 | B2 | C2|| A3 | B3 | C3| Horizontal Lines 水平线 1--- Links 链接 http://www.baidu.com Website 1[Website](https://www.google.com) Cancel Link 取消链接 http://www.baidu.com 1`http://www.baidu.com` Footnotes 脚注 simple footnote, [1] 12simple footnote, [^1][^1]: This is the first footnote. This is the first footnote. ↩︎]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Personal Development for Programmers]]></title>
    <url>%2Fcoderpath.html</url>
    <content type="text"><![CDATA[Programming Language: Java, Javascript Computer Network: HTTP, Security Web Framework: Web Development Design Pattern: From code to architecture Data Structures and Algorithms: efficient implementation Industry Project: practical experience]]></content>
      <tags>
        <tag>Programmer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Top CS University Courses]]></title>
    <url>%2Fcourse-recommendation.html</url>
    <content type="text"><![CDATA[Please Enter Token Here Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>CMU好课推荐</tag>
      </tags>
  </entry>
</search>
