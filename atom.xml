<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪中印</title>
  
  <subtitle>心底清静方为道 退步原来是向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekeast.github.io/"/>
  <updated>2019-07-30T03:54:15.437Z</updated>
  <id>https://geekeast.github.io/</id>
  
  <author>
    <name>James Tan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Video Streaming in React</title>
    <link href="https://geekeast.github.io/reactrouterreduxstream.html"/>
    <id>https://geekeast.github.io/reactrouterreduxstream.html</id>
    <published>2019-07-30T03:51:56.000Z</published>
    <updated>2019-07-30T03:54:15.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-router"><a class="markdownIt-Anchor" href="#react-router"></a> React Router</h2><h3 id="dependency"><a class="markdownIt-Anchor" href="#dependency"></a> Dependency</h3><ul><li><p>react-router-dom</p></li><li><p>Router doesn’t care about <code>localhost:3000</code>, it cares about sth behind <code>localhost:3000</code> like <code>/</code></p></li></ul><h3 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h3><ul><li><p><strong>Please see the following code and answer what will happen after enter <code>localhost:3000</code></strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> exact component=&#123;PageOne&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> exact component=&#123;PageTwo&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure><ol><li>The PageOne and PageTwo Component will be both displayed.</li><li>Browser Router will check <code>all</code> the path and matched route will be displayed one by one.</li></ol></li><li><p><strong>Please see the following code and answer what will happen after enter <code>localhost:3000</code></strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span>  component=&#123;Home&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/pageone"</span>  component=&#123;PageOne&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure><ul><li>The PageOne will be displayed.</li></ul></li></ul><a id="more"></a><ul><li><strong>How React Router match path?</strong><ol><li>For example. for address <code>localhost:3000/page/5</code>, and we have path <code>/</code>, <code>/page</code>, <code>/page/5</code>.</li><li>The History Obejct will extract path from address as <code>/page/5</code></li><li>Then will run this function <code>'/page/5'.contains('/')</code>,<code>'/page/5'.contains('/page')</code>,<code>'/page/5'.contains('/page/5')</code></li><li>And will return <code>all</code> true, so all the path will be matched and the respective components will be returned.</li></ol></li><li><strong>Tell us the difference between using <code>exact</code> and not using <code>exact</code></strong><ol><li>using <code>exact</code> will call something like <code>===</code></li><li>not using <code>exact</code> will call something like <code>contains</code></li></ol></li><li><strong>Why is it a bad practice to use anchor tag in React to redirect to other page within the website?</strong><ol><li>This will cause a new request to the server, which is Network expensive and unnecessary.</li><li>It’s a good practice to use <code>&lt;Link&gt;</code> component from <code>react-router-dom</code>. <code>It's just about showing and hiding different components.</code></li><li>Both way will cause the re-render of component, the difference is the <code>networking</code>.</li></ol></li><li><strong>What will happen if no path is matched in traditional server vs React Router?</strong><ol><li>In traditional server, the default behaviour is to return a 404 page.</li><li>In React Router, the default to to return <code>index.html</code>.</li></ol></li><li><strong>Components like <code>Navigation</code> bar, should you put it inside <code>BrowserRouter</code>, why?</strong><br>1.These are common things you want to display to every page.<br>2.There are <strong>two</strong> ways to solve this problem:<br>3.Outside the router: this works but you <code>cannot</code> use <code>&lt;Link&gt;</code> within the common components.<br>4.Inside the router: this works and you can also use <code>&lt;Link&gt;</code></li><li><strong>Why we use History Object? And How?</strong></li><li>Because we want to manipulate the browser programatically</li><li>Create our own <code>history</code> object as params and use with <code>Router</code> from ‘react-router-dom’ rather than <code>BrowserRouter</code></li><li><strong>Why we need to isolate component when using React-router?</strong><ul><li>For example, <code>edit</code> Streams depends on the state of <code>all</code> streams.</li><li>We need to isolate the streamEdit router component and the streamList router component</li><li>Otherwise, it will cause some error <code>sometimes</code>.</li></ul></li></ul><h3 id="3-routers"><a class="markdownIt-Anchor" href="#3-routers"></a> 3 Routers</h3><table><thead><tr><th>Name</th><th>Column B</th><th>Column C</th></tr></thead><tbody><tr><td>BrowserRouter</td><td><code>localhost:3000/page</code></td><td>add path after Top Level Domain</td></tr><tr><td>HashRouter</td><td><code>localhost:3000/#/page</code></td><td>add a # between TLD and path</td></tr><tr><td>MemoryRouter</td><td><code>localhost:3000</code></td><td>add nothing after TLD</td></tr></tbody></table><h3 id="google-oauth"><a class="markdownIt-Anchor" href="#google-oauth"></a> Google OAuth</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvcHJvdG9jb2xzL2dvb2dsZXNjb3Blcw==" title="https://developers.google.com/identity/protocols/googlescopes">OAuth 2.0 Scopes for Google APIs<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbQ==" title="https://console.developers.google.com">Google Console<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvc2lnbi1pbi93ZWIvcmVmZXJlbmNlI2dhcGlhdXRoMmluaXRwYXJhbXM=" title="https://developers.google.com/identity/sign-in/web/reference#gapiauth2initparams">gapi docs<i class="fa fa-external-link"></i></span></p><h3 id="configure-redux-dev-tool"><a class="markdownIt-Anchor" href="#configure-redux-dev-tool"></a> Configure Redux Dev Tool</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Provider store=&#123;createStore(reducers, composeEnhancers(applyMiddleware(thunk)))&#125;&gt;</span><br><span class="line">&lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">document.getElementById('root')</span></span><br></pre></td></tr></table></figure><h3 id="redux-form"><a class="markdownIt-Anchor" href="#redux-form"></a> <span class="exturl" data-url="aHR0cHM6Ly9yZWR1eC1mb3JtLmNvbS84LjIuMi8=" title="https://redux-form.com/8.2.2/">Redux Form<i class="fa fa-external-link"></i></span></h3><ul><li>a convenient reducer for form component</li><li>A convenient solution for communication between views and redux state.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Field, reduxForm &#125; <span class="keyword">from</span> <span class="string">'redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">renderError = <span class="function">(<span class="params">&#123; error, touched &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (error &amp;&amp; touched) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">"ui error message"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"header"</span>&gt; &#123;error&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// meta is connected with validate function</span></span><br><span class="line">renderInput = <span class="function">(<span class="params">&#123; input, label, meta &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> className = <span class="string">`field <span class="subst">$&#123;meta.error &amp;&amp; meta.touched ? <span class="string">'error'</span> : <span class="string">''</span>&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=&#123;className&#125;&gt;</span><br><span class="line">&lt;label&gt;&#123;label&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input &#123;...input&#125; autoComplete="off" /</span>&gt;</span><br><span class="line">&#123;<span class="keyword">this</span>.renderError(meta)&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">onSubmit = (formValues) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">this.props.onSubmit(formValues);</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">render() &#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ magic props with handleSubmit method</span></span><br><span class="line"><span class="regexp">&lt;form onSubmit=&#123;this.props.handleSubmit(this.onSubmit)&#125; className="ui form error"&gt;</span></span><br><span class="line"><span class="regexp">&#123;/</span>* user input field *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">&lt;Field name="title" component=&#123;this.renderInput&#125; label="Enter Title" /</span>&gt;</span><br><span class="line">&lt;Field name=<span class="string">"description"</span> component=&#123;<span class="keyword">this</span>.renderInput&#125; label=<span class="string">"Enter Description"</span> /&gt;</span><br><span class="line">&lt;button className=<span class="string">"ui button primary"</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// every time you input will run this function</span></span><br><span class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">formValues</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> errors = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (!formValues.title) &#123;</span><br><span class="line">errors.title = <span class="string">'You must enter a title'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!formValues.description) &#123;</span><br><span class="line">errors.description = <span class="string">'You must enter a description'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reduxForm(&#123; <span class="attr">form</span>: <span class="string">'streamForm'</span>, validate &#125;)(StreamForm);</span><br></pre></td></tr></table></figure><h3 id="convert-object-to-array"><a class="markdownIt-Anchor" href="#convert-object-to-array"></a> Convert Object to Array</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> streams = <span class="built_in">Object</span>.values(object);</span><br></pre></td></tr></table></figure><h3 id="convert-array-to-object"><a class="markdownIt-Anchor" href="#convert-array-to-object"></a> Convert Array to Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> streams = _.mapKeys(array,<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure><h3 id="loadsh-mapkeys"><a class="markdownIt-Anchor" href="#loadsh-mapkeys"></a> Loadsh <code>mapKeys()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will take '' as the new key and return as an object</span></span><br><span class="line">mapKeys(iterable,(v,k)=&gt;&#123;<span class="keyword">return</span> <span class="string">''</span>&#125;)</span><br><span class="line"><span class="comment">// this will take v[attr_name] as the new key and retur as an object</span></span><br><span class="line">mapKeys(iterable, <span class="string">'attr_name'</span>)</span><br><span class="line"><span class="comment">// equals to </span></span><br><span class="line">mapKeys(iterable, (v,k) =&gt; v[<span class="string">'attr_name'</span>])</span><br></pre></td></tr></table></figure><h3 id="view-update-flow-chart"><a class="markdownIt-Anchor" href="#view-update-flow-chart"></a> View Update Flow Chart</h3><img style="width: 80%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/WX20190729-160600%402x.png"><h3 id="history-object"><a class="markdownIt-Anchor" href="#history-object"></a> History Object</h3><ul><li>It’s more flexible to manage your own history object rather than useing the BrowserRouter’s</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// history.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">'history'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createBrowserHistory();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// code code</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">'../history'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"ui container"</span>&gt;</span><br><span class="line">         <span class="comment">// core code</span></span><br><span class="line">&lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/"</span> exact component=&#123;StreamList&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="react-portal"><a class="markdownIt-Anchor" href="#react-portal"></a> React Portal</h3><ul><li>Why we need to use react portal?<ul><li>If we want to use modal, we’d better take it as a child of <code>body</code> element with a <code>z-index</code> value</li><li>Portal is a convenient way to <code>modify</code> the <code>parent</code> component of an existing component.</li></ul></li></ul><h3 id="fragment"><a class="markdownIt-Anchor" href="#fragment"></a> Fragment</h3><ul><li>Why we need to use React Fragment?<ul><li>Some <code>div</code> wrapper will break the styling rules</li><li><code>Fragment</code> is like <code>div</code>, but doesn’t produce any <code>html</code> tags</li></ul></li></ul><h3 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> Switch</h3><ul><li><p>What is switch? What is it used for?</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will show StreamCreate and StreamShow together</span></span><br><span class="line"><span class="comment">// 同级变量和定量重合问题</span></span><br><span class="line">&lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/new"</span> exact component=&#123;StreamCreate&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/:id"</span> exact component=&#123;StreamShow&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Solution</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只会渲染第一个匹配到的路径</span></span><br><span class="line">&lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/new"</span> exact component=&#123;StreamCreate&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/:id"</span> exact component=&#123;StreamShow&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure></li><li><p>Conclusion:</p><ul><li><p>Different Lengths: always with <strong><code>exact</code></strong>: order doesn’t matter but for good format - from <strong><code>Long</code></strong> to <strong><code>Short</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/streams/"</span> exact component=&#123;StreamShow&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/"</span> exact component=&#123;StreamList&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>Same Length: always wrapped with <strong><code>Switch</code></strong>: from <strong><code>Fixed</code></strong> to <strong><code>Variable</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/new"</span> exact component=&#123;StreamShow&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/streams/:id"</span> exact component=&#123;StreamList&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="project-link"><a class="markdownIt-Anchor" href="#project-link"></a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtFYXN0L3JlZHV4LXN0cmVhbS1yb3V0ZXI=" title="https://github.com/GeekEast/redux-stream-router">Project Link<i class="fa fa-external-link"></i></span></h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react-router&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#react-router&quot;&gt;&lt;/a&gt; React Router&lt;/h2&gt;
&lt;h3 id=&quot;dependency&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dependency&quot;&gt;&lt;/a&gt; Dependency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;react-router-dom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Router doesn’t care about &lt;code&gt;localhost:3000&lt;/code&gt;, it cares about sth behind &lt;code&gt;localhost:3000&lt;/code&gt; like &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;question&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#question&quot;&gt;&lt;/a&gt; Question&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Please see the following code and answer what will happen after enter &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Route path=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; exact component=&amp;#123;PageOne&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Route path=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; exact component=&amp;#123;PageTwo&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/BrowserRouter&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;The PageOne and PageTwo Component will be both displayed.&lt;/li&gt;
&lt;li&gt;Browser Router will check &lt;code&gt;all&lt;/code&gt; the path and matched route will be displayed one by one.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Please see the following code and answer what will happen after enter &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Route path=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;  component=&amp;#123;Home&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Route path=&lt;span class=&quot;string&quot;&gt;&quot;/pageone&quot;&lt;/span&gt;  component=&amp;#123;PageOne&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/BrowserRouter&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;The PageOne will be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="React" scheme="https://geekeast.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://geekeast.github.io/tags/Redux/"/>
    
      <category term="Router" scheme="https://geekeast.github.io/tags/Router/"/>
    
      <category term="Streaming Video" scheme="https://geekeast.github.io/tags/Streaming-Video/"/>
    
  </entry>
  
  <entry>
    <title>RUD in React</title>
    <link href="https://geekeast.github.io/arrayoperationinreact.html"/>
    <id>https://geekeast.github.io/arrayoperationinreact.html</id>
    <published>2019-07-24T01:22:02.000Z</published>
    <updated>2019-07-29T02:19:55.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h3><table><thead><tr><th style="text-align:center">Manipulation</th><th style="text-align:center">Bad Practice</th><th style="text-align:center">Good Practice</th></tr></thead><tbody><tr><td style="text-align:center"><code>Add</code></td><td style="text-align:center"><code>state.push('a')</code></td><td style="text-align:center"><code>[...state,'hi']</code></td></tr><tr><td style="text-align:center"><code>Remove</code></td><td style="text-align:center"><code>state.pop()</code></td><td style="text-align:center"><code>state.filter(..)</code></td></tr><tr><td style="text-align:center"><code>Update</code></td><td style="text-align:center"><code>state[0]='hi'</code></td><td style="text-align:center"><code>state.map(...)</code></td></tr></tbody></table><h3 id="object"><a class="markdownIt-Anchor" href="#object"></a> Object</h3><table><thead><tr><th style="text-align:center">Manipulation</th><th style="text-align:center">Bad Practice</th><th style="text-align:center">Good Practice</th></tr></thead><tbody><tr><td style="text-align:center"><code>Add</code></td><td style="text-align:center"><code>state.age=30</code></td><td style="text-align:center"><code>{...state,age:30}</code></td></tr><tr><td style="text-align:center"><code>Remove</code></td><td style="text-align:center"><code>delete state.name</code></td><td style="text-align:center"><code>{...state,age:undefined}</code> <code>_.omit(state,'age')</code></td></tr><tr><td style="text-align:center"><code>Update</code></td><td style="text-align:center"><code>state.name='Sam'</code></td><td style="text-align:center"><code>{...state,name:'Sam'}</code></td></tr></tbody></table><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;array&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#array&quot;&gt;&lt;/a&gt; Array&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Manipulation&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Bad Practice&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Good Practice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.push(&#39;a&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;[...state,&#39;hi&#39;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Remove&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.pop()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.filter(..)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Update&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state[0]=&#39;hi&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.map(...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;object&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#object&quot;&gt;&lt;/a&gt; Object&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Manipulation&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Bad Practice&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Good Practice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.age=30&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;{...state,age:30}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Remove&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;delete state.name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;{...state,age:undefined}&lt;/code&gt; &lt;code&gt;_.omit(state,&#39;age&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Update&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;state.name=&#39;Sam&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;{...state,name:&#39;Sam&#39;}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="React" scheme="https://geekeast.github.io/tags/React/"/>
    
      <category term="Array" scheme="https://geekeast.github.io/tags/Array/"/>
    
      <category term="Object" scheme="https://geekeast.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>Redux Thunk</title>
    <link href="https://geekeast.github.io/reduxthunk.html"/>
    <id>https://geekeast.github.io/reduxthunk.html</id>
    <published>2019-07-23T06:03:22.000Z</published>
    <updated>2019-07-24T13:06:52.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h2><ol><li>How to make <code>asynchronous</code> call in Redux React App?<ul><li>the asynchronous request should be called within the <code>action creator</code> in the <code>componentDidMount()</code></li></ul></li><li>I did call the asynchronous request call in action creator, but there two bugs: a. action should be plain objects b. use middleware. What’s the reason?<ul><li>a. <code>async</code> will let the action creator return sth not a plain object. Debug to use <code>babeljs.io</code></li><li>b. using <code>promise</code> will also not solve the problem because you have not got the data before dispatching it to store.</li></ul></li></ol><h3 id="bad-practice"><a class="markdownIt-Anchor" href="#bad-practice"></a> Bad Practice</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPosts = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="comment">// bad approach</span></span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>);</span><br><span class="line">    <span class="keyword">const</span> posts = data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// this is not the compiled code, go to babeljs.io</span></span><br><span class="line">    <span class="comment">// doesn't return a plain object because of the `async` </span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">type: <span class="string">'FETCH_POSTS'</span>,</span><br><span class="line">payload: posts</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>What’s the right way to do the asynchorous call?<ul><li>use Middleware like Redux Thunk</li></ul></li></ol><h3 id="middleware-way"><a class="markdownIt-Anchor" href="#middleware-way"></a> Middleware Way</h3><ul><li>Middleware allows your action creator to return a <code>function</code> or an <code>action</code></li><li>If you return a <code>function</code> by an action creator, the middleware will automatically call the function</li><li>If you return an <code>action</code>, it acts like the middleware doesn’t do anything.</li><li>Thunk is used to do asynchronous call before the action is arrived at store.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thunk way</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPosts = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">async</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>);</span><br><span class="line">    <span class="comment">// manually dispatch to store after get right data</span></span><br><span class="line">dispatch(&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>, <span class="attr">payload</span>: data &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="what-is-middleware"><a class="markdownIt-Anchor" href="#what-is-middleware"></a> What is middleware?</h3><ul><li>Middleware is added between <code>reducers</code> and <code>dispatch()</code></li><li>could <code>STOP</code>, <code>MODIFY</code> actions</li><li>Redux-thunk is a middleware to deal with async issues of React.</li></ul><h3 id="memoization"><a class="markdownIt-Anchor" href="#memoization"></a> Memoization</h3><ul><li>is a way to cache <code>function</code></li><li>There are many ways to cache.</li></ul><table><thead><tr><th>Name</th><th>Time</th><th>Where</th></tr></thead><tbody><tr><td>Function cache</td><td>at the same time</td><td>Local</td></tr><tr><td>HTTP cache</td><td>at different time</td><td>Server</td></tr></tbody></table><h4 id="entrance"><a class="markdownIt-Anchor" href="#entrance"></a> Entrance</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    fetch(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Made a request!"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> memoizedGetUser = _.memoize(getUser);</span><br><span class="line">memoizedGetUser(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="wrong"><a class="markdownIt-Anchor" href="#wrong"></a> Wrong!</h4><ul><li>same id, same function, rather than the action itself!</li><li>so same request will still be called multiple times.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchUser = _.memoize(<span class="function">(<span class="params">id</span>)=&gt;</span><span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> ...id;</span><br><span class="line">    dispatch(...);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="wrong-again"><a class="markdownIt-Anchor" href="#wrong-again"></a> Wrong Again!</h4><ul><li>everytime we call fetchUser, we create a new function.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchUser = <span class="function">(<span class="params">id</span>) =&gt;</span> _.memoize(<span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reponse = <span class="keyword">await</span> ...id;</span><br><span class="line">    dispatch(...);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="right"><a class="markdownIt-Anchor" href="#right"></a> Right!!!</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private functions you don't want other programmer to modify</span></span><br><span class="line"><span class="keyword">const</span> _fetchUser = _.memoize(<span class="keyword">async</span> (id, dispatch) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> ...id;</span><br><span class="line">    dispatch(...);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> fetchUser = <span class="function"><span class="params">id</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">    _fetchUser(id, dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="the-simpler-way-even-doesnt-work"><a class="markdownIt-Anchor" href="#the-simpler-way-even-doesnt-work"></a> The simpler way even doesn’t work …</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchUser = <span class="function">(<span class="params">id</span>) =&gt;</span> (dispatch) =&gt;</span><br><span class="line">_.memoize(<span class="keyword">async</span> (id, dispatch) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://jsonplaceholder.typicode.com/users/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">dispatch(&#123; <span class="attr">type</span>: <span class="string">'FETCH_USER'</span>, <span class="attr">payload</span>: data &#125;);</span><br><span class="line">&#125;)(id, dispatch);</span><br></pre></td></tr></table></figure><h4 id="conclusion-_"><a class="markdownIt-Anchor" href="#conclusion-_"></a> Conclusion @_@</h4><ul><li>always make <code>_.memoize()</code> inside a wrapper function like <code>_fetchUser()</code> if you want to pass <code>parameters</code> into it.</li></ul><h3 id="when-do-you-need-to-use-await"><a class="markdownIt-Anchor" href="#when-do-you-need-to-use-await"></a> When do you need to use <code>await</code>?</h3><ul><li>The current request depends on the response of last request.</li></ul><h3 id="related-projects"><a class="markdownIt-Anchor" href="#related-projects"></a> Related Projects</h3><h2 id="github"><a class="markdownIt-Anchor" href="#github"></a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtFYXN0L3JlZHV4LWJsb2c=" title="https://github.com/GeekEast/redux-blog">Github<i class="fa fa-external-link"></i></span></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;question&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#question&quot;&gt;&lt;/a&gt; Question&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;How to make &lt;code&gt;asynchronous&lt;/code&gt; call in Redux React App?
&lt;ul&gt;
&lt;li&gt;the asynchronous request should be called within the &lt;code&gt;action creator&lt;/code&gt; in the &lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I did call the asynchronous request call in action creator, but there two bugs: a. action should be plain objects b. use middleware. What’s the reason?
&lt;ul&gt;
&lt;li&gt;a. &lt;code&gt;async&lt;/code&gt; will let the action creator return sth not a plain object. Debug to use &lt;code&gt;babeljs.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b. using &lt;code&gt;promise&lt;/code&gt; will also not solve the problem because you have not got the data before dispatching it to store.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;bad-practice&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#bad-practice&quot;&gt;&lt;/a&gt; Bad Practice&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fetchPosts = &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// bad approach&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; data &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; axios.get(&lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; posts = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// this is not the compiled code, go to babeljs.io&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// doesn&#39;t return a plain object because of the `async` &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		payload: posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;What’s the right way to do the asynchorous call?
&lt;ul&gt;
&lt;li&gt;use Middleware like Redux Thunk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;middleware-way&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#middleware-way&quot;&gt;&lt;/a&gt; Middleware Way&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Middleware allows your action creator to return a &lt;code&gt;function&lt;/code&gt; or an &lt;code&gt;action&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you return a &lt;code&gt;function&lt;/code&gt; by an action creator, the middleware will automatically call the function&lt;/li&gt;
&lt;li&gt;If you return an &lt;code&gt;action&lt;/code&gt;, it acts like the middleware doesn’t do anything.&lt;/li&gt;
&lt;li&gt;Thunk is used to do asynchronous call before the action is arrived at store.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// thunk way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fetchPosts = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (dispatch, getState) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; data &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; axios.get(&lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// manually dispatch to store after get right data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch(&amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;payload&lt;/span&gt;: data &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="React" scheme="https://geekeast.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://geekeast.github.io/tags/Redux/"/>
    
      <category term="Thunk" scheme="https://geekeast.github.io/tags/Thunk/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Flux</title>
    <link href="https://geekeast.github.io/facebookflux.html"/>
    <id>https://geekeast.github.io/facebookflux.html</id>
    <published>2019-07-22T23:49:11.000Z</published>
    <updated>2019-07-23T00:03:21.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="main-structure"><a class="markdownIt-Anchor" href="#main-structure"></a> Main Structure</h3><ul><li>View(视图层)</li><li>Action(动作)：视图层发出的动作指令</li><li>Dispatcher(派发器): 接收Actions，执行callback</li><li>Store(数据层): 存储state</li></ul><img style="width:80%; margin:auto" src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png"><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;main-structure&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#main-structure&quot;&gt;&lt;/a&gt; Main Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;View(视图层)&lt;/li&gt;
&lt;li&gt;Action(动作)：视图层发出的动作指令&lt;/li&gt;
&lt;li&gt;Dispatcher(派发器): 接收Actions，执行callback&lt;/li&gt;
&lt;li&gt;Store(数据层): 存储state&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&quot;width:80%; margin:auto&quot; src=&quot;http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png&quot;&gt;
    
    </summary>
    
      <category term="Architecture" scheme="https://geekeast.github.io/categories/Architecture/"/>
    
    
      <category term="Architecture" scheme="https://geekeast.github.io/tags/Architecture/"/>
    
      <category term="Flux" scheme="https://geekeast.github.io/tags/Flux/"/>
    
      <category term="FaceBook" scheme="https://geekeast.github.io/tags/FaceBook/"/>
    
  </entry>
  
  <entry>
    <title>React Redux</title>
    <link href="https://geekeast.github.io/react-redux.html"/>
    <id>https://geekeast.github.io/react-redux.html</id>
    <published>2019-07-22T04:03:59.000Z</published>
    <updated>2019-07-24T07:11:44.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="key-points"><a class="markdownIt-Anchor" href="#key-points"></a> Key Points</h3><table><thead><tr><th>Name</th><th>What</th><th>Where</th><th>Analogy</th><th>Example</th></tr></thead><tbody><tr><td><strong>Action</strong></td><td>Payloads send from view to store.</td><td>View</td><td>HTTP Post Body</td><td><code>{ type: 'SONG_SELECTED', payload: &quot;Hello world&quot; }</code></td></tr><tr><td><strong>Action Creator</strong></td><td>Function to generate actions</td><td>View</td><td>Wrapper / <strong>Decorator</strong></td><td><code>(song) =&gt; {type:'SONG_SELECTED', payload: song}</code></td></tr><tr><td><code>dispatch()</code></td><td>Function that sends actions to store</td><td>View</td><td>gmail()</td><td><code>dispatch(action)</code></td></tr><tr><td><strong>State</strong></td><td>Data needs to be centralized</td><td>Store</td><td>Static Variable in Java</td><td></td></tr><tr><td><strong>Reducer</strong></td><td>Function to update state according to action</td><td>Store</td><td>Setter method in Java</td><td><code>(selectSong = null, action) =&gt; {if (action.type === 'SONG_SELECTED') return action.payload;} return selectedSong</code></td></tr><tr><td><strong>Store</strong></td><td>The place to store state and reducer</td><td>Global</td><td>Bank</td><td><code>createStore(combinedReducers)</code></td></tr><tr><td><strong>Middleware</strong></td><td>Function that get called with <code>every</code> action we dispatch</td><td>Between Reducer and <code>dispatch()</code></td><td>Gas Station</td><td>Redux Thunk</td></tr></tbody></table><h3 id="architecture"><a class="markdownIt-Anchor" href="#architecture"></a> Architecture</h3><img style="width:100%; margin:auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/reduxarchitect.png"><h3 id="essence"><a class="markdownIt-Anchor" href="#essence"></a> Essence</h3><img style="width:100%; margin:auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/WX20190724-163943%402x.png"> <a id="more"></a><h3 id="when-to-use-redux"><a class="markdownIt-Anchor" href="#when-to-use-redux"></a> When to use Redux</h3><ul><li>Different users have different ways to use.</li><li>Colloboration between users.</li><li>Intense commnunication wtih servers or with websocket.</li><li>View need to get data from multiple sources.</li></ul><blockquote><p>Summaruy: the same state is going to be used by many different views, then it’s better to put it into redux.</p></blockquote><h3 id="main-structure"><a class="markdownIt-Anchor" href="#main-structure"></a> Main Structure</h3><ol><li><strong>&quot;What happened in the view?&quot;</strong></li><li><strong>&quot;How to send actions to store?&quot;</strong></li><li><strong>&quot;How to update the store in response to actions?&quot;</strong></li></ol><ul><li><strong>Actions</strong>: payloads send from view to store.</li><li><code>dispatch()</code>: function to send action from view to store</li><li><strong>Reducers</strong>: specify how state changes in response to actions sent to the store. Reducer review <code>current state</code> and <code>action</code> as parameters.</li><li><strong>Store</strong>: hold state; return state <code>getState()</code>; update state <code>dispatch(action)</code>, register listener <code>subscribe(listener)</code></li></ul><h3 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h3><ul><li><strong>How the redux match between reducer and action?</strong><ul><li>It happens internal within the store.</li><li>All the reducers will check the action type (<strong>Iteration</strong>)</li></ul></li><li><strong>Can we deal with same type of actions in different reducers?</strong><ul><li>Sure!</li><li><strong>All</strong> these reducers will be triggerred when the action come.</li></ul></li><li><strong>Why we need use action creator?</strong><ul><li>The reason is like whey you use decorator or wrapper function.</li><li><strong>Reason one</strong>: trigger in the future.</li><li><strong>Reason two</strong>: pass external parameters</li></ul></li><li><strong>Why we call it reducer?</strong><ul><li>Usage of state and the state itself is similar to <code>many-to-one</code> relationship.</li><li>Reducer is used to reduce manipulation to update state.</li></ul></li><li><strong>What is difference bewtween <code>ownProps</code> and <code>ReduxProps</code>?</strong><ul><li><code>ownProps</code> is props passed from <code>parent components</code>.</li><li><code>ReduxProps</code> is props passed from <code>redux</code>.</li><li><code>ownProps</code> is used to pass <code>normal</code> props to <code>mapStateToProps</code> function</li></ul></li></ul><h3 id="important"><a class="markdownIt-Anchor" href="#important"></a> Important</h3><h4 id="reducers"><a class="markdownIt-Anchor" href="#reducers"></a> Reducers</h4><ul><li>The key of reducers in the combinedReducers is actually the name of one state.</li><li>The key of reducers must be the same with the return name in the specifc reducer.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mark</span></span><br><span class="line"><span class="keyword">const</span> userReducers = <span class="function">(<span class="params">users = [], action</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'FETCH_USER'</span>:</span><br><span class="line"><span class="keyword">return</span> [ ...users, action.payload ];</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// mark</span></span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    <span class="comment">// mark</span></span><br><span class="line">users: userReducers</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="action-creators"><a class="markdownIt-Anchor" href="#action-creators"></a> Action creators</h4><ul><li>Case: when you pass { actionCreator } to connect()</li><li>you need call it actionCreator by <code>this.props.actionCreator()</code> rather than <code>actionCreator()</code></li><li>Reason: because you doesn’t dispatch the action creator in <code>actionCreator()</code> way. But the <code>this.props.actionCreator</code> is will be automatically <strong>dispatched</strong> by connect function</li></ul><h3 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDkvcmVkdXhfdHV0b3JpYWxfcGFydF9vbmVfYmFzaWNfdXNhZ2VzLmh0bWw=" title="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html">阮一峰：Redux 入门教程（一）：基本用法<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lZ2doZWFkLmlvL2NvdXJzZXMvZ2V0dGluZy1zdGFydGVkLXdpdGgtcmVkdXg=" title="https://egghead.io/courses/getting-started-with-redux">Video: Redux Basics<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lZ2doZWFkLmlvL2NvdXJzZXMvc3RhcnQtbGVhcm5pbmctcmVhY3Q=" title="https://egghead.io/courses/start-learning-react">Video: Redux Advanced<i class="fa fa-external-link"></i></span></p><h3 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> Demo</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtFYXN0L1JlYWN0LVJlZHV4LVNvbmc=" title="https://github.com/GeekEast/React-Redux-Song">Github<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;key-points&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#key-points&quot;&gt;&lt;/a&gt; Key Points&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;What&lt;/th&gt;
&lt;th&gt;Where&lt;/th&gt;
&lt;th&gt;Analogy&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Payloads send from view to store.&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;HTTP Post Body&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ type: &#39;SONG_SELECTED&#39;, payload: &amp;quot;Hello world&amp;quot; }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Action Creator&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Function to generate actions&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;Wrapper / &lt;strong&gt;Decorator&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(song) =&amp;gt; {type:&#39;SONG_SELECTED&#39;, payload: song}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Function that sends actions to store&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;gmail()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;State&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Data needs to be centralized&lt;/td&gt;
&lt;td&gt;Store&lt;/td&gt;
&lt;td&gt;Static Variable in Java&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reducer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Function to update state according to action&lt;/td&gt;
&lt;td&gt;Store&lt;/td&gt;
&lt;td&gt;Setter method in Java&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(selectSong = null, action) =&amp;gt; {if (action.type === &#39;SONG_SELECTED&#39;) return action.payload;} return selectedSong&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Store&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The place to store state and reducer&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;Bank&lt;/td&gt;
&lt;td&gt;&lt;code&gt;createStore(combinedReducers)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Middleware&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Function that get called with &lt;code&gt;every&lt;/code&gt; action we dispatch&lt;/td&gt;
&lt;td&gt;Between Reducer and &lt;code&gt;dispatch()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gas Station&lt;/td&gt;
&lt;td&gt;Redux Thunk&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;architecture&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#architecture&quot;&gt;&lt;/a&gt; Architecture&lt;/h3&gt;
&lt;img style=&quot;width:100%; margin:auto&quot; src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/reduxarchitect.png&quot;&gt;
&lt;h3 id=&quot;essence&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#essence&quot;&gt;&lt;/a&gt; Essence&lt;/h3&gt;
&lt;img style=&quot;width:100%; margin:auto&quot; src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/WX20190724-163943%402x.png&quot;&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="React" scheme="https://geekeast.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://geekeast.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Pitfalls for IT Interview</title>
    <link href="https://geekeast.github.io/usaitinterview.html"/>
    <id>https://geekeast.github.io/usaitinterview.html</id>
    <published>2019-07-18T03:55:36.000Z</published>
    <updated>2019-07-18T04:12:44.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Interview = Practice + Performance</p></blockquote><h3 id="practice刷题"><a class="markdownIt-Anchor" href="#practice刷题"></a> Practice(刷题)</h3><ul><li>Issues: many leetcode, no difference</li><li>Solution(精刷):<ul><li>Understand problems thoroughly(&gt;=30mins)<ul><li><strong>associate</strong> other problems</li><li>start from <strong>brute force</strong> solution</li></ul></li><li>Review, Summary and Association<ul><li>What <strong>algorithms</strong> of solutions</li><li><strong>related</strong> problems and <strong>difference</strong></li></ul></li><li><strong>Mark</strong> and Rewrite again.</li></ul></li></ul><h3 id="performance表现"><a class="markdownIt-Anchor" href="#performance表现"></a> Performance(表现)</h3><ul><li>Issues: feeling good, no offers</li><li>Solution:<ul><li>make the interviewer comfortable</li><li>Communication is very important as a colleague<ul><li>Ask questions and make problems clear</li><li>don’t just bury your head and no speaking</li><li>You need to perform even you saw the question before.</li></ul></li></ul></li><li>Attitude:<ul><li>Take the interviewee as your colleague.</li><li>you are doing a product, not just a problem.</li></ul></li></ul><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Interview = Practice + Performance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;practice刷题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#practice刷题&quot;&gt;&lt;/a&gt; Practice(刷题)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Issues: many leetcode, no difference&lt;/li&gt;
&lt;li&gt;Solution(精刷):
&lt;ul&gt;
&lt;li&gt;Understand problems thoroughly(&amp;gt;=30mins)
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;associate&lt;/strong&gt; other problems&lt;/li&gt;
&lt;li&gt;start from &lt;strong&gt;brute force&lt;/strong&gt; solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review, Summary and Association
&lt;ul&gt;
&lt;li&gt;What &lt;strong&gt;algorithms&lt;/strong&gt; of solutions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;related&lt;/strong&gt; problems and &lt;strong&gt;difference&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark&lt;/strong&gt; and Rewrite again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;performance表现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#performance表现&quot;&gt;&lt;/a&gt; Performance(表现)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Issues: feeling good, no offers&lt;/li&gt;
&lt;li&gt;Solution:
&lt;ul&gt;
&lt;li&gt;make the interviewer comfortable&lt;/li&gt;
&lt;li&gt;Communication is very important as a colleague
&lt;ul&gt;
&lt;li&gt;Ask questions and make problems clear&lt;/li&gt;
&lt;li&gt;don’t just bury your head and no speaking&lt;/li&gt;
&lt;li&gt;You need to perform even you saw the question before.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attitude:
&lt;ul&gt;
&lt;li&gt;Take the interviewee as your colleague.&lt;/li&gt;
&lt;li&gt;you are doing a product, not just a problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Job" scheme="https://geekeast.github.io/categories/Job/"/>
    
    
      <category term="Job" scheme="https://geekeast.github.io/tags/Job/"/>
    
      <category term="Interview" scheme="https://geekeast.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>How to prepare SDE resume in America?</title>
    <link href="https://geekeast.github.io/usaitresume.html"/>
    <id>https://geekeast.github.io/usaitresume.html</id>
    <published>2019-07-18T03:18:10.000Z</published>
    <updated>2019-07-18T03:54:31.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="education"><a class="markdownIt-Anchor" href="#education"></a> Education</h3><ul><li>University</li><li>Major(Non-cs Major doesn’t matter)</li><li>Graduation Time</li><li><strong>CS related Courses</strong></li><li>GPA (above 3.5)</li></ul><h3 id="experience"><a class="markdownIt-Anchor" href="#experience"></a> Experience</h3><ul><li>Core Part I</li><li>Intership | Jobs: Company, Period, Position</li><li>Process: Project, Problems, Solution</li></ul><h3 id="projects"><a class="markdownIt-Anchor" href="#projects"></a> Projects</h3><ul><li>Core Part II</li><li>Name, period, role</li><li>Process: including key technologies</li><li>Result: your impact</li><li>From near to far, 1-3 Key Projects</li></ul><a id="more"></a><div class="note info">            <h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h4><ul><li>Format:<ul><li>Summary</li><li>2-3 key techs and results</li><li>Your impact to prove the value.</li></ul></li></ul><img style="width: 80%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/WX20190718-130911.png">          </div><div class="note warning">            <h4 id="how-to-prepare"><a class="markdownIt-Anchor" href="#how-to-prepare"></a> How to prepare?</h4><ul><li>Course Projects</li><li>Personal|team Projects</li></ul>          </div><h3 id="skills"><a class="markdownIt-Anchor" href="#skills"></a> Skills</h3><ul><li>Keep Simple (optional)</li></ul><h3 id="awards"><a class="markdownIt-Anchor" href="#awards"></a> Awards</h3><ul><li>Important Awards(Optional)</li></ul><div class="note danger">            <h4 id="danger-note"><a class="markdownIt-Anchor" href="#danger-note"></a> Danger Note</h4><ul><li>Keep Content in 1 page unless you are very experienced.</li><li>Reversed Time order</li><li>Some action words: <code>complete/construct/design</code> sth using some <code>techs</code> to <code>implement/achieve</code> some <code>functionality/performance</code>enhancement.</li></ul>          </div><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;education&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#education&quot;&gt;&lt;/a&gt; Education&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;University&lt;/li&gt;
&lt;li&gt;Major(Non-cs Major doesn’t matter)&lt;/li&gt;
&lt;li&gt;Graduation Time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CS related Courses&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;GPA (above 3.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;experience&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#experience&quot;&gt;&lt;/a&gt; Experience&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Core Part I&lt;/li&gt;
&lt;li&gt;Intership | Jobs: Company, Period, Position&lt;/li&gt;
&lt;li&gt;Process: Project, Problems, Solution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;projects&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#projects&quot;&gt;&lt;/a&gt; Projects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Core Part II&lt;/li&gt;
&lt;li&gt;Name, period, role&lt;/li&gt;
&lt;li&gt;Process: including key technologies&lt;/li&gt;
&lt;li&gt;Result: your impact&lt;/li&gt;
&lt;li&gt;From near to far, 1-3 Key Projects&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Job" scheme="https://geekeast.github.io/categories/Job/"/>
    
    
      <category term="Job" scheme="https://geekeast.github.io/tags/Job/"/>
    
      <category term="Resume" scheme="https://geekeast.github.io/tags/Resume/"/>
    
  </entry>
  
  <entry>
    <title>Manipulate CSS via Javascript</title>
    <link href="https://geekeast.github.io/cssjavascript.html"/>
    <id>https://geekeast.github.io/cssjavascript.html</id>
    <published>2019-07-15T02:49:00.000Z</published>
    <updated>2019-07-15T02:53:08.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="how-to-add-javascript"><a class="markdownIt-Anchor" href="#how-to-add-javascript"></a> How to add Javascript?</h3><ul><li>Method 1: End within the <code>body</code> tag</li><li>Method 2: Seperate Js file and then add to the end within the <code>body</code> tag</li></ul><h3 id="change-style-property"><a class="markdownIt-Anchor" href="#change-style-property"></a> change Style Property</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backdrop = <span class="built_in">document</span>.querySelector(<span class="string">'.backdrop'</span>);</span><br><span class="line"><span class="comment">// this will add style to element level</span></span><br><span class="line">backdrop.style.display = <span class="string">'block'</span>;</span><br></pre></td></tr></table></figure><h3 id="dynamically-change-style-property"><a class="markdownIt-Anchor" href="#dynamically-change-style-property"></a> Dynamically change Style Property</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backdrop = <span class="built_in">document</span>.querySelector(<span class="string">'.backdrop'</span>);</span><br><span class="line"><span class="keyword">var</span> modal = <span class="built_in">document</span>.querySelector(<span class="string">'.modal'</span>);</span><br><span class="line"><span class="keyword">var</span> selectPlanButtons = <span class="built_in">document</span>.querySelectorALL(<span class="string">'.plan button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; selectPlanButtons.length;i++)&#123;</span><br><span class="line">    selectPlanButtons[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        modal.style.display = <span class="string">'block'</span>;</span><br><span class="line">        backdrop.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="add-remoing-css-classes-via-js"><a class="markdownIt-Anchor" href="#add-remoing-css-classes-via-js"></a> Add &amp; Remoing CSS classes via JS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modal.className = <span class="string">'open'</span>; <span class="comment">// overwrite way</span></span><br><span class="line">modal.classList.add(<span class="string">'open'</span>); </span><br><span class="line">modal.classList.remove(<span class="string">'open'</span>);</span><br></pre></td></tr></table></figure><h3 id="ways-to-access-style-of-html-element-using-javascript"><a class="markdownIt-Anchor" href="#ways-to-access-style-of-html-element-using-javascript"></a> Ways to access Style of HTML element using Javascript</h3><ol><li><code>backdrop.style.backgroundImage</code></li><li><code>backdrop.style['backgournd-image']</code></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;how-to-add-javascript&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-to-add-javascript&quot;&gt;&lt;/a&gt; How to add Javascript?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Method 1: End within the &lt;code&gt;body&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Method 2: Seperate Js file and then add to the end within the &lt;code&gt;body&lt;/code&gt; tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;change-style-property&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#change-style-property&quot;&gt;&lt;/a&gt; change Style Property&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; backdrop = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.backdrop&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this will add style to element level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backdrop.style.display = &lt;span class=&quot;string&quot;&gt;&#39;block&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;dynamically-change-style-property&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dynamically-change-style-property&quot;&gt;&lt;/a&gt; Dynamically change Style Property&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; backdrop = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.backdrop&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; modal = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.modal&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; selectPlanButtons = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorALL(&lt;span class=&quot;string&quot;&gt;&#39;.plan button&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; selectPlanButtons.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    selectPlanButtons[i].addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        modal.style.display = &lt;span class=&quot;string&quot;&gt;&#39;block&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backdrop.style.display = &lt;span class=&quot;string&quot;&gt;&#39;block&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="Javascript" scheme="https://geekeast.github.io/tags/Javascript/"/>
    
      <category term="CSS" scheme="https://geekeast.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Box-sizing in CSS</title>
    <link href="https://geekeast.github.io/cssboxsizing.html"/>
    <id>https://geekeast.github.io/cssboxsizing.html</id>
    <published>2019-07-15T02:10:12.000Z</published>
    <updated>2019-07-15T02:11:10.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="box-sizing"><a class="markdownIt-Anchor" href="#box-sizing"></a> Box-Sizing</h2><ul><li>width/height的设定默认是content的，不包含padding，border和margin</li><li>width/height设定包含padding和border: box-sizing: border-box</li><li>width/height设定无法将margin包含进去，只能手工减去margin的大小</li></ul><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;box-sizing&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#box-sizing&quot;&gt;&lt;/a&gt; Box-Sizing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;width/height的设定默认是content的，不包含padding，border和margin&lt;/li&gt;
&lt;li&gt;width/height设定包含padding和border: box-sizing: border-box&lt;/li&gt;
&lt;li&gt;width/height设定无法将margin包含进去，只能手工减去margin的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="CSS" scheme="https://geekeast.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Margin Collapsing</title>
    <link href="https://geekeast.github.io/margincollapsing.html"/>
    <id>https://geekeast.github.io/margincollapsing.html</id>
    <published>2019-07-15T02:08:30.000Z</published>
    <updated>2019-07-15T02:08:56.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="margin-collapsing"><a class="markdownIt-Anchor" href="#margin-collapsing"></a> Margin Collapsing</h2><blockquote><p>It happens by default to resolve the collapsing of two adjecent margin by eliminating the shorter one.</p></blockquote><p><strong>1. Adjacent Siblings</strong><br>In this case, the first element might have a margin of 10px  (on all sides let’s say) and the second one has 5px  (or 20px  - the values don’t matter).CSS will collapse the margins and only add the bigger one between the elements. So if we got margins of 10px  and 5px , a 10px  margin would be added between the elements?</p><p><strong>2. A parent with children that have a margin</strong><br>To be precise, the first and/ or last or the only child has to have margins (top and/ or bottom). In that case, the parent elements margin will collapse with the child element(s)’ margins. Again, the bigger margin wins and will be applied to the parent element.If the parent element has padding, inline content (other than the child elements) or a border, this behavior should not occur, the child margin will instead be added to the content of the wrapping parent element.</p><p><strong>3. An empty element with margins</strong><br>This case probably doesn’t occur that often but if you got an element with no content, no padding, no border and no height, then the top and bottom margin will be merged into one single margin. Again, the bigger one wins.</p><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;margin-collapsing&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#margin-collapsing&quot;&gt;&lt;/a&gt; Margin Collapsing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It happens by default to resolve the collapsing of two adjecent margin by eliminating the shorter one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. Adjacent Siblings&lt;/strong&gt;&lt;br&gt;
In this case, the first element might have a margin of 10px  (on all sides let’s say) and the second one has 5px  (or 20px  - the values don’t matter).CSS will collapse the margins and only add the bigger one between the elements. So if we got margins of 10px  and 5px , a 10px  margin would be added between the elements?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. A parent with children that have a margin&lt;/strong&gt;&lt;br&gt;
To be precise, the first and/ or last or the only child has to have margins (top and/ or bottom). In that case, the parent elements margin will collapse with the child element(s)’ margins. Again, the bigger margin wins and will be applied to the parent element.If the parent element has padding, inline content (other than the child elements) or a border, this behavior should not occur, the child margin will instead be added to the content of the wrapping parent element.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. An empty element with margins&lt;/strong&gt;&lt;br&gt;
This case probably doesn’t occur that often but if you got an element with no content, no padding, no border and no height, then the top and bottom margin will be merged into one single margin. Again, the bigger one wins.&lt;/p&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="CSS" scheme="https://geekeast.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS Selector</title>
    <link href="https://geekeast.github.io/cssselector.html"/>
    <id>https://geekeast.github.io/cssselector.html</id>
    <published>2019-07-15T02:06:45.000Z</published>
    <updated>2019-07-15T02:07:41.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css-selector"><a class="markdownIt-Anchor" href="#css-selector"></a> CSS Selector</h2><table><thead><tr><th>Example</th><th>Description</th><th>Stress</th></tr></thead><tbody><tr><td><code>.btn</code></td><td>Select all elements with class=“btn”</td><td>类</td></tr><tr><td><code>#firstname</code></td><td>Selects the element with id=“firstname”</td><td>ID</td></tr><tr><td><code>*</code></td><td>Selects all elements</td><td>继承断层时应用</td></tr><tr><td><code>p</code></td><td>Selects all <code>&lt;p&gt;</code> elements</td><td>单个元素</td></tr><tr><td><code>div, p</code></td><td>any <code>&lt;div&gt;</code> elements and <code>&lt;p&gt;</code> elements</td><td>多个元素</td></tr><tr><td><code>div p</code></td><td>any <code>&lt;p&gt;</code> item that is a descendant of an <code>&lt;div&gt;</code></td><td>儿子们</td></tr><tr><td><code>div.btn</code></td><td><code>div</code> element with <code>btn</code> as class</td><td>单个元素(<strong>多个条件无空格</strong>)</td></tr><tr><td><code>div &gt; p</code></td><td>any <code>&lt;p&gt;</code> item that is a direct descendant of an <code>&lt;div&gt;</code></td><td>最亲儿子(only one)</td></tr><tr><td><code>div ~ p</code></td><td>any <code>&lt;p&gt;</code> after an <code>&lt;img&gt;</code> with something in between.</td><td>弟弟们</td></tr><tr><td><code>div + p</code></td><td>any <code>&lt;p&gt;</code> after an <code>&lt;img&gt;</code> with nothing in between.</td><td>最近弟弟(only one)</td></tr><tr><td><code>[href]</code></td><td>style all element with a href attribute.</td><td>属性</td></tr><tr><td><code>:hover</code></td><td>selects elements when the mouse cursor is current over them</td><td>状态</td></tr><tr><td><code>::before</code></td><td>allows you to insert content onto a page from CSS</td><td>内容</td></tr></tbody></table><a id="more"></a><h2 id="css-specificity"><a class="markdownIt-Anchor" href="#css-specificity"></a> CSS Specificity</h2><h3 id="simple-case"><a class="markdownIt-Anchor" href="#simple-case"></a> Simple Case</h3><p><code>Inheritance &gt; CSS file Tags(div, p) &gt; CSS file Class &gt; CSS file Id &gt; Inline Style &gt; !Important</code></p><p><img style="display: block; width: 100%; margin-left:auto; margin-right: auto" src="https://css-tricks.com/wp-content/uploads/2018/11/cascade-07.svg"></p><h3 id="real-case"><a class="markdownIt-Anchor" href="#real-case"></a> Real Case</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zcGVjaWZpY2l0eS5rZWVnYW4uc3Qv" title="https://specificity.keegan.st/">Online Calculator<i class="fa fa-external-link"></i></span></p><p><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/specificity-calculationbase.png"></p><ul><li>Element/pseudo element: div,p,:first-letter</li><li>class/psuedo-class/attibute: .col_3, ::hover, [href]</li><li>id: #nav</li><li>inline: <code>&lt;style&gt;</code><br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-1.png"><br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-2.png"><br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-3.png"><br><strong>Update</strong>: The :not() sort-of-pseudo-class adds no specificity by itself, only what’s inside the parens is added to specificity value.<br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/uploads/2010/05/cssspecificity-calc-3v2.jpg"><br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-4.png"><br><img style="width: 100%; margin:auto" src="https://css-tricks.com/wp-content/csstricks-uploads/cssspecificity-calc-5.png"></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css-selector&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css-selector&quot;&gt;&lt;/a&gt; CSS Selector&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Stress&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.btn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select all elements with class=“btn”&lt;/td&gt;
&lt;td&gt;类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#firstname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Selects the element with id=“firstname”&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Selects all elements&lt;/td&gt;
&lt;td&gt;继承断层时应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Selects all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements&lt;/td&gt;
&lt;td&gt;单个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div, p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements&lt;/td&gt;
&lt;td&gt;多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; item that is a descendant of an &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;儿子们&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div.btn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt; element with &lt;code&gt;btn&lt;/code&gt; as class&lt;/td&gt;
&lt;td&gt;单个元素(&lt;strong&gt;多个条件无空格&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div &amp;gt; p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; item that is a direct descendant of an &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最亲儿子(only one)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div ~ p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; after an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; with something in between.&lt;/td&gt;
&lt;td&gt;弟弟们&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div + p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; after an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; with nothing in between.&lt;/td&gt;
&lt;td&gt;最近弟弟(only one)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[href]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;style all element with a href attribute.&lt;/td&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;selects elements when the mouse cursor is current over them&lt;/td&gt;
&lt;td&gt;状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;allows you to insert content onto a page from CSS&lt;/td&gt;
&lt;td&gt;内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="CSS" scheme="https://geekeast.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>What you can do in head tag?</title>
    <link href="https://geekeast.github.io/htmlhead.html"/>
    <id>https://geekeast.github.io/htmlhead.html</id>
    <published>2019-07-15T02:05:21.000Z</published>
    <updated>2019-07-15T02:23:50.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="things-you-can-do-with-headhead"><a class="markdownIt-Anchor" href="#things-you-can-do-with-headhead"></a> Things you can do with <code>&lt;head&gt;&lt;/head&gt;</code></h2><ul><li>charset</li><li>viewport</li><li>compatible</li><li>title</li><li>favicon</li><li>css</li><li>import google fonts</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- import google fonts that you can specify it in css file - main.css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Baloo+Bhai|Indie+Flower&amp;display=swap"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;things-you-can-do-with-headhead&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#things-you-can-do-with-headhead&quot;&gt;&lt;/a&gt; Things you can do with &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;charset&lt;/li&gt;
&lt;li&gt;viewport&lt;/li&gt;
&lt;li&gt;compatible&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;favicon&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;import google fonts&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;favicon.ico&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/x-icon&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- import google fonts that you can specify it in css file - main.css --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://fonts.googleapis.com/css?family=Baloo+Bhai|Indie+Flower&amp;amp;display=swap&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="HTML" scheme="https://geekeast.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>3 Ways to Add CSS</title>
    <link href="https://geekeast.github.io/csswaystoaddstyle.html"/>
    <id>https://geekeast.github.io/csswaystoaddstyle.html</id>
    <published>2019-07-15T02:03:36.000Z</published>
    <updated>2019-07-15T02:04:59.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="how-to-add-style-to-html"><a class="markdownIt-Anchor" href="#how-to-add-style-to-html"></a> How to add style to html?</h2><h3 id="inline-css-style"><a class="markdownIt-Anchor" href="#inline-css-style"></a> Inline CSS Style</h3><ul><li>Not Recommended for most cases.</li></ul><p><strong>HTML:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: black; background: red"</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="head-css-style"><a class="markdownIt-Anchor" href="#head-css-style"></a> <code>&lt;head&gt;</code> CSS Style</h3><ul><li>For single page</li></ul><p><strong>HTML:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: black</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            background: white;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        Hello World!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="css-file"><a class="markdownIt-Anchor" href="#css-file"></a> CSS file</h3><ul><li>Mutile-html reuse; recommended</li></ul><p><strong>HTML:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CSS:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;how-to-add-style-to-html&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-to-add-style-to-html&quot;&gt;&lt;/a&gt; How to add style to html?&lt;/h2&gt;
&lt;h3 id=&quot;inline-css-style&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#inline-css-style&quot;&gt;&lt;/a&gt; Inline CSS Style&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Not Recommended for most cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;color: black; background: red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;head-css-style&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#head-css-style&quot;&gt;&lt;/a&gt; &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; CSS Style&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For single page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;        &lt;span class=&quot;selector-class&quot;&gt;.text&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            color: black&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        body &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            background: white;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="CSS" scheme="https://geekeast.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Mac Downgrade to Node.js Verison 8</title>
    <link href="https://geekeast.github.io/downgradetonode8mac.html"/>
    <id>https://geekeast.github.io/downgradetonode8mac.html</id>
    <published>2019-07-01T04:36:49.000Z</published>
    <updated>2019-07-01T06:41:10.751Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew search node</span><br><span class="line">brew unlink node</span><br><span class="line">brew install node@8</span><br><span class="line"><span class="comment"># link node to version 8, either</span></span><br><span class="line">brew link node@8</span><br><span class="line">brew link --force --overwrite node@8</span><br></pre></td></tr></table></figure><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew search node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew unlink node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install node@8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# link node to version 8, either&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew link node@8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew link --force --overwrite node@8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="Node.js" scheme="https://geekeast.github.io/tags/Node-js/"/>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/tags/Fullstack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode - 3sum</title>
    <link href="https://geekeast.github.io/3sum.html"/>
    <id>https://geekeast.github.io/3sum.html</id>
    <published>2019-06-30T13:48:19.000Z</published>
    <updated>2019-07-01T06:00:58.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h3><p>Given an array nums of<code>n</code> integers, are there elements <code>a</code>, <code>b</code>, <code>c</code> in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must <code>not</code> contain duplicate triplets.</p><p>Example:</p><p>Given array nums = <code>[-1, 0, 1, 2, -1, -4]</code>,</p><p>A solution set is:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="analysis"><a class="markdownIt-Anchor" href="#analysis"></a> Analysis</h3><ul><li>Brute Force: Ot(n^3), Os(1);</li><li>Two-sum: Ot(n^2), Os(n);</li><li>Sort &amp;&amp; Two-pointers: Ot(n^2), Os(logn);</li></ul><h3 id="solution-sort-2pointers"><a class="markdownIt-Anchor" href="#solution-sort-2pointers"></a> Solution - Sort &amp;&amp; 2pointers</h3><ul><li>Quicksort: Ot(nlogn), Os(logn);</li><li>pseudo-code:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> (<span class="number">0</span>,nums.length):</span><br><span class="line">    <span class="keyword">if</span>(index&gt;<span class="number">0</span> &amp;&amp; nums[index] == nums[index<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">    a = nums[index];</span><br><span class="line">    left = nums[index+<span class="number">1</span>];</span><br><span class="line">    right = nums[length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[left]+nums[right] == -a)&#123;</span><br><span class="line">            results.push([a,nums[left],nums[right]]);</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left+<span class="number">1</span>]==nums[left]) left++;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[rigth<span class="number">-1</span>]==nums[right]) right--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125; <span class="keyword">elif</span>(nums[left]+nums[right] &lt; -a&gt;)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rigth--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">// corner case</span></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="comment">// quicksort - Ot(nlogn)/Os(logn) - inplace</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the length of the array.</span></span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="comment">// initialize the results as a linkedlist (bettter than arraylist);</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;&gt;(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// outside loop for a</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// compare to past to ensure uniqueness.</span></span><br><span class="line">            <span class="comment">// compare to future cannot ensure uniqueness because we will lose the first happening.</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> a = nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// initialize two pointers</span></span><br><span class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// inner loop for two pointers</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">int</span> b = nums[left];</span><br><span class="line">                <span class="keyword">int</span> c = nums[right];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// b+c is not big enough, increase the smaller one.</span></span><br><span class="line">                <span class="keyword">if</span>(b + c &lt; <span class="number">0</span>-a)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                <span class="comment">// b+c is not small enough, decrease the bigger one.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b + c &gt; <span class="number">0</span>-a)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// add to the ans</span></span><br><span class="line">                    ans.add(Arrays.asList(a,b,c));</span><br><span class="line">                    <span class="comment">// but there might be more</span></span><br><span class="line">                    <span class="comment">// left ++ until bigger than c</span></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="comment">// right-- until smaller than c</span></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="comment">// explanation:</span></span><br><span class="line">                    <span class="comment">// if onle increase left and keep right, the result must not equal to -a. the same for decrease.</span></span><br><span class="line">                    <span class="comment">// this will skip duplicates and save time for searching.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="links"><a class="markdownIt-Anchor" href="#links"></a> Links</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1c2hpeWk2NDUzL2FydGljbGUvZGV0YWlscy83NjQwNzY0MA==" title="https://blog.csdn.net/yushiyi6453/article/details/76407640">Sort Algorithms<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;question&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#question&quot;&gt;&lt;/a&gt; Question&lt;/h3&gt;
&lt;p&gt;Given an array nums of&lt;code&gt;n&lt;/code&gt; integers, are there elements &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;The solution set must &lt;code&gt;not&lt;/code&gt; contain duplicate triplets.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Given array nums = &lt;code&gt;[-1, 0, 1, 2, -1, -4]&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;A solution set is:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;analysis&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#analysis&quot;&gt;&lt;/a&gt; Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Brute Force: Ot(n^3), Os(1);&lt;/li&gt;
&lt;li&gt;Two-sum: Ot(n^2), Os(n);&lt;/li&gt;
&lt;li&gt;Sort &amp;amp;&amp;amp; Two-pointers: Ot(n^2), Os(logn);&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;solution-sort-2pointers&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#solution-sort-2pointers&quot;&gt;&lt;/a&gt; Solution - Sort &amp;amp;&amp;amp; 2pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quicksort: Ot(nlogn), Os(logn);&lt;/li&gt;
&lt;li&gt;pseudo-code:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;results = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,nums.length):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[index] == nums[index&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = nums[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left = nums[index+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right = nums[length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt; right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[left]+nums[right] == -a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            results.push([a,nums[left],nums[right]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt; right &amp;amp;&amp;amp; nums[left+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]==nums[left]) left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt; right &amp;amp;&amp;amp; nums[rigth&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]==nums[right]) right--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            right++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt;(nums[left]+nums[right] &amp;lt; -a&amp;gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rigth--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://geekeast.github.io/categories/Leetcode/"/>
    
    
      <category term="Sort" scheme="https://geekeast.github.io/tags/Sort/"/>
    
      <category term="Two Pointers" scheme="https://geekeast.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>算法之路</title>
    <link href="https://geekeast.github.io/algorithms.html"/>
    <id>https://geekeast.github.io/algorithms.html</id>
    <published>2019-06-26T10:57:03.000Z</published>
    <updated>2019-07-01T06:00:54.953Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cDovL3d3dy5sZWFybjRtYXN0ZXIuY29tLw==" title="http://www.learn4master.com/">Learn for Master<i class="fa fa-external-link"></i></span>;<br><img style="width: 80%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/3.jpg"></p><a id="more"></a><p><img style="width: 100%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/1.jpg"><br><img style="width: 100%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2.jpg"><br><img style="width: 100%; margin: auto" src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/4.jpg"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.learn4master.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Learn for Master&lt;/a&gt;;&lt;br&gt;
&lt;img style=&quot;width: 80%; margin: auto&quot; src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/3.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://geekeast.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://geekeast.github.io/tags/Algorithm/"/>
    
      <category term="Methodology" scheme="https://geekeast.github.io/tags/Methodology/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的继承机制</title>
    <link href="https://geekeast.github.io/javascriptinheritance.html"/>
    <id>https://geekeast.github.io/javascriptinheritance.html</id>
    <published>2019-06-25T12:07:55.000Z</published>
    <updated>2019-06-25T12:22:25.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-the-inheritance-mechanism-in-javascript"><a class="markdownIt-Anchor" href="#what-is-the-inheritance-mechanism-in-javascript"></a> What is the inheritance mechanism in Javascript?</h2><h3 id="constructor-is-class-class-is-constructor"><a class="markdownIt-Anchor" href="#constructor-is-class-class-is-constructor"></a> Constructor is Class ^ Class is Constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is the constructor as well as the class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Kitty'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cat);</span><br></pre></td></tr></table></figure><h3 id="class-vs-instance"><a class="markdownIt-Anchor" href="#class-vs-instance"></a> Class vs Instance</h3><ul><li><strong>Instance Variable/Function</strong> in <code>Constructor</code>: In Javascript, all attributes or functions which is shared across all the instances or is specially designed for the class, or the same idea of <code>static</code> is store in <code>prototype</code>. I called it the <code>Blueprint</code>.</li><li><strong>Class Variable/Fucntion</strong> in <code>Prototype</code>: In Javascript, all attributes or functions that is only used within specific instances are initialize and stored in the the <code>constructor function</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key-value pair storage</span></span><br><span class="line">Cat.prototype = &#123;</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start running...'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Kitty'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cat);</span><br></pre></td></tr></table></figure><h3 id="links"><a class="markdownIt-Anchor" href="#links"></a> Links</h3><h2 id="javascript继承机制的设计思想"><a class="markdownIt-Anchor" href="#javascript继承机制的设计思想"></a> <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDYvZGVzaWduaW5nX2lkZWFzX29mX2luaGVyaXRhbmNlX21lY2hhbmlzbV9pbl9qYXZhc2NyaXB0Lmh0bWw=" title="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想<i class="fa fa-external-link"></i></span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;what-is-the-inheritance-mechanism-in-javascript&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-the-inheritance-mechanism-in-javascript
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="Javascript" scheme="https://geekeast.github.io/tags/Javascript/"/>
    
      <category term="Inheritance" scheme="https://geekeast.github.io/tags/Inheritance/"/>
    
      <category term="Prototype" scheme="https://geekeast.github.io/tags/Prototype/"/>
    
      <category term="Blueprint" scheme="https://geekeast.github.io/tags/Blueprint/"/>
    
      <category term="OOP" scheme="https://geekeast.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Typescript中的装饰器</title>
    <link href="https://geekeast.github.io/tsdecorators.html"/>
    <id>https://geekeast.github.io/tsdecorators.html</id>
    <published>2019-06-25T10:44:18.000Z</published>
    <updated>2019-06-30T13:48:02.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="essence"><a class="markdownIt-Anchor" href="#essence"></a> Essence</h3><ul><li>Why we need decorator? <strong>To reuse code!</strong></li><li>Notion: Decorator can <code>only</code> be used inside/on a <strong>class</strong>.</li><li>Decorator will be ran when a <strong>class is defined</strong> rather than an <code>instance is created</code>.</li><li>Mutilple Decorators will be run from <code>last line to first line</code>.</li></ul><h3 id="method-decorator"><a class="markdownIt-Anchor" href="#method-decorator"></a> Method Decorator</h3><ul><li>Function wrapping on the method.</li><li>The decorator is applied to the <code>Property Descriptor</code> for the method, and can be used to <code>observe</code>, <code>modify</code>, or <code>replace</code> a method definition.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is called class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boat</span> </span>&#123;</span><br><span class="line"><span class="comment">// this is called property</span></span><br><span class="line">color: string = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is called accessor</span></span><br><span class="line"><span class="keyword">get</span> formattedColor(): string &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * logError: must be a function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@logError</span><br><span class="line"><span class="comment">// this is called method</span></span><br><span class="line">pilot(</span><br><span class="line">name: <span class="built_in">String</span> <span class="comment">// this is called parameter</span></span><br><span class="line">): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param target  Constructor function or the prototype of the class.</span></span><br><span class="line"><span class="comment"> * @param key  The name of the method.</span></span><br><span class="line"><span class="comment"> * @param desc The Property Descriptor for the method. value, writtable, enumerable, configurable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">target: any, key: string, desc: PropertyDescriptor</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="comment">// this is the method itself.</span></span><br><span class="line"><span class="keyword">const</span> method = desc.value;</span><br><span class="line"><span class="comment">// modify the pilot function before run it.</span></span><br><span class="line">desc.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Run Descriptor'</span>);</span><br><span class="line">method();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Method Fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boat = <span class="keyword">new</span> Boat();</span><br><span class="line"></span><br><span class="line">boat.pilot(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="accessor-decorator"><a class="markdownIt-Anchor" href="#accessor-decorator"></a> Accessor Decorator</h3><ul><li>The accessor decorator is applied to the <code>Property Descriptor</code> for the accessor and can be used to <code>observe</code>, <code>modify</code>, or <code>replace</code> an accessor’s definitions.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    private _x: number;</span><br><span class="line">    private _y: number;</span><br><span class="line">    <span class="keyword">constructor</span>(x: number, y: number) &#123;</span><br><span class="line">        <span class="keyword">this</span>._x = x;</span><br><span class="line">        <span class="keyword">this</span>._y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @configurable(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> x() &#123; <span class="keyword">return</span> <span class="keyword">this</span>._x; &#125;</span><br><span class="line"></span><br><span class="line">    @configurable(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> y() &#123; <span class="keyword">return</span> <span class="keyword">this</span>._y; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param target  Constructor function or the prototype of the class.</span></span><br><span class="line"><span class="comment"> * @param key  The name of the accessor.</span></span><br><span class="line"><span class="comment"> * @param desc The Property Descriptor for the accessor. value, writtable, enumerable, configurable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">target: any, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="decorator-factory"><a class="markdownIt-Anchor" href="#decorator-factory"></a> Decorator Factory</h3><ul><li>Factory: Wrap a function on another function: to pass parameters, extra action outside the existing method.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is called class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boat</span> </span>&#123;</span><br><span class="line">@logError(<span class="string">'Error Happened.'</span>)</span><br><span class="line"><span class="comment">// this is called method</span></span><br><span class="line">pilot(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is Decorator funciton, it's a decorator in essence.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">errorMessage: string</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: any, key: string, desc: PropertyDescriptor</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="comment">// this is the method itself.</span></span><br><span class="line"><span class="keyword">const</span> method = desc.value;</span><br><span class="line"><span class="comment">// modify the pilot function before run it.</span></span><br><span class="line">desc.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Run Descriptor'</span>);</span><br><span class="line">method();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(errorMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boat = <span class="keyword">new</span> Boat();</span><br><span class="line">boat.pilot(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="property-decorator"><a class="markdownIt-Anchor" href="#property-decorator"></a> Property Decorator</h3><ul><li>Can <code>only</code> be used to observe whether the property has been <code>declared</code> for a class</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boat</span> </span>&#123;</span><br><span class="line"><span class="comment">// this is called property</span></span><br><span class="line">@testDecorator color: string = <span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">target: any, key: string</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target.color) <span class="comment">// undefined because prototype does not store instance variable.</span></span><br><span class="line"><span class="built_in">console</span>.log(key); <span class="comment">// color</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> boat = <span class="keyword">new</span> Boat();</span><br></pre></td></tr></table></figure><h3 id="class-decorator"><a class="markdownIt-Anchor" href="#class-decorator"></a> Class Decorator</h3><ul><li><p>The class decorator is applied to the <code>constructor</code>of the class and can be used to <code>observe</code>, <code>modify</code>, or <code>replace</code> a class definition.</p></li><li><p>How to override the constructor a class.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@classDecorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">property = <span class="string">'property'</span>;</span><br><span class="line">hello: string;</span><br><span class="line"><span class="keyword">constructor</span>(m: string) &#123;</span><br><span class="line"><span class="keyword">this</span>.hello = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; <span class="keyword">new</span> (...args: any[]): &#123;&#125; &#125;&gt;(<span class="keyword">constructor</span>: T) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">newProperty = <span class="string">'new property'</span>;</span><br><span class="line">hello = <span class="string">'override'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeter(<span class="string">'world'</span>));</span><br></pre></td></tr></table></figure><h3 id="parameter-decorator"><a class="markdownIt-Anchor" href="#parameter-decorator"></a> Parameter Decorator</h3><ul><li>The parameter decorator is applied to the <code>function for a class constructor</code> or <code>method declaration</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">greet(@logParameter message: string): string &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`hello <span class="subst">$&#123;message&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param target the prototype of the class.</span></span><br><span class="line"><span class="comment"> * @param propertyName  name of the method</span></span><br><span class="line"><span class="comment"> * @param index position of the parameter in the argument array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParameter</span>(<span class="params">target: any, propertyName: string, index: number</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(propertyName,index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emp = <span class="keyword">new</span> Employee();</span><br><span class="line">emp.greet(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h3 id="decorator-composition"><a class="markdownIt-Anchor" href="#decorator-composition"></a> Decorator Composition</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single line</span></span><br><span class="line">@f @g x</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutilines</span></span><br><span class="line">@f</span><br><span class="line">@g</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>When multiple decorators apply to a single declaration, their evaluation is similar to <code>function composition</code> in mathematics. In this model, when composing functions f and g, the resulting composite (f ∘ g)(x) is equivalent to f(g(x)).</p><p>As such, the following steps are performed when evaluating multiple decorators on a single declaration in TypeScript:</p><ul><li>The expressions for each decorator are evaluated top-to-bottom.</li><li>The results are then called as functions from bottom-to-top.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f(): evaluated"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"f(): called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"g(): evaluated"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"g(): called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    @f()</span><br><span class="line">    @g()</span><br><span class="line">    method() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(): evaluated</span><br><span class="line">g(): evaluated</span><br><span class="line">g(): called</span><br><span class="line">f(): called</span><br></pre></td></tr></table></figure><h3 id="decorator-evaluation"><a class="markdownIt-Anchor" href="#decorator-evaluation"></a> Decorator Evaluation</h3><p>There is a well defined order to how decorators applied to various declarations inside of a class are applied: <strong>From Instance to Blueprint</strong> <strong>从类里到类外</strong></p><ul><li>Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each <code>instance</code> member.</li><li>Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each <code>static</code> member.</li><li>Parameter Decorators are applied for the <code>constructor</code>.</li><li>Class Decorators are applied for the <code>class</code>.</li></ul><h3 id="reflect-metadata"><a class="markdownIt-Anchor" href="#reflect-metadata"></a> Reflect Metadata</h3><ul><li>metadata is just an invisible attribute of javascript <code>object</code>.</li><li>you can add define/get metadata of javascript object throuth <code>reflect-metadata</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line">@getMetadata</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> </span>&#123;</span><br><span class="line"><span class="comment">// instance variable</span></span><br><span class="line">color: string = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line">@markFly(<span class="string">'secret'</span>)</span><br><span class="line">fly(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'vrrrrrrr...'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">markFly</span>(<span class="params">secretInfo: string</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: Plane, key: String</span>) </span>&#123;</span><br><span class="line"><span class="comment">// attach metadata to target.key, which is the fly function;</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineMetadata(secretInfo, target, key);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param target the constructor of Plane</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMetadata</span>(<span class="params">target: typeof Plane</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target.prototype) &#123;</span><br><span class="line"><span class="keyword">const</span> secrect = <span class="built_in">Reflect</span>.getMetadata(<span class="string">'secrect'</span>, target.prototype, key);</span><br><span class="line"><span class="built_in">console</span>.log(secrect);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;essence&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#essence&quot;&gt;&lt;/a&gt; Essence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why we need decorator? &lt;strong&gt;To reuse code!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Notion: Decorator can &lt;code&gt;only&lt;/code&gt; be used inside/on a &lt;strong&gt;class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Decorator will be ran when a &lt;strong&gt;class is defined&lt;/strong&gt; rather than an &lt;code&gt;instance is created&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mutilple Decorators will be run from &lt;code&gt;last line to first line&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;method-decorator&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#method-decorator&quot;&gt;&lt;/a&gt; Method Decorator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function wrapping on the method.&lt;/li&gt;
&lt;li&gt;The decorator is applied to the &lt;code&gt;Property Descriptor&lt;/code&gt; for the method, and can be used to &lt;code&gt;observe&lt;/code&gt;, &lt;code&gt;modify&lt;/code&gt;, or &lt;code&gt;replace&lt;/code&gt; a method definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this is called class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Boat&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this is called property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: string = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this is called accessor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; formattedColor(): string &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * logError: must be a function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@logError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this is called method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pilot(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		name: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// this is called parameter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	): &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param target  Constructor function or the prototype of the class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param key  The name of the method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param desc The Property Descriptor for the method. value, writtable, enumerable, configurable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target: any, key: string, desc: PropertyDescriptor&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this is the method itself.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; method = desc.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// modify the pilot function before run it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	desc.value = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Run Descriptor&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			method();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Method Fail&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; boat = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Boat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boat.pilot(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="Fullstack" scheme="https://geekeast.github.io/tags/Fullstack/"/>
    
      <category term="Decorator" scheme="https://geekeast.github.io/tags/Decorator/"/>
    
      <category term="Typescript" scheme="https://geekeast.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>区分Session和Cookie</title>
    <link href="https://geekeast.github.io/session-cookies.html"/>
    <id>https://geekeast.github.io/session-cookies.html</id>
    <published>2019-06-25T08:41:10.000Z</published>
    <updated>2019-06-25T10:44:05.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="concept"><a class="markdownIt-Anchor" href="#concept"></a> Concept</h3><p>HTTP 协议中，客户端向服务端发起请求，服务端响应请求。服务端要怎样辨识客户端的请求是来自于同一个用户呢？这就需要一种<code>身份验证机制</code>。事实上存在这样一种机制，利用session和cookie，实现了对用户身份的验证。简单来说，session是存储在服务端的<code>半个钥匙</code>，cookie是用户每次发起http请求都要携带的<code>另一半钥匙</code>，服务器会通过比对着会得知当前请求时来自于哪个用户。</p><h3 id="http-process"><a class="markdownIt-Anchor" href="#http-process"></a> HTTP Process:</h3><ol><li>客户端<code>第一次</code>发起请求。</li><li>服务端响应请求，生成用于表示当前用户的<code>session</code>并存储，并且将一半钥匙第一次存储到响应的cookie中。</li><li>客户端收到响应，拿到了一半钥匙存储在<code>cookie</code>当中。</li><li>客户端再次发起请求，服务器收到请求，获取<code>cookie</code>中的一半钥匙，服务器进行比对，验证用户及用户状态</li></ol><h3 id="links"><a class="markdownIt-Anchor" href="#links"></a> Links</h3><p><span class="exturl" data-url="aHR0cHM6Ly9mbGF2aW9jb3Blcy5jb20vZXhwcmVzcy1zZXNzaW9ucy8=" title="https://flaviocopes.com/express-sessions/">Express session<i class="fa fa-external-link"></i></span></p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;concept&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#concept&quot;&gt;&lt;/a&gt; Concept&lt;/h3&gt;
&lt;p&gt;HTTP 协议中，客户端向服务端发起请求，服务端响应请求。服务端要怎样辨识客户端的请求是来自于同一个用户呢？这就需要一种&lt;code&gt;身份验证机制&lt;/code&gt;。事实上存在这样一种机制，利用session和cookie，实现了对用户身份的验证。简单来说，session是存储在服务端的&lt;code&gt;半个钥匙&lt;/code&gt;，cookie是用户每次发起http请求都要携带的&lt;code&gt;另一半钥匙&lt;/code&gt;，服务器会通过比对着会得知当前请求时来自于哪个用户。&lt;/p&gt;
&lt;h3 id=&quot;http-process&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#http-process&quot;&gt;&lt;/a&gt; HTTP Process:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端&lt;code&gt;第一次&lt;/code&gt;发起请求。&lt;/li&gt;
&lt;li&gt;服务端响应请求，生成用于表示当前用户的&lt;code&gt;session&lt;/code&gt;并存储，并且将一半钥匙第一次存储到响应的cookie中。&lt;/li&gt;
&lt;li&gt;客户端收到响应，拿到了一半钥匙存储在&lt;code&gt;cookie&lt;/code&gt;当中。&lt;/li&gt;
&lt;li&gt;客户端再次发起请求，服务器收到请求，获取&lt;code&gt;cookie&lt;/code&gt;中的一半钥匙，服务器进行比对，验证用户及用户状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt; Links&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://flaviocopes.com/express-sessions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Express session&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Fullstack" scheme="https://geekeast.github.io/categories/Fullstack/"/>
    
    
      <category term="Frontend" scheme="https://geekeast.github.io/tags/Frontend/"/>
    
      <category term="Network" scheme="https://geekeast.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的类型判断</title>
    <link href="https://geekeast.github.io/checktypeinjs.html"/>
    <id>https://geekeast.github.io/checktypeinjs.html</id>
    <published>2019-06-21T07:16:49.000Z</published>
    <updated>2019-06-25T08:41:48.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="difference"><a class="markdownIt-Anchor" href="#difference"></a> Difference</h3><ul><li><code>typeof</code>: only judge between string, number, boolean, object, function, symbol and  undefined.</li><li><code>instanceof</code>: can judge instance inside object, like array, but sometime not accurate.</li><li><code>Object.prototype.toString.call</code>: the most <strong>accurate</strong> one.</li></ul><h3 id="method-1-typeof"><a class="markdownIt-Anchor" href="#method-1-typeof"></a> Method 1: typeof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null and array will all be judge as object</span></span><br><span class="line"><span class="keyword">const</span> x = [];</span><br><span class="line"><span class="built_in">console</span>.log(x <span class="keyword">typeof</span> object);</span><br></pre></td></tr></table></figure><h3 id="method-2-instanceof"><a class="markdownIt-Anchor" href="#method-2-instanceof"></a> Method 2: instanceof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = [];</span><br><span class="line"><span class="built_in">console</span>.log(x instance <span class="keyword">of</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><h3 id="method-3-objectprototypetostringcall"><a class="markdownIt-Anchor" href="#method-3-objectprototypetostringcall"></a> Method 3: Object.prototype.toString.call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(x))</span><br></pre></td></tr></table></figure><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;difference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#difference&quot;&gt;&lt;/a&gt; Difference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof&lt;/code&gt;: only judge between string, number, boolean, object, function, symbol and  undefined.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;: can judge instance inside object, like array, but sometime not accurate.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.prototype.toString.call&lt;/code&gt;: the most &lt;strong&gt;accurate&lt;/strong&gt; one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;method-1-typeof&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#method-1-typeof&quot;&gt;&lt;/a&gt; Method 1: typeof&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// null and array will all be judge as object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; object);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;method-2-instanceof&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#method-2-instanceof&quot;&gt;&lt;/a&gt; Method 2: instanceof&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x instance &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;method-3-objectprototypetostringcall&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#method-3-objectprototypetostringcall&quot;&gt;&lt;/a&gt; Method 3: Object.prototype.toString.call&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(x))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://geekeast.github.io/categories/Frontend/"/>
    
    
      <category term="Javascript" scheme="https://geekeast.github.io/tags/Javascript/"/>
    
      <category term="Frontend" scheme="https://geekeast.github.io/tags/Frontend/"/>
    
  </entry>
  
</feed>
