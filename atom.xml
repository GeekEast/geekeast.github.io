<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪中印</title>
  
  <subtitle>心底清静方为道 退步原来是向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekeast.github.io/"/>
  <updated>2019-12-13T09:33:42.000Z</updated>
  <id>https://geekeast.github.io/</id>
  
  <author>
    <name>James Tan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node Upgrade</title>
    <link href="https://geekeast.github.io/Developer/framework/nodejs/upgradenode.html"/>
    <id>https://geekeast.github.io/Developer/framework/nodejs/upgradenode.html</id>
    <published>2019-12-13T09:33:42.000Z</published>
    <updated>2019-12-13T09:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="install-n"><a class="markdownIt-Anchor" href="#install-n"></a> Install n</h3><p><code>sudo npm install n -g</code></p><h3 id="install-node-latest-stable-version"><a class="markdownIt-Anchor" href="#install-node-latest-stable-version"></a> Install Node latest stable version</h3><p><code>sudo n stable</code></p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;install-n&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#install-n&quot;&gt;&lt;/a&gt; Install n&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo npm install n -g&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;install-node-latest-stable-version&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#install-node-latest-stable-version&quot;&gt;&lt;/a&gt; Install Node latest stable version&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo n stable&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Framework" scheme="https://geekeast.github.io/categories/Developer/Framework/"/>
    
      <category term="Node" scheme="https://geekeast.github.io/categories/Developer/Framework/Node/"/>
    
    
      <category term="Node.js" scheme="https://geekeast.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Module History</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsmodulesys.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsmodulesys.html</id>
    <published>2019-12-13T00:46:56.000Z</published>
    <updated>2019-12-13T00:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript-模块系统"><a class="markdownIt-Anchor" href="#javascript-模块系统"></a> Javascript 模块系统</h3><h4 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h4><ul><li>数量众多的<code>JavaScript</code>文件在载入html时，会产生<strong>同名变量</strong>在全局<strong>冲突</strong>的现象。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Basic example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./greeting.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./third_party_script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下面的两个<code>writeHello</code>会产生<strong>变量冲突</strong>的问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// greeting.js</span></span><br><span class="line"><span class="keyword">var</span> helloInLang = &#123;</span><br><span class="line">  en: <span class="string">'Hello world!'</span>,</span><br><span class="line">  es: <span class="string">'¡Hola mundo!'</span>,</span><br><span class="line">  ru: <span class="string">'Привет мир!'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeHello</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(helloInLang[lang]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// third_party_script.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'The script is broken'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解决方案1-命名空间模式"><a class="markdownIt-Anchor" href="#解决方案1-命名空间模式"></a> 解决方案1: 命名空间模式</h4><ul><li>本质: <strong>变量挂载在一个<code>对象</code>上面</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// greeting.js</span></span><br><span class="line"><span class="keyword">var</span> app = &#123;&#125;;</span><br><span class="line">app.helloInLang = &#123;</span><br><span class="line">  en: <span class="string">'Hello world!'</span>,</span><br><span class="line">  es: <span class="string">'¡Hola mundo!'</span>,</span><br><span class="line">  ru: <span class="string">'Привет мир!'</span></span><br><span class="line">&#125;;</span><br><span class="line">app.writeHello = <span class="function"><span class="keyword">function</span> (<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(helloInLang[lang]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// third_party_script.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'The script is broken'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>存在问题: <strong>分层</strong>处理无法完成<strong>封装</strong>，数据依然是<code>public</code>的</li></ul><h4 id="解决方案2-iife闭包"><a class="markdownIt-Anchor" href="#解决方案2-iife闭包"></a> 解决方案2: IIFE+闭包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// greeting.js</span></span><br><span class="line"><span class="keyword">var</span> greeting = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> helloInLang = &#123;</span><br><span class="line">    en: <span class="string">'Hello world!'</span>,</span><br><span class="line">    es: <span class="string">'¡Hola mundo!'</span>,</span><br><span class="line">    ru: <span class="string">'Привет мир!'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.getHello = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloInLang[lang];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.writeHello = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">module</span>.getHello(lang));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>根据<code>闭包数据无法访问</code>的特性，完成了<strong>数据封装</strong>的任务</li><li><code>函数</code>会形成自身的<strong>作用域</strong>，其中声明的变量<code>不会污染</code>到全局，这个任务由<code>IIFE</code>来完成</li><li><code>闭包的产生</code>必须有对象或者函数的<strong>返回</strong>，这个任务由<code>IIFE</code>来完成</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-12-13-10-19-13.png"></div><ul><li>而且模块之间是可以通过<strong>传参</strong>来进行沟通的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x.js</span></span><br><span class="line"><span class="comment">// @require greeting.js</span></span><br><span class="line"><span class="keyword">var</span> x = (<span class="function"><span class="keyword">function</span>(<span class="params">greeting</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.writeHello = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(greeting.getHello(lang));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;)(greeting);</span><br></pre></td></tr></table></figure><ul><li>存在问题: 以上解决方案的模块加载都是<strong>运行时</strong>加载，因此依赖关系需要保证<code>正确的加载顺序</code>，才能得以实施。</li></ul><h4 id="解决方案3-xxxxjs"><a class="markdownIt-Anchor" href="#解决方案3-xxxxjs"></a> 解决方案3: XXXXJS</h4><h5 id="commonjs"><a class="markdownIt-Anchor" href="#commonjs"></a> CommonJS</h5><ul><li><strong>同步</strong>加载</li><li><strong>运行时</strong>加载:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// lib/greeting.js</span></span><br><span class="line"><span class="keyword">const</span> helloInLang = &#123;</span><br><span class="line">    en: <span class="string">'Hello world!'</span>,</span><br><span class="line">    es: <span class="string">'¡Hola mundo!'</span>,</span><br><span class="line">    ru: <span class="string">'Привет мир!'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getHello = <span class="function"><span class="keyword">function</span> (<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloInLang[lang];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.getHello = getHello;</span><br><span class="line">exports.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getHello(lang))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="built_in">require</span>(<span class="string">'./lib/greeting'</span>).sayHello;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">'ru'</span>);</span><br></pre></td></tr></table></figure><ul><li>每个文件就是一个模块，有自己的<strong>作用域</strong>，内置一个<code>module</code>对象</li><li>模块可以多次加载，但是只会在第一次<strong>加载时运行一次</strong>, 然后运行结果就被<strong>缓存</strong>了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须<strong>清除缓存</strong>。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li><li><code>复制值</code>而不是<code>复制引用</code></li></ul><h5 id="requirejs"><a class="markdownIt-Anchor" href="#requirejs"></a> RequireJS</h5><ul><li><strong>运行时</strong>加载</li><li><strong>异步</strong>加载</li><li>基于AMD</li><li>依赖<strong>前置</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMD</span></span><br><span class="line">define(</span><br><span class="line">    [<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="comment">// &lt;- 前置声明，也就是在主体运行前就已经加载并运行了模块a和模块b</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// more code ..</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="seajs"><a class="markdownIt-Anchor" href="#seajs"></a> SeaJS</h5><ul><li><strong>运行时</strong>加载</li><li><strong>异步</strong>记载</li><li>基于CMD</li><li><strong>即时</strong>加载</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); <span class="comment">// &lt;- 运行到此处才开始加载并运行模块a</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>); <span class="comment">// &lt;- 运行到此处才开始加载并运行模块b</span></span><br><span class="line">    <span class="comment">// more code ..</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="解决方案4-module-pattern"><a class="markdownIt-Anchor" href="#解决方案4-module-pattern"></a> 解决方案4: Module Pattern</h4><ul><li>编译时加载</li><li>通用模块解决方案</li><li>加载: <code>import</code>,<strong>只能写在顶层</strong></li><li>导出: <code>export</code></li><li><code>复制引用</code>而非<code>复制值</code></li></ul><h4 id="commonjs-vs-es-module"><a class="markdownIt-Anchor" href="#commonjs-vs-es-module"></a> CommonJS vs ES Module</h4><ul><li>加载时机：CommonJS 是运行时加载（动态加载），ES Module 是编译时加载（静态加载）</li><li>加载模块：CommonJS 模块就是对象，加载的是该对象，ES Module 模块不是对象，加载的不是对象，是接口</li><li>加载结果：CommonJS 加载的是整个模块，即将所有的接口全部加载进来，ES Module 可以单独加载其中的某个接口（方法）</li><li>输出：CommonJS 输出值的拷贝，ES Module 输出值的引用</li><li>this: CommonJS 指向当前模块，ES Module 指向 undefined</li></ul><h4 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2FiMWEwYmYyNjVkYTI0Y2E1M2I0ZWU=" title="https://juejin.im/post/5cab1a0bf265da24ca53b4ee">JavaScript 模块化总结<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;javascript-模块系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javascript-模块系统&quot;&gt;&lt;/a&gt; Javascript 模块系统&lt;/h3&gt;
&lt;h4 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数量众多的&lt;code&gt;JavaScript&lt;/code&gt;文件在载入html时，会产生&lt;strong&gt;同名变量&lt;/strong&gt;在全局&lt;strong&gt;冲突&lt;/strong&gt;的现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Basic example&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./greeting.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./third_party_script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的两个&lt;code&gt;writeHello&lt;/code&gt;会产生&lt;strong&gt;变量冲突&lt;/strong&gt;的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// greeting.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; helloInLang = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  en: &lt;span class=&quot;string&quot;&gt;&#39;Hello world!&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  es: &lt;span class=&quot;string&quot;&gt;&#39;¡Hola mundo!&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ru: &lt;span class=&quot;string&quot;&gt;&#39;Привет мир!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;lang&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(helloInLang[lang]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// third_party_script.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&#39;The script is broken&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Module" scheme="https://geekeast.github.io/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>Internal Render Process</title>
    <link href="https://geekeast.github.io/Developer/browser/renderprocess.html"/>
    <id>https://geekeast.github.io/Developer/browser/renderprocess.html</id>
    <published>2019-11-28T05:19:40.000Z</published>
    <updated>2019-11-28T05:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渲染过程详解"><a class="markdownIt-Anchor" href="#渲染过程详解"></a> 渲染过程详解</h2><h3 id="dom-tree"><a class="markdownIt-Anchor" href="#dom-tree"></a> DOM Tree</h3><h4 id="stage-1-build-dom-tree"><a class="markdownIt-Anchor" href="#stage-1-build-dom-tree"></a> Stage 1: Build DOM Tree</h4><ul><li>Input: <code>HTML</code></li><li>Process: parse html</li><li>Output: <code>DOM Tree</code></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-33-25.png"></div><h4 id="stage-1-load-subresource"><a class="markdownIt-Anchor" href="#stage-1-load-subresource"></a> Stage 1: Load Subresource</h4><ul><li><code>Preload Scanner</code>: Load <code>images</code>, <code>CSS</code> and <code>JavaScript</code> from <strong>Cache</strong> or <strong>Network</strong></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-13-10-23.png"></div><ul><li><p><strong>Javascript Block</strong></p><ul><li>When the HTML parser finds a <code>&lt;script&gt;</code> tag, it pauses the parsing of the HTML document and has to load, parse, and execute the JavaScript code.</li><li>Because JavaScript can change the shape of the document using things like <code>document.write()</code> which changes the entire DOM structure.</li></ul></li><li><p><strong>Customize Javascript Loading</strong></p><ul><li>If your JavaScript does not use <code>document.write()</code>, you can add <code>async</code> or <code>defer</code> attribute to the <code>&lt;script&gt;</code>tag. The browser then loads and runs the JavaScript code asynchronously and does not block the parsing.</li><li>You may also use JavaScript module if that’s suitable. <code>&lt;link rel=&quot;preload&quot;&gt;</code> is a way to inform browser that the resource is definitely needed for current navigation and you would like to download as soon as possible.</li></ul></li></ul><a id="more"></a><h3 id="compute-style"><a class="markdownIt-Anchor" href="#compute-style"></a> Compute Style</h3><h4 id="stage-1-convert-css-to-stylesheets"><a class="markdownIt-Anchor" href="#stage-1-convert-css-to-stylesheets"></a> Stage 1: Convert CSS to styleSheets</h4><ul><li>Input: <code>CSS</code></li><li>Process: calculate style for each DOM node.</li><li>Output: <code>styleSheets</code></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-35-12.png"></div><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-35-23.png"></div><h4 id="stage-2-css-rule-standardization"><a class="markdownIt-Anchor" href="#stage-2-css-rule-standardization"></a> Stage 2: CSS Rule Standardization</h4><ul><li>Process: <strong>standardize</strong> css values</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-40-38.png"></div><h4 id="stage-3-apply-css-rules-to-dom-tree"><a class="markdownIt-Anchor" href="#stage-3-apply-css-rules-to-dom-tree"></a> Stage 3: Apply CSS Rules to DOM Tree</h4><ul><li>Process: Appy <strong>inheritance</strong>, <strong>Cascade rules</strong></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-42-49.png"></div><ul><li><code>Inpection: Chrome &gt; Elements &gt; Computed</code></li></ul><h3 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> Layout</h3><h4 id="stage-1-prepare-layout-tree"><a class="markdownIt-Anchor" href="#stage-1-prepare-layout-tree"></a> Stage 1: Prepare Layout Tree</h4><ul><li>Input: <code>DOM</code>, <code>styleSheets</code></li><li>Process: Traverse <strong>visble</strong> node of DOM tree, apply <code>styleSheets</code> rules</li><li>Output: <strong>Layout Tree</strong></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-51-24.png"></div><h4 id="stage-2-compute-layout"><a class="markdownIt-Anchor" href="#stage-2-compute-layout"></a> Stage 2: Compute Layout</h4><ul><li>Input: Layout Tree</li><li>Process: compute <strong>coordinates</strong></li><li>output: Layout Tree (future - <code>LayoutNG</code>)</li></ul><h3 id="layer"><a class="markdownIt-Anchor" href="#layer"></a> Layer</h3><h4 id="stage-1-build-layer"><a class="markdownIt-Anchor" href="#stage-1-build-layer"></a> Stage 1: Build Layer</h4><ul><li>Process: the main thread walk through the layout tree to generate layers based on animation, z-index and so on</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-15-10-22.png"></div><h3 id="paint"><a class="markdownIt-Anchor" href="#paint"></a> Paint</h3><h4 id="stage-1-generate-paint-orders"><a class="markdownIt-Anchor" href="#stage-1-generate-paint-orders"></a> Stage 1: Generate Paint Orders</h4><h3 id="composition"><a class="markdownIt-Anchor" href="#composition"></a> Composition</h3><h4 id="stage-1-rasterization"><a class="markdownIt-Anchor" href="#stage-1-rasterization"></a> Stage 1: Rasterization</h4><ul><li><code>Compositor thread</code> divides each <code>layer</code> to small <code>tiles</code></li><li><code>Compositor thread</code> <strong>prioritizes</strong> and <strong>sends</strong> tiles to <code>raster threads</code></li><li>After rasterization, <code>Raster threads</code> will store result in GPU Memory and return <code>Draw quads</code> to <code>compositor thread</code></li></ul><h4 id="stage-2-display"><a class="markdownIt-Anchor" href="#stage-2-display"></a> Stage 2: Display</h4><ul><li><code>Compositor thread</code> will collect <code>Draw Quads</code> and combine them as the <strong>Compositor Frame</strong></li><li>Then the <strong>compositor Frame</strong> will be sent to the <strong>Browser Process</strong> via <code>IPC</code></li><li>The <strong>Browser Process</strong> then will send the <strong>Compositor Frame</strong> to <code>GPU</code> and let the GPU to <code>display</code>.</li></ul><h3 id="important-concepts"><a class="markdownIt-Anchor" href="#important-concepts"></a> Important Concepts</h3><blockquote><p>Raster Turning this information into pixels on the screen is called rasterizing.<br>Compositing: Compositing is a technique to <code>separate</code> parts of a page into <code>layers</code>, <code>rasterize</code> them <code>separately</code>, and <strong>composite</strong> as a page in a separate thread called <code>compositor thread</code>. If scroll happens, since layers are <strong>already</strong> rasterized, all it has to do is to <code>composite a new frame</code>.</p></blockquote><h3 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> Optimization</h3><h4 id="重排"><a class="markdownIt-Anchor" href="#重排"></a> 重排</h4><blockquote><p>通过JavaScript或者CSS改变元素的几何位置属性</p></blockquote><ul><li>影响: Layout Tree及后面的步骤全都得重来</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-15-37-43.png"></div><h4 id="重绘"><a class="markdownIt-Anchor" href="#重绘"></a> 重绘</h4><blockquote><p>通过JavaScript更改元素的样式</p></blockquote><ul><li>影响: 触发Paint及后面的步骤全都得重来</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-15-43-13.png"></div><h4 id="合成"><a class="markdownIt-Anchor" href="#合成"></a> 合成</h4><blockquote><p>执行<code>transform</code>或者<code>opacity</code>的操作</p></blockquote><ul><li>影响：触发Rasterization及后面的步骤全部重来</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-15-43-26.png"></div><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL0hvbWU=" title="https://www.chromium.org/Home">Chromium Project<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wOS9pbnNpZGUtYnJvd3Nlci1wYXJ0Mw==" title="https://developers.google.com/web/updates/2018/09/inside-browser-part3">Google: Inside look at modern web browser (part 3)<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMTgyMDU=" title="https://time.geekbang.org/column/article/118205">05 | 渲染流程（上）：HTML、CSS和JavaScript，是如何变成页面的？<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;渲染过程详解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#渲染过程详解&quot;&gt;&lt;/a&gt; 渲染过程详解&lt;/h2&gt;
&lt;h3 id=&quot;dom-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dom-tree&quot;&gt;&lt;/a&gt; DOM Tree&lt;/h3&gt;
&lt;h4 id=&quot;stage-1-build-dom-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stage-1-build-dom-tree&quot;&gt;&lt;/a&gt; Stage 1: Build DOM Tree&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Input: &lt;code&gt;HTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Process: parse html&lt;/li&gt;
&lt;li&gt;Output: &lt;code&gt;DOM Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-12-33-25.png&quot;&gt;&lt;/div&gt;
&lt;h4 id=&quot;stage-1-load-subresource&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stage-1-load-subresource&quot;&gt;&lt;/a&gt; Stage 1: Load Subresource&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Preload Scanner&lt;/code&gt;: Load &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt; from &lt;strong&gt;Cache&lt;/strong&gt; or &lt;strong&gt;Network&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-13-10-23.png&quot;&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Javascript Block&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the HTML parser finds a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, it pauses the parsing of the HTML document and has to load, parse, and execute the JavaScript code.&lt;/li&gt;
&lt;li&gt;Because JavaScript can change the shape of the document using things like &lt;code&gt;document.write()&lt;/code&gt; which changes the entire DOM structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customize Javascript Loading&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your JavaScript does not use &lt;code&gt;document.write()&lt;/code&gt;, you can add &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;defer&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;tag. The browser then loads and runs the JavaScript code asynchronously and does not block the parsing.&lt;/li&gt;
&lt;li&gt;You may also use JavaScript module if that’s suitable. &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; is a way to inform browser that the resource is definitely needed for current navigation and you would like to download as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Browser" scheme="https://geekeast.github.io/categories/Developer/Browser/"/>
    
    
      <category term="Chrome" scheme="https://geekeast.github.io/tags/Chrome/"/>
    
      <category term="Render" scheme="https://geekeast.github.io/tags/Render/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Navigation</title>
    <link href="https://geekeast.github.io/Developer/browser/chromenavigation.html"/>
    <id>https://geekeast.github.io/Developer/browser/chromenavigation.html</id>
    <published>2019-11-28T01:01:01.000Z</published>
    <updated>2019-11-28T01:01:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="chrome导航"><a class="markdownIt-Anchor" href="#chrome导航"></a> Chrome导航</h3><h4 id="导航流程"><a class="markdownIt-Anchor" href="#导航流程"></a> 导航流程</h4><blockquote><p>用户发出 URL 请求到页面开始解析的这个过程，就叫做导航</p></blockquote><ul><li><strong>用户输入</strong>: 用户在浏览器进程里输入<code>请求信息</code>, <code>UI进程</code>将会处理<code>用户输入</code></li><li><strong>导航开始</strong>: 发起<code>URL请求</code>,中间伴随DNS查找, TLS链接等过程，(可能有<strong>重定向</strong>发生); <strong>Spinner开始转转转</strong></li><li><strong>网络进程</strong>: 获取<code>响应</code>信息, <strong>网络进程</strong>将会读取<code>响应头</code>, 确认<code>请求类型</code>; 同时伴随着安全检查(CORB)<ul><li>content-type: html -&gt; <strong>继续导航</strong></li><li>content-type: application/octet-stream -&gt; <strong>下载文件，导航终止</strong></li></ul></li><li><strong>渲染准备</strong>: 一般情况下，<code>浏览器进程</code>这时会开始分配<code>渲染进程</code>, 优化的方法是在浏览器开始发起HTTP请求的时候(即<code>导航开始</code>的时候)，渲染进程的分配也同步开始;<ul><li><code>一般</code>每个页面对应一个渲染流程</li><li><strong>同一站点</strong>(根域名、协议相同)公用一个渲染进程，前提是从一个页面中<strong>单击</strong>打开了另外一个页面<code>process-per-site-instance</code></li></ul></li><li><strong>导航提交</strong>: 当<code>网络进程数据</code>和<code>渲染进程</code>全部<strong>就绪</strong><ul><li><code>浏览器进程</code>通知<code>渲染进程</code>提交导航;</li><li>同时<code>传输数据</code>给<code>渲染进程</code></li></ul></li><li><strong>提交确认</strong>: <code>渲染进程</code><strong>确认</strong>提交导航，并将此消息通知浏览器进程; <strong>此时导航正式结束</strong><ul><li><code>地址栏</code>更新</li><li><code>安全状态</code>更新</li><li><code>前进后退</code>更新(Histroy Session)</li></ul></li><li><strong>渲染阶段</strong>: <code>渲染进程</code>开始进入<code>页面解析</code>阶段</li><li><strong>渲染完成</strong>，<code>渲染进程</code>发送消息给<code>浏览器进程</code>，<strong>浏览器停止标签加载动画</strong></li></ul><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ul><li>导航是指从<code>用户输入</code>请求到<code>渲染开始</code>之<strong>前</strong>的这个<strong>准备</strong>过程</li><li>导航过程中会发生<code>HTTP请求</code>、<code>渲染进程分配</code></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-10-56-35.png"></div><a id="more"></a><h4 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wOS9pbnNpZGUtYnJvd3Nlci1wYXJ0Mg==" title="https://developers.google.com/web/updates/2018/09/inside-browser-part2">Browser Navigation<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzcyNmQyMzZmYjlhMDQ5ZTMwOGJhNGE=" title="https://juejin.im/post/5c726d236fb9a049e308ba4a">现代浏览器内部工作原理<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMTc2Mzc=" title="https://time.geekbang.org/column/article/117637">04 | 导航流程：从输入URL到页面展示，这中间发生了什么？(抄对也行啊)<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;chrome导航&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#chrome导航&quot;&gt;&lt;/a&gt; Chrome导航&lt;/h3&gt;
&lt;h4 id=&quot;导航流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#导航流程&quot;&gt;&lt;/a&gt; 导航流程&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;用户发出 URL 请求到页面开始解析的这个过程，就叫做导航&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户输入&lt;/strong&gt;: 用户在浏览器进程里输入&lt;code&gt;请求信息&lt;/code&gt;, &lt;code&gt;UI进程&lt;/code&gt;将会处理&lt;code&gt;用户输入&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导航开始&lt;/strong&gt;: 发起&lt;code&gt;URL请求&lt;/code&gt;,中间伴随DNS查找, TLS链接等过程，(可能有&lt;strong&gt;重定向&lt;/strong&gt;发生); &lt;strong&gt;Spinner开始转转转&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络进程&lt;/strong&gt;: 获取&lt;code&gt;响应&lt;/code&gt;信息, &lt;strong&gt;网络进程&lt;/strong&gt;将会读取&lt;code&gt;响应头&lt;/code&gt;, 确认&lt;code&gt;请求类型&lt;/code&gt;; 同时伴随着安全检查(CORB)
&lt;ul&gt;
&lt;li&gt;content-type: html -&amp;gt; &lt;strong&gt;继续导航&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;content-type: application/octet-stream -&amp;gt; &lt;strong&gt;下载文件，导航终止&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渲染准备&lt;/strong&gt;: 一般情况下，&lt;code&gt;浏览器进程&lt;/code&gt;这时会开始分配&lt;code&gt;渲染进程&lt;/code&gt;, 优化的方法是在浏览器开始发起HTTP请求的时候(即&lt;code&gt;导航开始&lt;/code&gt;的时候)，渲染进程的分配也同步开始;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;一般&lt;/code&gt;每个页面对应一个渲染流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同一站点&lt;/strong&gt;(根域名、协议相同)公用一个渲染进程，前提是从一个页面中&lt;strong&gt;单击&lt;/strong&gt;打开了另外一个页面&lt;code&gt;process-per-site-instance&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导航提交&lt;/strong&gt;: 当&lt;code&gt;网络进程数据&lt;/code&gt;和&lt;code&gt;渲染进程&lt;/code&gt;全部&lt;strong&gt;就绪&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;浏览器进程&lt;/code&gt;通知&lt;code&gt;渲染进程&lt;/code&gt;提交导航;&lt;/li&gt;
&lt;li&gt;同时&lt;code&gt;传输数据&lt;/code&gt;给&lt;code&gt;渲染进程&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提交确认&lt;/strong&gt;: &lt;code&gt;渲染进程&lt;/code&gt;&lt;strong&gt;确认&lt;/strong&gt;提交导航，并将此消息通知浏览器进程; &lt;strong&gt;此时导航正式结束&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;地址栏&lt;/code&gt;更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;安全状态&lt;/code&gt;更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;前进后退&lt;/code&gt;更新(Histroy Session)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渲染阶段&lt;/strong&gt;: &lt;code&gt;渲染进程&lt;/code&gt;开始进入&lt;code&gt;页面解析&lt;/code&gt;阶段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渲染完成&lt;/strong&gt;，&lt;code&gt;渲染进程&lt;/code&gt;发送消息给&lt;code&gt;浏览器进程&lt;/code&gt;，&lt;strong&gt;浏览器停止标签加载动画&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#总结&quot;&gt;&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;导航是指从&lt;code&gt;用户输入&lt;/code&gt;请求到&lt;code&gt;渲染开始&lt;/code&gt;之&lt;strong&gt;前&lt;/strong&gt;的这个&lt;strong&gt;准备&lt;/strong&gt;过程&lt;/li&gt;
&lt;li&gt;导航过程中会发生&lt;code&gt;HTTP请求&lt;/code&gt;、&lt;code&gt;渲染进程分配&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-28-10-56-35.png&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Browser" scheme="https://geekeast.github.io/categories/Developer/Browser/"/>
    
    
      <category term="Chrome" scheme="https://geekeast.github.io/tags/Chrome/"/>
    
      <category term="Navigation" scheme="https://geekeast.github.io/tags/Navigation/"/>
    
  </entry>
  
  <entry>
    <title>How HTTP works?</title>
    <link href="https://geekeast.github.io/Developer/network/httpfun.html"/>
    <id>https://geekeast.github.io/Developer/network/httpfun.html</id>
    <published>2019-11-27T13:06:14.000Z</published>
    <updated>2019-11-27T13:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h3><blockquote><p>HTTP协议建立在TCP连接基础上，是一种允许浏览器向服务器获取资源的协议。</p></blockquote><h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h4><ul><li>为什么第一次访问站点时，打开速度很慢，再次访问时，速度就很快了？</li><li>当登录一个网站后，下次再访问该站点，就已经处于登录状态了？</li></ul><h4 id="http请求流程"><a class="markdownIt-Anchor" href="#http请求流程"></a> HTTP请求流程</h4><ol><li>构建请求  <code>GET /index.html HTTP1.1</code></li><li>查找浏览器缓存，如果有则直接返回，没有则继续下一步</li><li>查找DNS缓存，如果有则进行下一步，没有则请求DNS服务器</li><li>Chrome同域名最多6个tcp链接; 如果是第六个之后，则进入TCP队列进行等待，否则进行下一步</li><li>建立TCP连接。进行3次握手</li></ol><a id="more"></a><ol start="6"><li>发送HTTP请求</li></ol><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-23-24-34.png"></div><ol start="7"><li>返回请求</li></ol><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-23-25-48.png"></div><ol start="8"><li>或者重定向：如果响应状态吗是3xx, 则要进行重定向，导引到另外一个页面，要从1再开始</li><li>最后断开或者保持链接： <code>Connection: Keep-Alive</code>的情况下要保持链接，否则正常断开链接</li></ol><h4 id="问题解决"><a class="markdownIt-Anchor" href="#问题解决"></a> 问题解决:</h4><ul><li>为什么第一次访问站点时，打开速度很慢，再次访问时，速度就很快了？- <strong>缓存</strong><ul><li>通过响应头中的<code>Cache-Control</code>来控制是<code>是否缓存</code>，<code>缓存周期</code>等等</li></ul></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-23-31-16.png"></div><ul><li>当登录一个网站后，下次再访问该站点，就已经处于登录状态了？- Cookies<ul><li>通过响应头中的<code>Set-Cookie</code>来添加cookie，存储在请求头的<code>Cookie</code>字段中</li></ul></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-23-34-54.png"></div><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-23-35-27.png"></div><h4 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMTY1ODg=" title="https://time.geekbang.org/column/article/116588">03 | HTTP请求流程：为什么很多站点第二次打开速度会很快？<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;http&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#http&quot;&gt;&lt;/a&gt; HTTP&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP协议建立在TCP连接基础上，是一种允许浏览器向服务器获取资源的协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为什么第一次访问站点时，打开速度很慢，再次访问时，速度就很快了？&lt;/li&gt;
&lt;li&gt;当登录一个网站后，下次再访问该站点，就已经处于登录状态了？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;http请求流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#http请求流程&quot;&gt;&lt;/a&gt; HTTP请求流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;构建请求  &lt;code&gt;GET /index.html HTTP1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查找浏览器缓存，如果有则直接返回，没有则继续下一步&lt;/li&gt;
&lt;li&gt;查找DNS缓存，如果有则进行下一步，没有则请求DNS服务器&lt;/li&gt;
&lt;li&gt;Chrome同域名最多6个tcp链接; 如果是第六个之后，则进入TCP队列进行等待，否则进行下一步&lt;/li&gt;
&lt;li&gt;建立TCP连接。进行3次握手&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Network" scheme="https://geekeast.github.io/categories/Developer/Network/"/>
    
    
      <category term="Network" scheme="https://geekeast.github.io/tags/Network/"/>
    
      <category term="HTTP" scheme="https://geekeast.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>How TCP/IP Works</title>
    <link href="https://geekeast.github.io/Developer/network/tcpipfun.html"/>
    <id>https://geekeast.github.io/Developer/network/tcpipfun.html</id>
    <published>2019-11-27T06:01:45.000Z</published>
    <updated>2019-11-27T06:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tcpip-工作原理"><a class="markdownIt-Anchor" href="#tcpip-工作原理"></a> TCP/IP 工作原理</h3><h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h4><ul><li>Packet如何送达<strong>主机</strong>?</li><li>主机如何将Packet<strong>转交</strong>给应用?</li><li>Packet是如何被<strong>完整地</strong>送达应用程序？</li></ul><h4 id="主机定位"><a class="markdownIt-Anchor" href="#主机定位"></a> 主机定位</h4><ul><li><strong>网络层</strong>:- 通过Internet Protocol, 即<strong>IP</strong></li><li>数据在经过<strong>网络层</strong>时，会被加上<strong>IP头</strong>，其中包含<strong>IP</strong>地址，再传入下一层</li></ul><h4 id="程序定位udp"><a class="markdownIt-Anchor" href="#程序定位udp"></a> 程序定位UDP</h4><ul><li><strong>传输层</strong>:- 通过User Datagram Protocol, 即<strong>UDP</strong></li><li>数据在经过<strong>传输层</strong>时，会被加上<strong>UDP头</strong>，其中包含<strong>端口号</strong> ，再传入下一层</li><li>特性: 传输速度<strong>快</strong>; 无<strong>重发</strong>机制，不能保证<strong>数据可靠性</strong>; 无数据组装还原机制</li><li>应用: <strong>在线视频</strong>、<strong>互动游戏</strong></li></ul><a id="more"></a><h4 id="程序定位-完整送达tcp"><a class="markdownIt-Anchor" href="#程序定位-完整送达tcp"></a> 程序定位 + 完整送达TCP</h4><ul><li><strong>传输层</strong>:- 通过Transmission Control Protocol, 即<strong>TCP</strong></li><li><strong>TCP</strong>也能够通过端口号定位程序</li><li>数据在经过<strong>传输层</strong>时，会被加上<strong>TCP头</strong>，其中包含<code>端口号</code>和<code>重构序号</code></li><li>特性: 传输速度<strong>慢</strong>；有<strong>重传</strong>机制；数<strong>据包排序机制</strong>，能够<strong>重构</strong>为完整文件</li></ul><h4 id="tcp连接生命周期"><a class="markdownIt-Anchor" href="#tcp连接生命周期"></a> TCP连接生命周期</h4><ul><li>建立链接: <strong>三</strong>次握手: 一次发起，两次确认；</li><li>传输数据: 接收端需要对接收到<strong>每个</strong>数据包进行核对确认; 如果发送数据包，<code>很久都未收到返回的数据包</code>，则判别为数据包<code>丢失</code>，启动<strong>重传</strong>机制；大的数据包会被分解成小的数据包，按照<code>序号</code>在接收端进行<strong>组合</strong>。</li><li>断开链接: <strong>四</strong>次分手: 前两次保证关闭<code>发送端</code>；后两次保证关闭<code>接收端</code>；</li></ul><blockquote><p><code>三次握手</code>，<code>数据包验证机制</code>以及<code>四次握手</code>，传输的数据包总数量提高了<code>一倍</code>，传输时间变<strong>长</strong>。</p></blockquote><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ul><li>IP负责定位主机</li><li>UDP/TCP负责定位应用程序</li></ul><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMTM1NTA=" title="https://time.geekbang.org/column/article/113550">02 | TCP协议：如何保证页面文件能被完整送达浏览器？<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;tcpip-工作原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcpip-工作原理&quot;&gt;&lt;/a&gt; TCP/IP 工作原理&lt;/h3&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Packet如何送达&lt;strong&gt;主机&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;主机如何将Packet&lt;strong&gt;转交&lt;/strong&gt;给应用?&lt;/li&gt;
&lt;li&gt;Packet是如何被&lt;strong&gt;完整地&lt;/strong&gt;送达应用程序？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;主机定位&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主机定位&quot;&gt;&lt;/a&gt; 主机定位&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络层&lt;/strong&gt;:- 通过Internet Protocol, 即&lt;strong&gt;IP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据在经过&lt;strong&gt;网络层&lt;/strong&gt;时，会被加上&lt;strong&gt;IP头&lt;/strong&gt;，其中包含&lt;strong&gt;IP&lt;/strong&gt;地址，再传入下一层&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;程序定位udp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#程序定位udp&quot;&gt;&lt;/a&gt; 程序定位UDP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;:- 通过User Datagram Protocol, 即&lt;strong&gt;UDP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据在经过&lt;strong&gt;传输层&lt;/strong&gt;时，会被加上&lt;strong&gt;UDP头&lt;/strong&gt;，其中包含&lt;strong&gt;端口号&lt;/strong&gt; ，再传入下一层&lt;/li&gt;
&lt;li&gt;特性: 传输速度&lt;strong&gt;快&lt;/strong&gt;; 无&lt;strong&gt;重发&lt;/strong&gt;机制，不能保证&lt;strong&gt;数据可靠性&lt;/strong&gt;; 无数据组装还原机制&lt;/li&gt;
&lt;li&gt;应用: &lt;strong&gt;在线视频&lt;/strong&gt;、&lt;strong&gt;互动游戏&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Network" scheme="https://geekeast.github.io/categories/Developer/Network/"/>
    
    
      <category term="TCP/IP" scheme="https://geekeast.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>OSI 7 Layers</title>
    <link href="https://geekeast.github.io/Developer/network/osi7.html"/>
    <id>https://geekeast.github.io/Developer/network/osi7.html</id>
    <published>2019-11-27T05:32:58.000Z</published>
    <updated>2019-11-27T05:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="osi七层模型"><a class="markdownIt-Anchor" href="#osi七层模型"></a> OSI七层模型</h3><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-15-38-46.png"></div><p><strong>英语速记</strong>：<code>All People Seem To Need Data Processing</code>.</p><a id="more"></a><h4 id="第七层-application"><a class="markdownIt-Anchor" href="#第七层-application"></a> 第七层-Application</h4><ul><li>打开浏览器，需要DNS解析域名来获取对应IP；然后再通过HTTP来下载内容</li><li>包含协议: <strong>DNS</strong>, <strong>HTTP</strong>; <strong>Websocket</strong> FTP; DHCP; POP3: SMTP</li></ul><h4 id="第六层-presentation"><a class="markdownIt-Anchor" href="#第六层-presentation"></a> 第六层-Presentation</h4><ul><li>主要负责数据的转换，压缩和加密</li><li>包含协议: <strong>SSL</strong></li></ul><h4 id="第五层-session"><a class="markdownIt-Anchor" href="#第五层-session"></a> 第五层-Session</h4><ul><li>会话指两个应用程序进程之间的逻辑连接；</li><li><code>会话层</code>提供用来创建、管理和终止会话的方法: <strong>API</strong>: <code>NetBIOS</code>, <code>RPC</code>, <code>Socket API</code></li><li>同时负责管理和确定<code>传输方式</code>：<ul><li><strong>单工(Simplex)</strong>: 任何时间只能从A-&gt;B</li><li><strong>半双工(Half-Duplex)</strong>: 可以从A-&gt;B,也可以从B-&gt;A,同一时间只能选择一个方向</li><li><strong>全双工(Full-Duplex):</strong> 同时双向传输</li></ul></li></ul><h4 id="第四层-transport"><a class="markdownIt-Anchor" href="#第四层-transport"></a> 第四层-Transport</h4><ul><li><code>TCP</code>: 可以一次性写入很多数据，自动分包；低速；可靠</li><li><code>UDP</code>: 不宜一次性写入太多数据，导致IP分段；高速；不可靠</li><li><code>TCP/UDP</code>通过<code>多路复用</code>和<code>多路分解</code>来<strong>识别</strong>和<strong>标记</strong>应用程序</li></ul><h4 id="第三层-network"><a class="markdownIt-Anchor" href="#第三层-network"></a> 第三层-Network</h4><ul><li>关心如何把数据从一个设备发送到网络里的另外一个设备，<strong>WAN</strong>， <strong>路由器</strong></li><li><strong>地址</strong>、<strong>路由</strong>、分段、重组</li><li>包含协议：<code>IP</code></li></ul><h4 id="第二层-data-link"><a class="markdownIt-Anchor" href="#第二层-data-link"></a> 第二层-Data Link</h4><ul><li>只关心如何把数据发送到<strong>LAN</strong>中: <strong>交换机</strong></li><li>重要概念: <strong>MAC</strong>地址</li></ul><h4 id="第一层-physical"><a class="markdownIt-Anchor" href="#第一层-physical"></a> 第一层-Physical</h4><ul><li>硬件规范</li><li>编码信号</li><li><strong>实际发送</strong></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/osi.png"></div><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTk4ZTFmN2YyNjVkYTIzNzQxMDY5NGU=" title="https://juejin.im/post/5a98e1f7f265da237410694e">网络分层TCP/IP 与HTTP<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;osi七层模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#osi七层模型&quot;&gt;&lt;/a&gt; OSI七层模型&lt;/h3&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-15-38-46.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;英语速记&lt;/strong&gt;：&lt;code&gt;All People Seem To Need Data Processing&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Network" scheme="https://geekeast.github.io/categories/Developer/Network/"/>
    
    
      <category term="OSI" scheme="https://geekeast.github.io/tags/OSI/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Architecture</title>
    <link href="https://geekeast.github.io/Developer/browser/chromearchitecture.html"/>
    <id>https://geekeast.github.io/Developer/browser/chromearchitecture.html</id>
    <published>2019-11-27T04:11:42.000Z</published>
    <updated>2019-11-27T04:11:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chrome-architecture"><a class="markdownIt-Anchor" href="#chrome-architecture"></a> Chrome Architecture</h2><h3 id="task-manager"><a class="markdownIt-Anchor" href="#task-manager"></a> Task Manager</h3><blockquote><p>More Tools &gt; Task Mangager</p></blockquote><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-10-20-09.png"></div><h3 id="单进程浏览器"><a class="markdownIt-Anchor" href="#单进程浏览器"></a> 单进程浏览器</h3><ul><li>浏览器的所有功能模块都运行在同一个进程且同一个线程当中</li></ul><h4 id="存在问题"><a class="markdownIt-Anchor" href="#存在问题"></a> 存在问题</h4><ul><li>不稳定：任意意外都会引起整个浏览器的崩溃</li><li>不流畅：同步执行一卡则全卡，还有内存泄露(只有一个heap)</li><li>不安全：恶意插件和恶意脚本可以从任何从浏览器的任何一大个地方access系统资源</li></ul><h3 id="多进程浏览器"><a class="markdownIt-Anchor" href="#多进程浏览器"></a> 多进程浏览器</h3><h4 id="早期chrome"><a class="markdownIt-Anchor" href="#早期chrome"></a> 早期Chrome</h4><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-14-17-26.png"></div><ul><li>稳定：进程相互隔离</li><li>流畅：多个渲染进程，卡也只卡一个页面；关闭单个页面，单个heap回收，解决泄露</li><li>安全: 安全沙箱，不能在硬盘写如数据，不能在敏感位置读取数据</li></ul><a id="more"></a><h4 id="现代chrome"><a class="markdownIt-Anchor" href="#现代chrome"></a> 现代Chrome</h4><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-14-21-18.png"></div><ul><li><strong>Browser</strong>: 浏览器本身页面显示，用户交互，进程管理，存储功能</li><li><strong>Tabs(Renders)</strong>: 排版引擎Blink, V8引擎；Critical Render Path</li><li><strong>Plugins</strong>: 负责插件运行</li><li><strong>GPU</strong>: GPU负责UI界面绘制</li><li><strong>Extensions(plugins)</strong>: 负责拓展运行</li><li><strong>Network</strong>: 网络资源加载</li></ul><h4 id="存在问题-2"><a class="markdownIt-Anchor" href="#存在问题-2"></a> 存在问题：</h4><ul><li><strong>更高的资源占用</strong>: 每个进程都会包含公共基础结构的<strong>副本</strong></li><li><strong>更复杂的体系结构</strong>: 模块间耦合性高，拓展性差</li></ul><h4 id="未来chrome"><a class="markdownIt-Anchor" href="#未来chrome"></a> 未来Chrome</h4><blockquote><p>2016年， Chrome官方团队使用<code>Services Oriented Architecture</code>; 各项模块会被重构成对立的 <strong>Service</strong>, 每个<strong>Service</strong>包含独立<strong>Process</strong>，<strong>Process</strong> 访问通过<strong>Interface</strong>编程来控制，通过<strong>IPC</strong>访问，从而构建一个更内聚，松耦合、易于维护和拓展的系统</p></blockquote><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-14-31-28.png"></div><ul><li>弹性模式:<ul><li>在资源受限的设备上，服务会整合到一个进程中，以节省内存占用</li><li>在性能强大的设备上，会采用多进程的方式运行</li></ul></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-14-33-22.png"></div><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMTM1MTM=" title="https://time.geekbang.org/column/article/113513">浏览器工作原理与实践<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wOS9pbnNpZGUtYnJvd3Nlci1wYXJ0MSNicm93c2VyLWFyY2hpdGVjdHVyZQ==" title="https://developers.google.com/web/updates/2018/09/inside-browser-part1#browser-architecture">Google: Browser Architecture<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;chrome-architecture&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#chrome-architecture&quot;&gt;&lt;/a&gt; Chrome Architecture&lt;/h2&gt;
&lt;h3 id=&quot;task-manager&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#task-manager&quot;&gt;&lt;/a&gt; Task Manager&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;More Tools &amp;gt; Task Mangager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-10-20-09.png&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;单进程浏览器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单进程浏览器&quot;&gt;&lt;/a&gt; 单进程浏览器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器的所有功能模块都运行在同一个进程且同一个线程当中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;存在问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#存在问题&quot;&gt;&lt;/a&gt; 存在问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不稳定：任意意外都会引起整个浏览器的崩溃&lt;/li&gt;
&lt;li&gt;不流畅：同步执行一卡则全卡，还有内存泄露(只有一个heap)&lt;/li&gt;
&lt;li&gt;不安全：恶意插件和恶意脚本可以从任何从浏览器的任何一大个地方access系统资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;多进程浏览器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多进程浏览器&quot;&gt;&lt;/a&gt; 多进程浏览器&lt;/h3&gt;
&lt;h4 id=&quot;早期chrome&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#早期chrome&quot;&gt;&lt;/a&gt; 早期Chrome&lt;/h4&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-14-17-26.png&quot;&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;稳定：进程相互隔离&lt;/li&gt;
&lt;li&gt;流畅：多个渲染进程，卡也只卡一个页面；关闭单个页面，单个heap回收，解决泄露&lt;/li&gt;
&lt;li&gt;安全: 安全沙箱，不能在硬盘写如数据，不能在敏感位置读取数据&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Browser" scheme="https://geekeast.github.io/categories/Developer/Browser/"/>
    
    
      <category term="Chrome" scheme="https://geekeast.github.io/tags/Chrome/"/>
    
      <category term="Architecture" scheme="https://geekeast.github.io/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Cocurrency vs Parallelism</title>
    <link href="https://geekeast.github.io/Computer%20Science/parallelism/simultaneousexe.html"/>
    <id>https://geekeast.github.io/Computer Science/parallelism/simultaneousexe.html</id>
    <published>2019-11-27T02:53:48.000Z</published>
    <updated>2019-11-27T02:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cocurrency-vs-parallelism"><a class="markdownIt-Anchor" href="#cocurrency-vs-parallelism"></a> Cocurrency vs Parallelism</h3><ul><li>Mutiple CPU cores: Parallelism with genuine simultaneous execution</li><li>Single CPU core: cocurrency with interleaving of process in time to give apperance of simultaneous execution.</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-13-14-20.png"></div><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JpYmJsZWxhYi5vcmcvQ0Jvb3RDYW1wLzdfTWVtb3J5X1N0YWNrX3ZzX0hlYXAuaHRtbA==" title="https://www.gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html">Stack and Heap<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JpYmJsZWxhYi5vcmcvQ0Jvb3RDYW1wLzFfV2h5X1Byb2dyYW1fSW5fQy5odG1s" title="https://www.gribblelab.org/CBootCamp/1_Why_Program_In_C.html">Language C<i class="fa fa-external-link"></i></span></li></ul><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cocurrency-vs-parallelism&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cocurrency-vs-parallelism&quot;&gt;&lt;/a&gt; Cocurrency vs Parallelism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mutiple CPU cores: Parallelism with genuine simultaneous execution&lt;/li&gt;
&lt;li&gt;Single CPU core: cocurrency with interleaving of process in time to give apperance of simultaneous execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center; margin:auto&quot;&gt;&lt;img src=&quot;https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-13-14-20.png&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack and Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gribblelab.org/CBootCamp/1_Why_Program_In_C.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Language C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="https://geekeast.github.io/categories/Computer-Science/"/>
    
      <category term="Parallelism" scheme="https://geekeast.github.io/categories/Computer-Science/Parallelism/"/>
    
    
      <category term="Cocurrency" scheme="https://geekeast.github.io/tags/Cocurrency/"/>
    
      <category term="Parallelism" scheme="https://geekeast.github.io/tags/Parallelism/"/>
    
  </entry>
  
  <entry>
    <title>Program vs Process vs Thread</title>
    <link href="https://geekeast.github.io/Computer%20Science/parallelism/programprocessthread.html"/>
    <id>https://geekeast.github.io/Computer Science/parallelism/programprocessthread.html</id>
    <published>2019-11-27T02:44:49.000Z</published>
    <updated>2019-11-27T02:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="program-process-thread"><a class="markdownIt-Anchor" href="#program-process-thread"></a> Program, Process, Thread</h3><ul><li>MacOS: Activity Monitor</li><li>Windows: Task Manager</li><li>Linux: Top</li></ul><h4 id="program"><a class="markdownIt-Anchor" href="#program"></a> Program</h4><blockquote><p>the code stored on your computer disk or non-volatile memory to fulfill a certain task. Including System Programs and Application Programs.</p></blockquote><ul><li>Program will be compiled or programmed to binary in memory before executing it.</li></ul><h4 id="process"><a class="markdownIt-Anchor" href="#process"></a> Process</h4><blockquote><p>An <code>instance</code> of program that has been loaded into <code>memory</code> along with all the <code>resources</code> needed to operate.</p></blockquote><ul><li>The <strong>Operating System</strong> handles the task manageing the resource needed to turn program into processes.</li><li>Resources includes:<ul><li><strong>register</strong>: some part of <strong>CPU</strong> to store <code>binary</code></li><li><strong>program counter</strong>: special <code>register</code> in <strong>CPU</strong> to do counter work</li><li><strong>stack</strong>: data structure to store <strong>local</strong> and <strong>small</strong> things in memory, managed <strong>automatically</strong>.</li><li><strong>heap</strong>: data structure to store <strong>global</strong> and <strong>big</strong> things in memory, managed <strong>manually</strong> or by <strong>Garbage Collection</strong>.</li></ul></li></ul><a id="more"></a><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-12-45-39.png" "></div>- Features:  - **One** program may be associated with **many** processes.  - **Independent** Memory Address Space.  - Inter-communication is **expensive**.  - **Robust**: One failed won't cause another to fail. <h4 id="thread"><a class="markdownIt-Anchor" href="#thread"></a> Thread</h4><blockquote><p>A unit of execution within a process. One process can have one up to many threads.</p></blockquote><ul><li>Features:<ul><li>Share the same <code>heap</code> in a process</li><li>Share the same <code>code</code> in a process</li><li>Has independent <code>registers</code></li><li>Has independent <code>stacks</code></li><li>Inter-communication is <strong>less expensive</strong></li><li><strong>Vulnerable</strong>: one fail can cause another to fail in the same process.</li></ul></li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-12-57-32.png"></div><h4 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h4><ul><li>The program starts out as a <code>text</code> file of programming <strong>code</strong>.</li><li>The program is <code>compiled</code> or <code>interpreted</code> into <strong>binary</strong> form.</li><li>The program is loaded into <code>memory</code>.</li><li>The program becomes <code>one</code> or <code>more</code> running <strong>processes</strong>.</li><li>Processes are <code>typically</code> <strong>independent</strong> of each other</li><li>While threads exists as the <code>subset</code> of a process</li><li>Threads can talk with each other more <code>easily</code> than processes can</li><li>Threads are <code>vulnerable</code> to problems caused by other threads in the same process.</li></ul><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-27-13-10-13.png"></div><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JpYmJsZWxhYi5vcmcvQ0Jvb3RDYW1wLzdfTWVtb3J5X1N0YWNrX3ZzX0hlYXAuaHRtbA==" title="https://www.gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html">Stack and Heap<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JpYmJsZWxhYi5vcmcvQ0Jvb3RDYW1wLzFfV2h5X1Byb2dyYW1fSW5fQy5odG1s" title="https://www.gribblelab.org/CBootCamp/1_Why_Program_In_C.html">Language C<i class="fa fa-external-link"></i></span></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;program-process-thread&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#program-process-thread&quot;&gt;&lt;/a&gt; Program, Process, Thread&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MacOS: Activity Monitor&lt;/li&gt;
&lt;li&gt;Windows: Task Manager&lt;/li&gt;
&lt;li&gt;Linux: Top&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;program&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#program&quot;&gt;&lt;/a&gt; Program&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;the code stored on your computer disk or non-volatile memory to fulfill a certain task. Including System Programs and Application Programs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Program will be compiled or programmed to binary in memory before executing it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;process&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#process&quot;&gt;&lt;/a&gt; Process&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;code&gt;instance&lt;/code&gt; of program that has been loaded into &lt;code&gt;memory&lt;/code&gt; along with all the &lt;code&gt;resources&lt;/code&gt; needed to operate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Operating System&lt;/strong&gt; handles the task manageing the resource needed to turn program into processes.&lt;/li&gt;
&lt;li&gt;Resources includes:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;register&lt;/strong&gt;: some part of &lt;strong&gt;CPU&lt;/strong&gt; to store &lt;code&gt;binary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;program counter&lt;/strong&gt;: special &lt;code&gt;register&lt;/code&gt; in &lt;strong&gt;CPU&lt;/strong&gt; to do counter work&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt;: data structure to store &lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;small&lt;/strong&gt; things in memory, managed &lt;strong&gt;automatically&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;heap&lt;/strong&gt;: data structure to store &lt;strong&gt;global&lt;/strong&gt; and &lt;strong&gt;big&lt;/strong&gt; things in memory, managed &lt;strong&gt;manually&lt;/strong&gt; or by &lt;strong&gt;Garbage Collection&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="https://geekeast.github.io/categories/Computer-Science/"/>
    
      <category term="Parallelism" scheme="https://geekeast.github.io/categories/Computer-Science/Parallelism/"/>
    
    
      <category term="C" scheme="https://geekeast.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/ajax.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/ajax.html</id>
    <published>2019-11-26T04:04:39.000Z</published>
    <updated>2019-11-26T04:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ajax"><a class="markdownIt-Anchor" href="#ajax"></a> AJAX</h3><blockquote><p>Asynchorous Javascript and XML</p></blockquote><h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h4><ul><li>Google Map: you don’t have to reload page in order to get more data when you <code>zoom in/out</code>.</li></ul><h4 id="background"><a class="markdownIt-Anchor" href="#background"></a> Background</h4><ul><li>Allows <code>javascript</code> to send <code>HTTP</code> request while previously <code>even a small change will cause the whole page to refresh</code>.</li><li>Allows <code>javascript</code> to update <code>small</code> chunk of data <code>asynchorously</code>.</li><li>以前是<strong>同步</strong>加载，一次性<strong>全部加载</strong>，卡卡卡卡。</li><li>现在是<strong>异步</strong>加载，按需<strong>多次</strong>加载<strong>小块</strong>，极大地提高了性能。</li></ul><h4 id="features"><a class="markdownIt-Anchor" href="#features"></a> Features</h4><ul><li>Don’t reload the page. <code>By Javascript HTTP Request</code></li><li>Request data asynchronously. <code>By Javascript - XMLHttpRequest</code></li><li>Reduce formatting of result load on Server. <code>By Javascript</code></li></ul><a id="more"></a><h4 id="xmlhttpreqeust"><a class="markdownIt-Anchor" href="#xmlhttpreqeust"></a> XMLHttpReqeust</h4><ul><li>Except in IE, where it’s an <code>ActiveX</code> object.</li><li><strong>Request</strong>: Use <code>XMLHttpRequest</code> object to make requests to the web server for data <strong>asynchronously</strong> or <strong>synchronously</strong>.</li><li><strong>Response</strong>: Receive server data as <code>XML</code> or <code>text</code> or <code>JSON</code></li><li><strong>Convert</strong>: Convert the <code>XML</code> inito a <code>DOM</code> tree</li><li><strong>Update</strong>: Extract data from the <strong>XML DOM tree</strong> and change the HTML <strong>document’s DOM tree</strong>, thus updating the page.</li></ul><h5 id="event"><a class="markdownIt-Anchor" href="#event"></a> Event</h5><ul><li><code>onreadystatechange</code></li></ul><h5 id="methods"><a class="markdownIt-Anchor" href="#methods"></a> Methods</h5><ul><li><code>open(method, url, async=true)</code></li><li><code>setRequestHeader(label, value)</code></li><li><code>send(content)</code></li></ul><h5 id="properties"><a class="markdownIt-Anchor" href="#properties"></a> Properties</h5><ul><li><code>readyState</code><ul><li>0: no connection</li><li>1: connected</li><li>2: Server received the Request</li><li>3: Server is processing the Request</li><li>4: Response is sent back</li></ul></li><li><code>status</code><ul><li>1xx <strong>informational</strong>: the request was received, continuing process</li><li>2xx <strong>successful</strong>: the request was successfully received, understood and accepted</li><li>3xx <strong>redirection</strong>: further action needs to be taken in order to complete the request</li><li>4xx <strong>client error</strong>: the request contains bad syntax or cannot be fulfilled</li><li>5xx <strong>server error</strong>:the server failed to fulfill an apparently valid request</li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9IVFRQX3N0YXR1c19jb2Rlcw==" title="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">In Detail<i class="fa fa-external-link"></i></span></li></ul></li></ul><h5 id="implementation-1"><a class="markdownIt-Anchor" href="#implementation-1"></a> Implementation 1</h5><ul><li><code>onreadystatechange</code> is available across all <strong>browsers</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initialize</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// callback</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received Response'</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h5 id="implementation-2"><a class="markdownIt-Anchor" href="#implementation-2"></a> Implementation 2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">const</span> method = <span class="string">'GET'</span>;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://randomuser.me/api/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requestListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">  <span class="keyword">let</span> user = data.results[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> fname = user.name.first;</span><br><span class="line">  <span class="keyword">let</span> lname = user.name.last;</span><br><span class="line">  <span class="keyword">let</span> src = user.picture.large;</span><br><span class="line">  <span class="built_in">console</span>.log(fname);</span><br><span class="line">  <span class="built_in">console</span>.log(lname);</span><br><span class="line">  <span class="built_in">console</span>.log(src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requestErrorListener = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xhr.onload = requestListener;</span><br><span class="line">xhr.onerror = requestErrorListener;</span><br><span class="line"></span><br><span class="line">xhr.open(method,url);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h5 id="encapsulation"><a class="markdownIt-Anchor" href="#encapsulation"></a> Encapsulation</h5><ul><li><code>onload</code> is available in <code>some</code> browsers.</li><li>the third parameter of <code>xhr.send()</code> is <code>true</code> <strong>by default</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// encapsulate the GET request</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// init</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config response type</span></span><br><span class="line">  xhr.responseType = <span class="string">'json'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set callbacks</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">      callback(<span class="literal">null</span>, xhr.response)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      callback(status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// open and send</span></span><br><span class="line">  xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the call back function</span></span><br><span class="line"><span class="keyword">const</span> cb = <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do the request</span></span><br><span class="line">getData(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>, cb)</span><br></pre></td></tr></table></figure><h4 id="fetch"><a class="markdownIt-Anchor" href="#fetch"></a> Fetch</h4><ul><li>A new native JavaScript API avaiable on the <code>window</code> object</li><li>Much <strong>easier</strong> to use compared to <code>XMLHttpRequest</code></li></ul><h5 id="get"><a class="markdownIt-Anchor" href="#get"></a> GET</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'https://jsonplaceholder.typicode.com/todos'</span>;</span><br><span class="line">fetch(url)</span><br><span class="line">  .then(<span class="function"><span class="params">success</span> =&gt;</span> success.json())</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'https://jsonplaceholder.typicode.com/todos'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> customPost = &#123;</span><br><span class="line">  title: <span class="string">'Hello World'</span>,</span><br><span class="line">  body: <span class="string">'This is my first post'</span>,</span><br><span class="line">  userID: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json; charset=UTF-8"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(customPost)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">success</span> =&gt;</span> success.json())</span><br><span class="line">  .then(<span class="built_in">console</span>.log)å</span><br><span class="line">  .catch(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h5 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h5><ul><li><code>json()</code>: return as json object in javascript</li><li><code>text()</code>: return as string</li><li><code>blob()</code>: used to manipulate <code>large</code> binary file in <code>disk</code></li><li><code>arrayBuffer()</code>: used to manipulate <code>small</code> binary file in <code>memeory</code></li></ul><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAyMjkxMDgyMTE0OTMxMi8xMDIzMDIyMzMyOTAyNDAw" title="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022332902400">AJAX 廖雪峰<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93YW5nZG9jLmNvbS9qYXZhc2NyaXB0Lw==" title="https://wangdoc.com/javascript/">AJAX 阮一峰<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93YW5nZG9jLmNvbS9qYXZhc2NyaXB0L29vcC9zdHJpY3QuaHRtbA==" title="https://wangdoc.com/javascript/oop/strict.html">JS: strict-mode<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93YW5nZG9jLmNvbS9qYXZhc2NyaXB0L2JvbS9zYW1lLW9yaWdpbi5odG1s" title="https://wangdoc.com/javascript/bom/same-origin.html">同源<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDI1ZTM0MjUxODgyNTUzZjA1OWRjYmM=" title="https://juejin.im/post/5d25e34251882553f059dcbc">AJAX 面试<i class="fa fa-external-link"></i></span></li></ul><h3 id="shared"><a class="markdownIt-Anchor" href="#shared"></a> Shared</h3><ul><li>Neither <code>XMLHttpRequest</code> nor <code>fetch</code> is defined in <strong>nodejs</strong>.</li><li>有 <code>Asynchronous</code> 必有 <code>callback</code></li><li>内生学习<ul><li>选择一个<code>不太好</code>的教程开始学习，<strong>有问题自己解决</strong></li><li>参考资源为<code>更好</code>的教程</li><li>启示: 一个东西要从<strong>不同的角度</strong>去看，<strong>不同的教程</strong>去学，以此来<strong>互相激发需求</strong></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ajax&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ajax&quot;&gt;&lt;/a&gt; AJAX&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Asynchorous Javascript and XML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;example&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#example&quot;&gt;&lt;/a&gt; Example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Google Map: you don’t have to reload page in order to get more data when you &lt;code&gt;zoom in/out&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;background&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#background&quot;&gt;&lt;/a&gt; Background&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Allows &lt;code&gt;javascript&lt;/code&gt; to send &lt;code&gt;HTTP&lt;/code&gt; request while previously &lt;code&gt;even a small change will cause the whole page to refresh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Allows &lt;code&gt;javascript&lt;/code&gt; to update &lt;code&gt;small&lt;/code&gt; chunk of data &lt;code&gt;asynchorously&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;以前是&lt;strong&gt;同步&lt;/strong&gt;加载，一次性&lt;strong&gt;全部加载&lt;/strong&gt;，卡卡卡卡。&lt;/li&gt;
&lt;li&gt;现在是&lt;strong&gt;异步&lt;/strong&gt;加载，按需&lt;strong&gt;多次&lt;/strong&gt;加载&lt;strong&gt;小块&lt;/strong&gt;，极大地提高了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;features&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#features&quot;&gt;&lt;/a&gt; Features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don’t reload the page. &lt;code&gt;By Javascript HTTP Request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Request data asynchronously. &lt;code&gt;By Javascript - XMLHttpRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reduce formatting of result load on Server. &lt;code&gt;By Javascript&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="AJAX" scheme="https://geekeast.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Prototype in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsprototype.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsprototype.html</id>
    <published>2019-11-25T04:38:43.000Z</published>
    <updated>2019-11-25T04:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="prototype"><a class="markdownIt-Anchor" href="#prototype"></a> Prototype</h3><blockquote><p>The <strong>prototype</strong> system follows the <strong>delegation</strong> pattern rather than the traditional <code>class</code> pattern</p></blockquote><h4 id="constructor-call"><a class="markdownIt-Anchor" href="#constructor-call"></a> Constructor Call</h4><ul><li>Objects are created by <code>contructor</code> call (using <code>new</code>)</li><li>Constructor is used to producing instances that link properties and methods define in the constructor and link to prototype.</li><li>2 Kinds of code reuse:<ul><li><code>Non-static</code>: One happens in the <code>constructor</code>: copy <code>values</code></li><li><code>Static</code>: Another happens in the <code>prototype chain</code>: copy <code>references</code></li></ul></li></ul><h4 id="old-school"><a class="markdownIt-Anchor" href="#old-school"></a> Old School</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">"Kyle"</span>);</span><br><span class="line"><span class="keyword">var</span> reactJS = <span class="keyword">new</span> Workshop(<span class="string">"Suzy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// deepJS doesn't have the ask method, how can he call it?</span></span><br><span class="line"><span class="comment">// by default, if there is no property existing in current object, it will go up along the prototype chain</span></span><br><span class="line">deepJS.ask(<span class="string">"Deep JS"</span>);</span><br><span class="line">reactJS.ask(<span class="string">"React JS"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="prototype-chain"><a class="markdownIt-Anchor" href="#prototype-chain"></a> Prototype Chain</h4><ul><li><code>contructor</code> is only a name, it’s not like the constructor in other programming language, like <code>java</code></li><li><strong>Contructor</strong> function has only <code>one</code> instance, <strong>prototype</strong> only has <code>one</code> instance, but the objects, essentially the <code>execution context</code> has <code>many</code>.</li></ul><blockquote><p>对象创建的过程，其实是使用同一构造器，创建不同execution context的过程。</p></blockquote><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-24-01-39-47.png"></div><h4 id="dunder-prototype"><a class="markdownIt-Anchor" href="#dunder-prototype"></a> Dunder Prototype</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">'Kyle'</span>);</span><br><span class="line"></span><br><span class="line">deepJS.constructor === Workshop; <span class="comment">// true</span></span><br><span class="line">deepJS.__proto__ === Workshop.prototype; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(deepJS) === Workshop.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>deepJS doesn’t have a property called <code>constructor</code>, so it goes up to its <strong>prototype</strong> and then it could find it, which is the <strong>Workshop</strong> function</li><li><code>deepJS</code> doesn’t have the <strong>dunder property</strong>, so it goes up its <code>prototype</code>, but found nothing called <code>__proto__</code>, so it continues to go up to the <strong>Object’s prototype</strong> and then found it! But, unexpectedly ,the <code>__proto__</code> is actually a <strong>function</strong>, not a state, it’s a <strong>getter</strong> function. <code>deepJS.__proto__</code> will use the deepJS as execution context and get the prototype of deepJS.</li></ul></blockquote><ul><li><strong>Infinite Recursion</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">"Kyle"</span>);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">deepJS.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// this refers to deepJS</span></span><br><span class="line">  <span class="keyword">this</span>.ask(question.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deepJS.ask(<span class="string">"Oops, is this infinite recursion?"</span>) <span class="comment">// yes!</span></span><br></pre></td></tr></table></figure><ul><li><strong>Fix using Dunder Proto</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">"Kyle"</span>);</span><br><span class="line">deepJS.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.__proto__.ask.call(<span class="keyword">this</span>,question.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deepJS.ask(<span class="string">"Oops, is this infinite recursion?"</span>) <span class="comment">// No!</span></span><br></pre></td></tr></table></figure><h4 id="inheritance"><a class="markdownIt-Anchor" href="#inheritance"></a> Inheritance</h4><ul><li><strong>Prototypal Inheritance</strong></li></ul><blockquote><p>原型链向上查找的过程并不会改变this的指向</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prototype</span></span><br><span class="line">Workshop.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// link constructor: 仅仅改变指向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnotherWorkshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  Workshop.call(<span class="keyword">this</span>, teacher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// link prototype： </span></span><br><span class="line">AnotherWorkshop.prototype = <span class="built_in">Object</span>.create(Workshop.prototype);</span><br><span class="line"></span><br><span class="line">AnotherWorkshop.prototype.speakUp = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.ask(msg.toUppderCase());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> JSRecentParts = <span class="keyword">new</span> AnotherWorkshop(<span class="string">'Kyle'</span>);</span><br><span class="line">JSRecentParts.speakUp(<span class="string">'Is this actually inheritance?'</span>);</span><br></pre></td></tr></table></figure><div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-24-14-50-18.png"></div><ul><li>Class Inheritance</li></ul><h4 id="class-inheritanace"><a class="markdownIt-Anchor" href="#class-inheritanace"></a> Class Inheritanace</h4><ul><li>Class Inheritanace <strong>copies</strong> objects;</li><li>Prototypal inhertiace <strong>links</strong> objects.</li></ul><h2 id="div-styletext-aligncenter-marginautoimg-srchttpsgeekeaskblogpicss3-ap-southeast-2amazonawscomposts2019-11-24-16-38-51pngdiv"><a class="markdownIt-Anchor" href="#div-styletext-aligncenter-marginautoimg-srchttpsgeekeaskblogpicss3-ap-southeast-2amazonawscomposts2019-11-24-16-38-51pngdiv"></a> <div style="text-align:center; margin:auto"><img src="https://geekeaskblogpics.s3-ap-southeast-2.amazonaws.com/posts/2019-11-24-16-38-51.png"></div></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;prototype&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#prototype&quot;&gt;&lt;/a&gt; Prototype&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;prototype&lt;/strong&gt; system follows the &lt;strong&gt;delegation&lt;/strong&gt; pattern rather than the traditional &lt;code&gt;class&lt;/code&gt; pattern&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;constructor-call&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#constructor-call&quot;&gt;&lt;/a&gt; Constructor Call&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Objects are created by &lt;code&gt;contructor&lt;/code&gt; call (using &lt;code&gt;new&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Constructor is used to producing instances that link properties and methods define in the constructor and link to prototype.&lt;/li&gt;
&lt;li&gt;2 Kinds of code reuse:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Non-static&lt;/code&gt;: One happens in the &lt;code&gt;constructor&lt;/code&gt;: copy &lt;code&gt;values&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Static&lt;/code&gt;: Another happens in the &lt;code&gt;prototype chain&lt;/code&gt;: copy &lt;code&gt;references&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;old-school&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#old-school&quot;&gt;&lt;/a&gt; Old School&lt;/h4&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Workshop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;teacher&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.teacher = teacher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Workshop.prototype.ask = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.teacher, question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deepJS = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Workshop(&lt;span class=&quot;string&quot;&gt;&quot;Kyle&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reactJS = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Workshop(&lt;span class=&quot;string&quot;&gt;&quot;Suzy&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// deepJS doesn&#39;t have the ask method, how can he call it?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// by default, if there is no property existing in current object, it will go up along the prototype chain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deepJS.ask(&lt;span class=&quot;string&quot;&gt;&quot;Deep JS&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactJS.ask(&lt;span class=&quot;string&quot;&gt;&quot;React JS&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Prototype" scheme="https://geekeast.github.io/tags/Prototype/"/>
    
  </entry>
  
  <entry>
    <title>Object in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsobject.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsobject.html</id>
    <published>2019-11-25T00:01:08.000Z</published>
    <updated>2019-11-25T00:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this"><a class="markdownIt-Anchor" href="#this"></a> <code>this</code></h3><blockquote><p>A function’s this references the <strong>execution context</strong> for that call, determined entirely by <strong>how the function was called</strong></p></blockquote><h4 id="scope-and-closure"><a class="markdownIt-Anchor" href="#scope-and-closure"></a> Scope and Closure</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">'Kyle'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// won't output Suzy but Kyle</span></span><br><span class="line">  <span class="keyword">var</span> teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  ask(<span class="string">"Why?"</span>)</span><br><span class="line">&#125;</span><br><span class="line">otherClass();</span><br></pre></td></tr></table></figure><h4 id="object-and-this"><a class="markdownIt-Anchor" href="#object-and-this"></a> Object and <code>this</code></h4><blockquote><p><code>Prototype chaining</code> happens after <code>this</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.teacher = <span class="string">'kyle'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  ask(<span class="string">"Why?"</span>)</span><br><span class="line">&#125;</span><br><span class="line">otherClass();</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="with-this-and-call"><a class="markdownIt-Anchor" href="#with-this-and-call"></a> with <code>this</code> and <code>call</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> myContext = &#123;</span><br><span class="line">    teacher: <span class="string">'K'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ask.call(myContext, <span class="string">"Why?"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ask is called by otherClass within the global scope</span></span><br><span class="line">otherClass();</span><br></pre></td></tr></table></figure><h4 id="namespace-pattern"><a class="markdownIt-Anchor" href="#namespace-pattern"></a> Namespace Pattern</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="comment">// this points to workshop.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workshio.ask(<span class="string">"What is implicit binding?"</span>);</span><br></pre></td></tr></table></figure><h4 id="namespace-pattern-implicit-binding"><a class="markdownIt-Anchor" href="#namespace-pattern-implicit-binding"></a> Namespace Pattern: Implicit Binding</h4><blockquote><ul><li><code>this</code> is determined during run time.</li><li><code>Implicit Binding</code> is used for <strong>code reuse</strong>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workshop1 = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask: ask</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workshop2 = &#123;</span><br><span class="line">  teacher: <span class="string">'Suzy'</span>,</span><br><span class="line">  ask: ask</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workshop1.ask(<span class="string">"How do I share a method?"</span>);</span><br><span class="line">workshop2.ask(<span class="string">"How do I share a method?"</span>);</span><br></pre></td></tr></table></figure><h4 id="namespace-to-explicit-binding"><a class="markdownIt-Anchor" href="#namespace-to-explicit-binding"></a> Namespace to Explicit binding</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workshop1 = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span></span><br><span class="line">  <span class="comment">// don't have to define ask here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workshop2 = &#123;</span><br><span class="line">  teacher: <span class="string">'Suzy'</span>,</span><br><span class="line">  <span class="comment">// don't have to define ask here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ask.call(workshop1, <span class="string">"Can I explicitly set context?"</span>);</span><br><span class="line">ask.call(workshop2, <span class="string">"Can I explicitly set context?"</span>);</span><br></pre></td></tr></table></figure><h4 id="hard-binding"><a class="markdownIt-Anchor" href="#hard-binding"></a> Hard binding</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ask is called in the global context</span></span><br><span class="line">setTimeout(workshop.ask, <span class="number">10</span>, <span class="string">"Lost this?"</span>);</span><br><span class="line"><span class="comment">// ask is called in the workshop context</span></span><br><span class="line">setTimeout(workshop.ask.bind(workshop), <span class="number">10</span>, <span class="string">"Hard bound this?"</span>);</span><br></pre></td></tr></table></figure><h3 id="new"><a class="markdownIt-Anchor" href="#new"></a> <code>new</code></h3><blockquote><ul><li>It’s created to call a function with a <strong>whole new empty object</strong> as the <strong>execution context</strong>.</li><li><code>new</code> means <strong>new empty execution context</strong>.</li></ul></blockquote><h4 id="sample"><a class="markdownIt-Anchor" href="#sample"></a> Sample</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ask will be called within an empty obejct as the execution context</span></span><br><span class="line"><span class="keyword">var</span> newEmptyObject = <span class="keyword">new</span> ask(<span class="string">"What is 'new' doing here?"</span>)</span><br></pre></td></tr></table></figure><h4 id="alternative"><a class="markdownIt-Anchor" href="#alternative"></a> Alternative</h4><ul><li>The same with <code>call()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ask will be called within an empty obejct as the execution context</span></span><br><span class="line">ask.call(&#123;&#125;, <span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><h4 id="how-it-works"><a class="markdownIt-Anchor" href="#how-it-works"></a> How it works</h4><ul><li>Create a brand new empty object</li><li><code>* Link that object to another object</code> - <code>prototype object</code></li><li>Call function with this set to the new object</li><li>If function does not return an <strong>object</strong>, assume return of <strong>this</strong>.</li></ul><h3 id="default-binding"><a class="markdownIt-Anchor" href="#default-binding"></a> Default Binding</h3><ul><li>no new keyword</li><li>no call, apply, bind</li><li>no object context like <code>asd.ask()</code></li><li><strong>yes, default binding, is the global; if strict mode, undefined binding.</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global.teacher = <span class="string">'Kyle'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// this referes to global object</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">askAgain</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="comment">// this undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is not workshop.ask, doesn't have any context object</span></span><br><span class="line"><span class="comment">// so we use the global as the context</span></span><br><span class="line">ask(<span class="string">"What's hte non-strict-mode default?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// but in strict-mode, the default context is undefined when the execution context is the global object.</span></span><br><span class="line">askAgain(<span class="string">"What's the strcit-mode default?"</span>);</span><br></pre></td></tr></table></figure><h3 id="precedence-in-this"><a class="markdownIt-Anchor" href="#precedence-in-this"></a> Precedence in <code>this</code></h3><ul><li>new</li><li>call() or apply(), bind()</li><li>context object for example <code>workshop.ask()</code></li><li>Default binding (except <code>strict mode</code>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask: <span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> (workship.ask.bind(workshop))(<span class="string">"What does this do?"</span>); <span class="comment">// undefind</span></span><br></pre></td></tr></table></figure><h3 id="arrow-function"><a class="markdownIt-Anchor" href="#arrow-function"></a> Arrow Function</h3><h4 id="this-2"><a class="markdownIt-Anchor" href="#this-2"></a> <code>!this</code></h4><blockquote><ul><li>There is <strong>no</strong> this in arrow function</li><li>Will <code>lexically</code> resolve the variable from <strong>inner</strong> to <strong>outer</strong> <code>scope</code></li><li>You can’t use <code>new</code> for an arrow function, because it doesn’t define <code>this</code> keyword.</li></ul></blockquote><h4 id="function-declaration-without-this"><a class="markdownIt-Anchor" href="#function-declaration-without-this"></a> Function Declaration without <code>this</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// undefined because object doesn't automatically create scope</span></span><br><span class="line">        <span class="built_in">console</span>.log(teacher,question);</span><br><span class="line">      &#125;</span><br><span class="line">    , <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kyle Is this lexical 'this'?</span></span><br><span class="line">workshop.ask(<span class="string">"Is this lexical 'this'?"</span>)</span><br></pre></td></tr></table></figure><h4 id="function-declaration-with-this"><a class="markdownIt-Anchor" href="#function-declaration-with-this"></a> Function Declaration with <code>this</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.teacher = <span class="string">'James'</span>;</span><br><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this refers to Timeout, then tract the prototype chain</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher,question);</span><br><span class="line">      &#125;</span><br><span class="line">    , <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// James Is this lexical 'this'?</span></span><br><span class="line">workshop.ask(<span class="string">"Is this lexical 'this'?"</span>)</span><br></pre></td></tr></table></figure><h4 id="arrow-function-with-this"><a class="markdownIt-Anchor" href="#arrow-function-with-this"></a> Arrow Function with <code>this</code></h4><blockquote><p><code>this</code> in Arrow function behaves <strong>lexically</strong>, but still relates to <code>this</code> (not its own <code>this</code>);</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kyle Is this lexical 'this'?</span></span><br><span class="line">workshop.ask(<span class="string">"Is this lexical 'this'?"</span>)</span><br></pre></td></tr></table></figure><ul><li>the <code>outside scope</code> is the <code>ask</code> function</li><li>the <code>outside scope</code> is not the setTimeout because there it encloses with <code>()</code> rather than <code>{}</code><ul><li>But not all {} are scopes - Object{}</li><li>function()<code>{}</code> is <strong>scope</strong>.</li></ul></li><li><strong>this</strong> of <code>ask</code> function is the workshop object.</li></ul><blockquote><p>it still traces <strong>this</strong>, but <code>not</code> its own.</p></blockquote><h4 id="arrow-function-without-this"><a class="markdownIt-Anchor" href="#arrow-function-without-this"></a> Arrow Function without <code>this</code></h4><blockquote><ul><li>the outside scope is <code>ask</code>, no teacher</li><li>the outside scope is <code>global</code>, no teacher</li><li><code>undefined</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">'Kyle'</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">    , <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workshop.ask(<span class="string">'What?'</span>)</span><br></pre></td></tr></table></figure><h3 id="class"><a class="markdownIt-Anchor" href="#class"></a> Class</h3><blockquote><p><code>Class</code> keyword is just a <strong>syntax sugar</strong> for a <strong>layer</strong> on top of the <code>prototype system</code>.</p></blockquote><h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(teacher)&#123;</span><br><span class="line">    <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">  &#125;</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">"Kyle"</span>);</span><br><span class="line"><span class="keyword">var</span> reactJS = <span class="keyword">new</span> Workshop(<span class="string">"Suzy"</span>);</span><br><span class="line"></span><br><span class="line">deepJS.ask(<span class="string">"asd"</span>);</span><br><span class="line">reactJS.ask(<span class="string">"asdss"</span>)</span><br></pre></td></tr></table></figure><h4 id="origin"><a class="markdownIt-Anchor" href="#origin"></a> Origin</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.protoype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">'Kyle'</span>);</span><br><span class="line"><span class="keyword">var</span> reactJS = <span class="keyword">new</span> Workshop(<span class="string">'Jame'</span>);</span><br></pre></td></tr></table></figure><h4 id="inheritance"><a class="markdownIt-Anchor" href="#inheritance"></a> Inheritance</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(teacher)&#123;</span><br><span class="line">    <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">  &#125;</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherWorkshop</span> <span class="keyword">extends</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="comment">// you don't have to define other methods already in the parent class.</span></span><br><span class="line">  speakUp(msg)&#123;</span><br><span class="line">    <span class="keyword">this</span>.ask(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> JSRecentParts = <span class="keyword">new</span> AnotherWorkshop(<span class="string">"Kyle"</span>);</span><br><span class="line">JSRecentParts.speakUp(<span class="string">"Are classes getting better?"</span>);</span><br></pre></td></tr></table></figure><h4 id="alternative-2"><a class="markdownIt-Anchor" href="#alternative-2"></a> Alternative</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workshop.protoype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// link constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnotherWorkshop</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  Workshop.call(<span class="keyword">this</span>,teacher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// link prototype</span></span><br><span class="line">Another.prototype = <span class="built_in">Object</span>.create(Workshop.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new method</span></span><br><span class="line">AnotherWorkshop.prototype.speakUp = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.ask(msg.toUppderCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the same thing</span></span><br><span class="line"><span class="keyword">var</span> JSRecentParts = <span class="keyword">new</span> AnotherWorkshop(<span class="string">"Kyle"</span>);</span><br><span class="line">JSRecentParts.speakUp(<span class="string">"Are classes getting better?"</span>);</span><br></pre></td></tr></table></figure><h4 id="super-keyword"><a class="markdownIt-Anchor" href="#super-keyword"></a> <code>super</code> keyword</h4><blockquote><p><code>super</code> is detemined during complile time - lexically scoped</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(teacher)&#123;</span><br><span class="line">    <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">  &#125;</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherWorkshop</span> <span class="keyword">extends</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  ask(msg)&#123;</span><br><span class="line">    <span class="comment">// override also called shadowing</span></span><br><span class="line">    <span class="keyword">super</span>.ask(msg.toUpperCase())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> JSRecentParts = <span class="keyword">new</span> AnotherWorkshop(<span class="string">"Kyle"</span>);</span><br><span class="line">JSRecentParts.speakUp(<span class="string">"Are classes getting better?"</span>);</span><br></pre></td></tr></table></figure><h4 id="this-still-dynamic-in-class"><a class="markdownIt-Anchor" href="#this-still-dynamic-in-class"></a> <code>this</code> still dynamic in Class</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(teacher)&#123;</span><br><span class="line">    <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">"Kyle"</span>);</span><br><span class="line">setTimeout(deepJS.ask, <span class="number">100</span>, <span class="string">"Still losing 'this'?"</span>);</span><br></pre></td></tr></table></figure><h4 id="constructor"><a class="markdownIt-Anchor" href="#constructor"></a> Constructor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(teacher)&#123;</span><br><span class="line">    <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    <span class="comment">// this will create ask() to any instance (execution context)</span></span><br><span class="line">    <span class="keyword">this</span>.ask = <span class="function"><span class="params">question</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this will create ask in prototype</span></span><br><span class="line">  <span class="comment">// ask()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepJS = <span class="keyword">new</span> Workshop(<span class="string">'Kyle'</span>);</span><br><span class="line">setTimeout(deepJS.ask, <span class="number">100</span>, <span class="string">"Is 'this' fixed?"</span>);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;this&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#this&quot;&gt;&lt;/a&gt; &lt;code&gt;this&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A function’s this references the &lt;strong&gt;execution context&lt;/strong&gt; for that call, determined entirely by &lt;strong&gt;how the function was called&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;scope-and-closure&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#scope-and-closure&quot;&gt;&lt;/a&gt; Scope and Closure&lt;/h4&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teacher = &lt;span class=&quot;string&quot;&gt;&#39;Kyle&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(teacher, question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;otherClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// won&#39;t output Suzy but Kyle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teacher = &lt;span class=&quot;string&quot;&gt;&quot;Suzy&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ask(&lt;span class=&quot;string&quot;&gt;&quot;Why?&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;otherClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;object-and-this&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#object-and-this&quot;&gt;&lt;/a&gt; Object and &lt;code&gt;this&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Prototype chaining&lt;/code&gt; happens after &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.teacher = &lt;span class=&quot;string&quot;&gt;&#39;kyle&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.teacher, question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;otherClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teacher = &lt;span class=&quot;string&quot;&gt;&quot;Suzy&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ask(&lt;span class=&quot;string&quot;&gt;&quot;Why?&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;otherClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Object" scheme="https://geekeast.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>Closure in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsclosure.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsclosure.html</id>
    <published>2019-11-24T23:28:16.000Z</published>
    <updated>2019-11-24T23:28:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="closure"><a class="markdownIt-Anchor" href="#closure"></a> Closure</h3><blockquote><p>Closure is when a function “remembers” its’ <strong>lexical scope</strong> even when the function is executed <strong>outside</strong> the lexical scope.</p></blockquote><h4 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h4><ul><li><strong>Example 1</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// waitASec close over the variable called question.</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">waitASec</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(question);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ask(<span class="string">"What is closure?"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>Example 2</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// question is preserved with the function called holdYourQuestion()</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">holdYourQuestion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myQuestion = ask(<span class="string">"What is closure"</span>);</span><br><span class="line">myQuestions();</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="close-over-what"><a class="markdownIt-Anchor" href="#close-over-what"></a> Close over What?</h4><blockquote><p>Close over variables rather than values</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">'Kyle'</span>;</span><br><span class="line"><span class="keyword">var</span> myTeacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(teacher);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">teacher = <span class="string">"Suzy"</span></span><br><span class="line">myTeacher(); <span class="comment">// live link!</span></span><br></pre></td></tr></table></figure><h4 id="interview-questions"><a class="markdownIt-Anchor" href="#interview-questions"></a> Interview Questions</h4><ul><li>Output?</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`i: <span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Output?</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> j = i;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`j: <span class="subst">$&#123;j&#125;</span>`</span>)</span><br><span class="line">  &#125;, j * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Output?</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`i: <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Why?</li></ul><blockquote><ul><li>First one, <strong>only</strong> one variables and closed over the only value</li><li>Second one, <strong>three</strong> variables and closed over respectively.</li></ul></blockquote><h3 id="module-pattern"><a class="markdownIt-Anchor" href="#module-pattern"></a> Module Pattern</h3><blockquote><p>Similar to <code>encapsulation</code></p><ul><li>Make state as <strong>Private</strong></li><li>Make function as <strong>Public</strong></li><li>Prerequisite: <strong>Closure</strong>.</li></ul></blockquote><h4 id="namespace-pattern"><a class="markdownIt-Anchor" href="#namespace-pattern"></a> Namespace Pattern</h4><blockquote><p>Problem: You can still access the teacher directly</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = &#123;</span><br><span class="line">  teacher: <span class="string">"Kyel"</span>,</span><br><span class="line">  ask(question)&#123;</span><br><span class="line">    <span class="comment">// this means </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.teacher, question);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">workshop.ask(<span class="string">"Is this a module?"</span>);</span><br></pre></td></tr></table></figure><h4 id="revealing-pattern"><a class="markdownIt-Anchor" href="#revealing-pattern"></a> Revealing Pattern</h4><blockquote><p>Module encapsulate <code>data</code> and <code>behavior</code> together. The state of a module is held by its methods via <strong>closure</strong>.</p></blockquote><ul><li>use <code>IIFE</code> for <strong>singleton</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workshop = (<span class="function"><span class="keyword">function</span> <span class="title">Module</span>(<span class="params">teacher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> publicAPI = &#123; ask, &#125;;</span><br><span class="line">  <span class="keyword">return</span> publicAPI;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// *****************</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">"Kyle"</span>);</span><br><span class="line">workshop.ask(<span class="string">"It's a module, right?"</span>);</span><br></pre></td></tr></table></figure><h4 id="factory-pattern"><a class="markdownIt-Anchor" href="#factory-pattern"></a> Factory Pattern</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WorkshopModule</span>(<span class="params">teacher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> public API = &#123;ask, &#125;;</span><br><span class="line">  <span class="keyword">return</span> publicAPI;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workshop = WorkshopModule(<span class="string">"Kyle"</span>);</span><br><span class="line">workshop.ask(<span class="string">"It's a module, right?"</span>);</span><br></pre></td></tr></table></figure><h4 id="es6-module"><a class="markdownIt-Anchor" href="#es6-module"></a> ES6 Module</h4><ul><li>This is <strong>singleton</strong> export.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">"Kyle"</span>; <span class="comment">// automatically private</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123; <span class="comment">// as public with closure on private things.</span></span><br><span class="line">  <span class="built_in">console</span>.log(teacher, question); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Import</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ask <span class="keyword">from</span> <span class="string">'workshop.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ask <span class="keyword">from</span> <span class="string">'workshop.js'</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;closure&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#closure&quot;&gt;&lt;/a&gt; Closure&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Closure is when a function “remembers” its’ &lt;strong&gt;lexical scope&lt;/strong&gt; even when the function is executed &lt;strong&gt;outside&lt;/strong&gt; the lexical scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;examples&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#examples&quot;&gt;&lt;/a&gt; Examples&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// waitASec close over the variable called question.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;waitASec&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ask(&lt;span class=&quot;string&quot;&gt;&quot;What is closure?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// question is preserved with the function called holdYourQuestion()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;holdYourQuestion&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myQuestion = ask(&lt;span class=&quot;string&quot;&gt;&quot;What is closure&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myQuestions();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Closure" scheme="https://geekeast.github.io/tags/Closure/"/>
    
  </entry>
  
  <entry>
    <title>Scope in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsscope.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsscope.html</id>
    <published>2019-11-24T11:46:28.000Z</published>
    <updated>2019-11-24T11:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scope"><a class="markdownIt-Anchor" href="#scope"></a> Scope</h3><h4 id="compiler-vs-interpreter"><a class="markdownIt-Anchor" href="#compiler-vs-interpreter"></a> Compiler vs Interpreter</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxNDg2NzA2" title="https://www.zhihu.com/question/21486706">Reference<i class="fa fa-external-link"></i></span></li><li><code>Compilter</code>: compile source code to machine code and run</li><li><code>Interpreter</code>: interpret and run the code at the same time</li></ul><blockquote><p>Javascript is <strong>not</strong> <code>interpreted</code> langauage. It’s a <code>compiled</code> language with <code>two pass processing</code>. One is compling the code and declare all the <strong>scope</strong> and <strong>left hand things</strong>. Another is evaluating the <strong>right hand things</strong> and run the code eventually.</p></blockquote><h4 id="how-compiler-works"><a class="markdownIt-Anchor" href="#how-compiler-works"></a> <span class="exturl" data-url="aHR0cHM6Ly9mcm9udGVuZG1hc3RlcnMuY29tL2NvdXJzZXMvZGVlcC1qYXZhc2NyaXB0LXYzL2xleGljYWwtc2NvcGUtcmV2aWV3Lw==" title="https://frontendmasters.com/courses/deep-javascript-v3/lexical-scope-review/">How Compiler Works<i class="fa fa-external-link"></i></span></h4><ul><li><strong>Simple</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declare teacher in global scope</span></span><br><span class="line"><span class="keyword">var</span> teacher = <span class="string">'kyle'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create another scope within the global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// declare teacher in otherClass scope</span></span><br><span class="line">  <span class="keyword">var</span> teacher = <span class="string">'Suzy'</span>;</span><br><span class="line">  <span class="comment">// it doesn't have any effect on our scopes</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Welcome"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create another scope within the global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// declare question in ask scope</span></span><br><span class="line">  <span class="keyword">var</span> question = <span class="string">'Why?'</span>;</span><br><span class="line">  <span class="comment">// call the question in the ask scope</span></span><br><span class="line">  <span class="built_in">console</span>.log(question);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the compiling stage for create buckets and marbles has been done</span></span><br><span class="line"><span class="comment">// then will be handed over to the v8 and then run the code</span></span><br><span class="line">otherClass();</span><br><span class="line">ask();</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>Strict Mode Off</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">"kyle"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  <span class="comment">// will automatcially declare a variable in global scope</span></span><br><span class="line">  topic = <span class="string">"React"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Welcome!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">otherClass();</span><br><span class="line"></span><br><span class="line">teacher; <span class="comment">// Suzy</span></span><br><span class="line">topic; <span class="comment">// "React"</span></span><br></pre></td></tr></table></figure><ul><li><strong>Strict Mode On</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="string">"kyle"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  <span class="comment">// will throw a ReferenceError</span></span><br><span class="line">  topic = <span class="string">"React"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Welcome!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">otherClass();</span><br><span class="line"></span><br><span class="line">teacher; <span class="comment">// Suzy</span></span><br><span class="line">topic; <span class="comment">// "React"</span></span><br></pre></td></tr></table></figure><ul><li><strong>Nested Scope</strong></li></ul><blockquote><p>Search from inner to outer not vice versa.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">"kyle"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(teacher, question);</span><br><span class="line">  &#125;</span><br><span class="line">  ask(<span class="string">"Why?"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">otherCkass();</span><br><span class="line">ask(<span class="string">"???"</span>) <span class="comment">// referenceError</span></span><br></pre></td></tr></table></figure><h4 id="function-types"><a class="markdownIt-Anchor" href="#function-types"></a> Function Types</h4><ul><li><strong>Function Declaration</strong></li></ul><blockquote><p>function teacher is declared in <strong>global</strong> scope</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function teacher is declared in global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">teacher</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Named Function Expression</strong></li></ul><blockquote><p>myTeacher is declared in the <strong>global</strong> scope but function <code>anotherTeacher</code> is declared in the <strong>myTeacher</strong> scope</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myTeacher = <span class="function"><span class="keyword">function</span> <span class="title">anotherTeacher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anotherTeacher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Anonymous Function Expression</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Arrow Function</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">/*..*/</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Function Types Hierarchy</strong></p><ul><li><strong>Top 1</strong>. (Names) Function <code>Declaration</code></li><li><strong>Top 2</strong>. Named Function <code>Expression</code></li><li><strong>Top 3</strong>. <code>Anonymous</code> Function Expression</li></ul></li><li><p><strong>Prefer the Named Function Expression</strong></p><ul><li>Reason 1: Self-reference for <strong>recursion</strong></li><li>Reason 2: More <strong>debuggable</strong> stack traces</li><li>Reason 3: More <strong>self-documenting</strong> code</li></ul></li></ul><h4 id="iife"><a class="markdownIt-Anchor" href="#iife"></a> IIFE</h4><blockquote><p>Immediately Invoked Function Expression</p></blockquote><ul><li><strong>Simple</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">'Kyle'</span>;</span><br><span class="line"><span class="comment">// IIFE</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">anotherTeacher</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> teacher = <span class="string">"Suzy"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(teacher);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(teacher);</span><br></pre></td></tr></table></figure><ul><li><strong>normal way of doing async/await with try/catch</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  teacher = fetchTeacher()</span><br><span class="line">&#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'kyle'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>make assignment happens only once</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = (</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetchTeacher();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'kyle'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><h4 id="block-scoping"><a class="markdownIt-Anchor" href="#block-scoping"></a> Block Scoping</h4><ul><li><strong>Create a new Scope</strong></li></ul><blockquote><p>Not all <code>{}</code> creates scopes if they didn’t use <code>const</code> or <code>let</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="string">"Kyle"</span>;</span><br><span class="line"><span class="comment">// the same way to avoid name collision</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> teacher = <span class="string">"Suzy"</span>; <span class="comment">// have const or let is the necessary to make it a as a scope</span></span><br><span class="line">  <span class="built_in">console</span>.log(teacher)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(teacher);</span><br></pre></td></tr></table></figure><ul><li><strong>Hints!</strong></li></ul><blockquote><p><code>let</code> and <code>const</code> shows this is a new scope!</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y)&#123;</span><br><span class="line">    <span class="comment">// let make if statement as a new scope</span></span><br><span class="line">    <span class="keyword">let</span> tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> y-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>let</code> vs <code>var</code></strong></li></ul><blockquote><ul><li>use <code>let</code> in <code>block scope</code></li><li>use <code>var</code> for <code>reusing</code>, because it can be level up to global.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lookUpRecord</span>(<span class="params">searchStr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// var shows this is not block scope! id belongs to function scope!</span></span><br><span class="line">    <span class="keyword">var</span> id = getRecord( searchStr );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">var</span> id = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> id; <span class="comment">// will not be undefined.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>const</code> Usage</strong></li></ul><blockquote><ul><li>only use <code>const</code> for <strong>primitive immutable</strong> values, just like <code>final</code> in Java</li><li>For <strong>non-primitive</strong> types, <code>const</code> means this variable cannot be <strong>reassigned</strong>. But it can be changed. So you don’t have to use <code>const</code>.</li><li>use <code>Object.freeze()</code> to make an object final in <code>strict-mode</code></li></ul></blockquote><h4 id="hoisting"><a class="markdownIt-Anchor" href="#hoisting"></a> Hoisting</h4><blockquote><ul><li>javascript engine does <strong>not</strong> re-organize your code and do the <strong>hoisting</strong></li><li>javascript only <strong>parse</strong> the code in a different way</li></ul></blockquote><ul><li><strong>Variable Declaration</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student;</span><br><span class="line">teacher;</span><br><span class="line">student = <span class="string">'you'</span>;</span><br><span class="line">teacher = <span class="string">'kyle'</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>After <code>Hoisting</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student;</span><br><span class="line"><span class="keyword">var</span> teacher;</span><br><span class="line">student = <span class="string">'you'</span>;</span><br><span class="line">teacher = <span class="string">'kyle'</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>Function Declaration</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">teacher();</span><br><span class="line">otherTeacher();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">teacher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Kyle'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherTeacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Suzy'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>After <code>Hoisting</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">teacher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Kyle'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherTeacher;</span><br><span class="line"></span><br><span class="line">teacher();</span><br><span class="line">otherTeacher(); <span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line">otherTeacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Suzy"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>let</code> and <code>const</code> on hoisting</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  teacher = <span class="string">'Kyle'</span>; <span class="comment">// TDZ error</span></span><br><span class="line">  <span class="keyword">let</span> teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>let</code> <strong>hoisted</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line">foo();  <span class="comment">// This is perfectly valid</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;scope&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#scope&quot;&gt;&lt;/a&gt; Scope&lt;/h3&gt;
&lt;h4 id=&quot;compiler-vs-interpreter&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#compiler-vs-interpreter&quot;&gt;&lt;/a&gt; Compiler vs Interpreter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21486706&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compilter&lt;/code&gt;: compile source code to machine code and run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interpreter&lt;/code&gt;: interpret and run the code at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;interpreted&lt;/code&gt; langauage. It’s a &lt;code&gt;compiled&lt;/code&gt; language with &lt;code&gt;two pass processing&lt;/code&gt;. One is compling the code and declare all the &lt;strong&gt;scope&lt;/strong&gt; and &lt;strong&gt;left hand things&lt;/strong&gt;. Another is evaluating the &lt;strong&gt;right hand things&lt;/strong&gt; and run the code eventually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;how-compiler-works&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-compiler-works&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://frontendmasters.com/courses/deep-javascript-v3/lexical-scope-review/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How Compiler Works&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// declare teacher in global scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teacher = &lt;span class=&quot;string&quot;&gt;&#39;kyle&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// create another scope within the global scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;otherClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// declare teacher in otherClass scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teacher = &lt;span class=&quot;string&quot;&gt;&#39;Suzy&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// it doesn&#39;t have any effect on our scopes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Welcome&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// create another scope within the global scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// declare question in ask scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; question = &lt;span class=&quot;string&quot;&gt;&#39;Why?&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// call the question in the ask scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(question);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the compiling stage for create buckets and marbles has been done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// then will be handed over to the v8 and then run the code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;otherClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ask();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Lexical Scope" scheme="https://geekeast.github.io/tags/Lexical-Scope/"/>
    
  </entry>
  
  <entry>
    <title>Equality in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jsequality.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jsequality.html</id>
    <published>2019-11-24T11:37:56.000Z</published>
    <updated>2019-11-24T11:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="abastract-equality-comparison"><a class="markdownIt-Anchor" href="#abastract-equality-comparison"></a> Abastract Equality Comparison</h3><h4 id="vs"><a class="markdownIt-Anchor" href="#vs"></a> <code>==</code> vs <code>===</code></h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1hYnN0cmFjdC1lcXVhbGl0eS1jb21wYXJpc29u" title="https://www.ecma-international.org/ecma-262/9.0/#sec-abstract-equality-comparison">SPEC<i class="fa fa-external-link"></i></span></li></ul><blockquote><p>Only use the <code>==</code> when you know the type especially when implicit coercion is very helpful.</p></blockquote><h4 id="allows-for-coercion"><a class="markdownIt-Anchor" href="#allows-for-coercion"></a> <code>==</code> allows for coercion</h4><ul><li><code>null</code> equal to <code>undefined</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws1 = &#123;<span class="attr">topic</span>: <span class="literal">null</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ws2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (ws1.topic === <span class="literal">null</span> || ws1.topic === <span class="literal">undefined</span>)</span><br><span class="line"><span class="keyword">if</span> (ws1.topic == <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// better and simple!</span></span><br><span class="line"><span class="keyword">if</span> (ws2.topic === <span class="literal">null</span> || ws2.topic === <span class="literal">undefined</span>)</span><br><span class="line"><span class="keyword">if</span> (ws2.topic == <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>any is number, compare number</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele1 = <span class="number">1</span>；</span><br><span class="line"><span class="keyword">const</span> ele2 = ele.value; <span class="comment">// I don't know the type!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if you want to do the comparison between numebrs</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(ele1) === <span class="built_in">Number</span>(ele2))</span><br><span class="line"></span><br><span class="line"><span class="comment">// why not use</span></span><br><span class="line"><span class="keyword">if</span> (ele1 == ele2)</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="disallows-for-coercion"><a class="markdownIt-Anchor" href="#disallows-for-coercion"></a> <code>===</code> disallows for coercion</h4><ul><li>use <code>===</code> is safe because it’s for the case that <strong>you don’t know the types</strong>.</li></ul><blockquote><p>But <code>implicit coercion</code> is faster than you do.</p></blockquote><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><ul><li>If you know the types, <code>==</code> is better.</li><li>Otherwise you clould use <code>===</code> for safety.</li></ul><blockquote><p>Be careful of <code>-0</code> when you use implicit <code>coercion</code></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;abastract-equality-comparison&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#abastract-equality-comparison&quot;&gt;&lt;/a&gt; Abastract Equality Comparison&lt;/h3&gt;
&lt;h4 id=&quot;vs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vs&quot;&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; vs &lt;code&gt;===&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/#sec-abstract-equality-comparison&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SPEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Only use the &lt;code&gt;==&lt;/code&gt; when you know the type especially when implicit coercion is very helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;allows-for-coercion&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#allows-for-coercion&quot;&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; allows for coercion&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; equal to &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ws1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;topic&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ws2 = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ws1.topic === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; || ws1.topic === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ws1.topic == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// better and simple!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ws2.topic === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; || ws2.topic === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ws2.topic == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;any is number, compare number&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ele1 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ele2 = ele.value; &lt;span class=&quot;comment&quot;&gt;// I don&#39;t know the type!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if you want to do the comparison between numebrs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(ele1) === &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(ele2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// why not use&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ele1 == ele2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Equality" scheme="https://geekeast.github.io/tags/Equality/"/>
    
  </entry>
  
  <entry>
    <title>Coercion in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/jscoercion.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/jscoercion.html</id>
    <published>2019-11-24T11:02:17.000Z</published>
    <updated>2019-11-24T11:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="abstract-operations"><a class="markdownIt-Anchor" href="#abstract-operations"></a> Abstract Operations</h3><blockquote><p>ToPrimitive, ToString, ToNumber, ToBoolean</p></blockquote><h4 id><a class="markdownIt-Anchor" href="#"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy10b3ByaW1pdGl2ZQ==" title="https://www.ecma-international.org/ecma-262/9.0/#sec-toprimitive"><strong>ToPrimitive(hint)</strong><i class="fa fa-external-link"></i></span></h4><blockquote><p>convert from <code>non-primitive</code> to <code>primitive</code></p></blockquote><ul><li>Hint: number<ul><li><code>valueOf()</code></li><li><code>toString()</code></li><li><code>valueOf()</code></li></ul></li><li>Hint: string<ul><li><code>toString()</code></li><li><code>valueOf()</code></li><li><code>toString()</code></li></ul></li></ul><h4 id="tostring"><a class="markdownIt-Anchor" href="#tostring"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy10b3N0cmluZw==" title="https://www.ecma-international.org/ecma-262/9.0/#sec-tostring">ToString<i class="fa fa-external-link"></i></span></h4><ul><li><strong>Primitive Type</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">null -&gt; <span class="string">'null'</span></span><br><span class="line">undefined -&gt; <span class="string">'undefined'</span></span><br><span class="line"><span class="literal">true</span> -&gt; <span class="string">'true'</span></span><br><span class="line"><span class="literal">false</span> -&gt; <span class="string">'false'</span></span><br><span class="line">3.14159 -&gt; <span class="string">'3.14159'</span></span><br><span class="line">0 -&gt; <span class="string">'0'</span></span><br><span class="line">-0 -&gt; <span class="string">'0'</span> <span class="comment"># !</span></span><br></pre></td></tr></table></figure><ul><li><strong>Weird Conversion from Array</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[] -&gt; <span class="string">''</span></span><br><span class="line">[1,2,3] -&gt; <span class="string">'1,2,3'</span></span><br><span class="line">[null, undefined] -&gt; <span class="string">','</span></span><br><span class="line">[[[],[],[]],[]] -&gt; <span class="string">',,,'</span></span><br><span class="line">[,,,,] -&gt; <span class="string">',,,'</span></span><br></pre></td></tr></table></figure><ul><li><strong>Weird Conversion from Object</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; -&gt; <span class="string">"[object Object]"</span></span><br><span class="line">&#123;a:2&#125; -&gt; <span class="string">"[object Object]"</span></span><br></pre></td></tr></table></figure><ul><li><strong>Override <code>toString()</code> for <code>object</code></strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># overRide toString() method to return 'X'</span></span><br><span class="line">&#123; <span class="function"><span class="title">toString</span></span>()&#123;<span class="built_in">return</span> <span class="string">"X"</span>;&#125;&#125; -&gt; <span class="string">"X"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="tonumber"><a class="markdownIt-Anchor" href="#tonumber"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy10b251bWJlcg==" title="https://www.ecma-international.org/ecma-262/9.0/#sec-tonumber">ToNumber<i class="fa fa-external-link"></i></span></h4><blockquote><p>= <code>ToPrimitive(number)</code></p></blockquote><ul><li><strong>Conversion from <code>primitive</code> type</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> -&gt; 0 <span class="comment"># weird!</span></span><br><span class="line"><span class="string">"0"</span> -&gt; 0 <span class="comment"># not weird!</span></span><br><span class="line"><span class="string">" 009 "</span> -&gt; 9</span><br><span class="line"><span class="string">"3.14159"</span> -&gt; 3.14159</span><br><span class="line"><span class="string">"0."</span> -&gt; 0</span><br><span class="line"><span class="string">".0"</span> -&gt; 0</span><br><span class="line"><span class="string">"."</span> -&gt; NaN  <span class="comment">#!</span></span><br><span class="line"><span class="string">"0xaf"</span> -&gt; 175</span><br><span class="line"><span class="literal">false</span> -&gt; 0</span><br><span class="line"><span class="literal">true</span> -&gt; 1</span><br><span class="line">null -&gt; 0 <span class="comment">#!</span></span><br><span class="line">undefined -&gt; NaN</span><br></pre></td></tr></table></figure><ul><li><strong>Conversion from <code>non-primitive</code> type</strong></li></ul><blockquote><p>will invoke the <code>toPrimitive(Number)</code> abstract operaiton</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">""</span>] -&gt; 0</span><br><span class="line">[<span class="string">"0"</span>] -&gt; 0</span><br><span class="line">[<span class="string">"-0"</span>] -&gt; -0</span><br><span class="line">[null] -&gt; 0</span><br><span class="line">[undefined] -&gt; 0</span><br><span class="line">[1,2,3] -&gt; NaN</span><br><span class="line">[[[[]]]] -&gt; 0</span><br><span class="line">&#123;..&#125; -&gt; NaN</span><br></pre></td></tr></table></figure><ul><li><strong>Override <code>valueOf()</code> for object</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; valueOf()&#123;<span class="keyword">return</span> <span class="number">3</span>&#125;&#125; -&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><strong>Operation</strong> <code>valueOf()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOf()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="toboolean"><a class="markdownIt-Anchor" href="#toboolean"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy10b2Jvb2xlYW4=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-toboolean">ToBoolean<i class="fa fa-external-link"></i></span></h4><blockquote><p>ToBoolean only does <code>look up</code>, do <strong>not</strong> invode any other <code>abstract operations</code></p></blockquote><ul><li><strong>False</strong><ul><li><code>&quot;&quot;</code></li><li><code>0, -0</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>undefined</code></li><li><code>false</code></li></ul></li><li><strong>True</strong><ul><li><code>&quot;foo&quot;</code></li><li><code>23</code></li><li><code>{a:'1'}</code></li><li><code>[1,3]</code></li><li><code>function(){...}</code></li><li><code>true</code></li><li>…</li></ul></li></ul><h3 id="explicit-coercion"><a class="markdownIt-Anchor" href="#explicit-coercion"></a> Explicit Coercion</h3><h4 id="to-string"><a class="markdownIt-Anchor" href="#to-string"></a> to string</h4><ul><li><strong>use <code>${}</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> y = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="string">`a asdasdasd <span class="subst">$&#123;y&#125;</span>`</span> <span class="comment">// be will be coercied to string implicitly</span></span><br></pre></td></tr></table></figure><ul><li><strong>use <code>+</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">"a"</span> + b <span class="comment">// be will be coercied to string implicitly</span></span><br></pre></td></tr></table></figure><ul><li><strong>use <code>Array.prototype.join()</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].join(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>use <code>toString()</code> of a non-primitive type</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = &#123;&#125;</span><br><span class="line">x.toString();</span><br></pre></td></tr></table></figure><ul><li><strong>use <code>String()</code>: Recommended</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="to-number"><a class="markdownIt-Anchor" href="#to-number"></a> to number</h4><ul><li><strong>use <code>+</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">"324"</span> <span class="comment">// wiil be converted to a number</span></span><br></pre></td></tr></table></figure><ul><li><strong>use <code>Number()</code>: Recommended</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><h4 id="to-boolean"><a class="markdownIt-Anchor" href="#to-boolean"></a> to boolean</h4><ul><li><strong>use <code>!!</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!a.b</span><br></pre></td></tr></table></figure><ul><li><strong>use <code>Boolean()</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="implicit-coercion"><a class="markdownIt-Anchor" href="#implicit-coercion"></a> Implicit Coercion</h3><blockquote><p>Boxing: Wrap primitive types up as Objects</p></blockquote><ul><li>Just let the boxing happens which has performance benefits.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"abc"</span>;</span><br><span class="line">a.length; <span class="comment">// will be boxed as an object</span></span><br><span class="line">a.toUpperCase() <span class="comment">// will be boxed as an object</span></span><br></pre></td></tr></table></figure><h3 id="corner-case"><a class="markdownIt-Anchor" href="#corner-case"></a> Corner Case</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">" \t\n"</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">NaN</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">Number</span>([]) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// ！NaN</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="literal">null</span>]) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="number">-0</span>) <span class="comment">// "0"</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>) <span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>) <span class="comment">// "undefined"</span></span><br><span class="line"><span class="built_in">String</span>( [<span class="literal">null</span>] ) <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">String</span>( [<span class="literal">undefined</span>] ) <span class="comment">// ""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>( <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)); <span class="literal">true</span> <span class="comment">// the object exists</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>&lt;<span class="number">2</span>&lt;<span class="number">3</span> <span class="comment">// true</span></span><br><span class="line">(<span class="number">1</span>&lt;<span class="number">2</span>)&lt;<span class="number">3</span></span><br><span class="line"><span class="number">1</span>&lt;<span class="number">3</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">Number</span>(a) <span class="comment">// 0</span></span><br><span class="line">a = <span class="string">'  \t\n'</span></span><br><span class="line"><span class="built_in">Number</span>(a) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;abstract-operations&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#abstract-operations&quot;&gt;&lt;/a&gt; Abstract Operations&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ToPrimitive, ToString, ToNumber, ToBoolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/#sec-toprimitive&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;ToPrimitive(hint)&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;convert from &lt;code&gt;non-primitive&lt;/code&gt; to &lt;code&gt;primitive&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hint: number
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hint: string
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;tostring&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tostring&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/#sec-tostring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ToString&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Primitive Type&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;null -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;null&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;undefined -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;false&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.14159 -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;3.14159&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-0 -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Weird Conversion from Array&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1,2,3] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;1,2,3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[null, undefined] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[],[],[]],[]] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;,,,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[,,,,] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;,,,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Weird Conversion from Object&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;a:2&amp;#125; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Override &lt;code&gt;toString()&lt;/code&gt; for &lt;code&gt;object&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# overRide toString() method to return &#39;X&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;X&quot;&lt;/span&gt;;&amp;#125;&amp;#125; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Coercion" scheme="https://geekeast.github.io/tags/Coercion/"/>
    
  </entry>
  
  <entry>
    <title>Types in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/js-types.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/js-types.html</id>
    <published>2019-11-24T07:32:16.000Z</published>
    <updated>2019-11-24T07:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="types"><a class="markdownIt-Anchor" href="#types"></a> Types</h3><blockquote><p>In Javascript, statement “every thing is a an object” is <strong>wrong</strong>. Primitive types are not objects. But some of them can <strong>behave</strong> like objects.</p></blockquote><h4 id><a class="markdownIt-Anchor" href="#"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1wcmltaXRpdmUtdmFsdWU=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-primitive-value"><strong>Primitive Types</strong><i class="fa fa-external-link"></i></span></h4><blockquote><p>In Javascript, <code>variable</code> doesn’t have types, <code>value</code> have.</p></blockquote><ul><li><code>Undefined</code>: <strong>created</strong> but has <strong>no</strong> value; <strong>default</strong> value</li><li><code>Null</code>: represents the intentional absence of any <strong>object</strong> value</li><li><code>Boolean</code>: <code>true</code> or <code>false</code> (not <code>1</code> and <code>0</code>); can behave like an object: <code>Boolean</code></li><li><code>Number</code>: <code>NaN</code>, <code>-0</code>, <code>0</code>，<code>-Infinite</code>, <code>Infinite</code>and others; can behave like an object: <code>Number</code></li><li><code>String</code>: <code>''</code> and other; can behave like an object: <code>String</code></li><li><code>Symbol</code>: <strong>unique</strong> and <strong>non-string</strong></li></ul><h4 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy10ZXJtcy1hbmQtZGVmaW5pdGlvbnMtb2JqZWN0" title="https://www.ecma-international.org/ecma-262/9.0/#sec-terms-and-definitions-object"><strong>Object</strong><i class="fa fa-external-link"></i></span></h4><blockquote><p>a collection of properties; a sinle prototype</p></blockquote><ul><li><code>null</code></li><li><code>array</code></li><li><code>function</code></li><li>…</li></ul><h4 id="quick-example"><a class="markdownIt-Anchor" href="#quick-example"></a> Quick Example</h4><ul><li><strong>Normal Parts</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">// undefined;</span></span><br><span class="line"></span><br><span class="line">v = <span class="string">'1'</span>; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">2</span>; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line">v = <span class="literal">true</span>; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">v = &#123;&#125;; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line">v = <span class="built_in">Symbol</span>(); <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>Weird Parts</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> doesntExist) <span class="comment">// undefined! I think it should be undeclared.</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="literal">null</span>; <span class="built_in">console</span>.log(v) <span class="comment">// object! why not null?</span></span><br><span class="line">v = <span class="function"><span class="keyword">function</span>(<span class="params"></span>); <span class="title">console</span>.<span class="title">log</span>(<span class="params">v</span>) // <span class="title">function</span>! <span class="title">what</span>? <span class="title">why</span> <span class="title">not</span> <span class="title">object</span>?</span></span><br><span class="line">v = [1,2,3]; console.log(v); // object! strange! and what a mess!</span><br></pre></td></tr></table></figure><ul><li><strong>Weird Parts Exploration</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(doesnExist) <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="literal">null</span>; <span class="built_in">console</span>.log(v === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> v === <span class="string">'function'</span>); <span class="comment">// true</span></span><br><span class="line">v = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(v)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="emptiness"><a class="markdownIt-Anchor" href="#emptiness"></a> Emptiness</h3><ul><li><code>Undeclared</code>; <strong>not declared</strong>;</li><li><code>Uninitialized</code>: <strong>declared</strong> but <strong>cannot be accessed</strong> to; <code>Temporal Dead Zone</code>.</li><li><code>Undefined</code> <strong>declared</strong> but has <strong>no value</strong>;</li><li><code>null</code>: an <strong>object</strong> with value of <strong>null</strong>;</li><li><code>NaN</code>: a <strong>number</strong> but an <strong>invalid</strong> number;</li></ul><h3 id="special-value"><a class="markdownIt-Anchor" href="#special-value"></a> Special value</h3><h4 id="special-nan"><a class="markdownIt-Anchor" href="#special-nan"></a> Special NaN</h4><ul><li><strong>String to Number</strong> by <code>Number()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myAge = <span class="built_in">Number</span>(<span class="string">'0o46'</span>); <span class="comment">// octal number for 46</span></span><br><span class="line"><span class="keyword">var</span> myNextAge = <span class="built_in">Number</span>(<span class="string">'39'</span>); <span class="comment">// 39</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ''-&gt; 0; '-0' -&gt; 0; infinite -&gt; NaN; -infinite -&gt; NaN</span></span><br><span class="line"><span class="keyword">var</span> myCatsAge = <span class="built_in">Number</span>(<span class="string">'n/a'</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// coerce to number at first</span></span><br><span class="line">myAge - <span class="string">"my son's age"</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li><strong>Equality on NaN</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myCatsAge === myCatsAge; <span class="comment">// false!</span></span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1pc25hbi1udW1iZXI=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-isnan-number"><strong>isNaN</strong><i class="fa fa-external-link"></i></span>: implicit coercion happens</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(myAge); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(myCatsAge) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">"my son's age"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1udW1iZXIuaXNuYW4=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-number.isnan"><strong>Number.isNaN()</strong><i class="fa fa-external-link"></i></span>: no coercion happens</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(myCatsAge); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"my son's age"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1zYW1ldmFsdWU=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-samevalue"><strong>Strict Check</strong><i class="fa fa-external-link"></i></span></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'hello'</span>, <span class="literal">NaN</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>Don’t use <code>undefined</code>, <code>null</code>, <code>false</code>, <code>-1</code>, <code>0</code> to replace <code>NaN</code>. <code>NaN</code> is the <code>only</code> proper representation of an <code>invalid</code> <strong>number</strong>.</li></ul><h4 id="special-0"><a class="markdownIt-Anchor" href="#special-0"></a> Special -0</h4><blockquote><p><code>Zero</code> with <strong>direction</strong> <code>minus</code></p></blockquote><ul><li><strong>Weird Parts</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trendRate = <span class="number">-0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(trendRate === <span class="number">-0</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(trendRate.toString()) <span class="comment">// "0" !</span></span><br><span class="line"><span class="built_in">console</span>.log(trendRate === <span class="number">0</span>) <span class="comment">// true !</span></span><br><span class="line"><span class="built_in">console</span>.log(trendRate &lt; <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(trendRate &gt; <span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1zYW1ldmFsdWU=" title="https://www.ecma-international.org/ecma-262/9.0/#sec-samevalue"><strong>Strict check</strong><i class="fa fa-external-link"></i></span></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(trendRate, <span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(trendRate, <span class="number">0</span>) <span class="comment">// false;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Obtain Direction</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-3</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">3</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-0</span>)); <span class="comment">// -0!</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>)); <span class="comment">// 0!</span></span><br></pre></td></tr></table></figure><ul><li><strong>Custom Direction Getter</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v !== <span class="number">0</span> ? <span class="built_in">Math</span>.sign(v) : <span class="built_in">Object</span>.is(v, <span class="number">-0</span>) ? <span class="number">-1</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">sign(<span class="number">-3</span>) <span class="comment">// -1</span></span><br><span class="line">sign(<span class="number">3</span>) <span class="comment">// 1</span></span><br><span class="line">sign(<span class="number">-0</span>) <span class="comment">// -1</span></span><br><span class="line">sign(<span class="number">0</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="constructor-time"><a class="markdownIt-Anchor" href="#constructor-time"></a> Constructor Time</h3><ul><li>You should use <code>new</code> to build <code>constructor</code> when</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">Function</span>();</span><br><span class="line"><span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">RegExp</span>();</span><br><span class="line"><span class="built_in">Error</span>();</span><br></pre></td></tr></table></figure><ul><li>You should avoid <code>new</code> when</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>();</span><br><span class="line"><span class="built_in">Number</span>();</span><br><span class="line"><span class="built_in">Boolean</span>()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;types&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#types&quot;&gt;&lt;/a&gt; Types&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In Javascript, statement “every thing is a an object” is &lt;strong&gt;wrong&lt;/strong&gt;. Primitive types are not objects. But some of them can &lt;strong&gt;behave&lt;/strong&gt; like objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/#sec-primitive-value&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Primitive Types&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In Javascript, &lt;code&gt;variable&lt;/code&gt; doesn’t have types, &lt;code&gt;value&lt;/code&gt; have.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Undefined&lt;/code&gt;: &lt;strong&gt;created&lt;/strong&gt; but has &lt;strong&gt;no&lt;/strong&gt; value; &lt;strong&gt;default&lt;/strong&gt; value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Null&lt;/code&gt;: represents the intentional absence of any &lt;strong&gt;object&lt;/strong&gt; value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (not &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;); can behave like an object: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number&lt;/code&gt;: &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;-Infinite&lt;/code&gt;, &lt;code&gt;Infinite&lt;/code&gt;and others; can behave like an object: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;: &lt;code&gt;&#39;&#39;&lt;/code&gt; and other; can behave like an object: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol&lt;/code&gt;: &lt;strong&gt;unique&lt;/strong&gt; and &lt;strong&gt;non-string&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/#sec-terms-and-definitions-object&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;a collection of properties; a sinle prototype&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;quick-example&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#quick-example&quot;&gt;&lt;/a&gt; Quick Example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Normal Parts&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;// undefined;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;//number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;// boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = &amp;#123;&amp;#125;; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;// object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(); &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; v); &lt;span class=&quot;comment&quot;&gt;// symbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
      <category term="Types" scheme="https://geekeast.github.io/tags/Types/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming</title>
    <link href="https://geekeast.github.io/Computer%20Science/functional%20programming/functionalprogramming.html"/>
    <id>https://geekeast.github.io/Computer Science/functional programming/functionalprogramming.html</id>
    <published>2019-11-24T07:18:43.000Z</published>
    <updated>2019-11-24T07:18:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="functional-programming"><a class="markdownIt-Anchor" href="#functional-programming"></a> Functional Programming</h3><blockquote><p>extract side effect rather than terminate it</p></blockquote><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2phdmFzY3JpcHQtc2NlbmUvbWFzdGVyLXRoZS1qYXZhc2NyaXB0LWludGVydmlldy13aGF0LWlzLWZ1bmN0aW9uYWwtcHJvZ3JhbW1pbmctN2YyMThjNjhiM2Ew" title="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0">Functional Programming<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2phdmFzY3JpcHQtc2NlbmUvbWFzdGVyLXRoZS1qYXZhc2NyaXB0LWludGVydmlldy13aGF0LWlzLWEtcHVyZS1mdW5jdGlvbi1kMWMwNzZiZWM5NzY=" title="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976">Pure Function<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9mcm9udGVuZG1hc3RlcnMuY29tL2NvdXJzZXMvZnVuY3Rpb25hbC1qcy1saXRlL3NpZGUtZWZmZWN0cy8=" title="https://frontendmasters.com/courses/functional-js-lite/side-effects/">Side Effect<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2xlYXJueW91YWhhc2tlbGwuY29tL2NoYXB0ZXJz" title="http://learnyouahaskell.com/chapters">Learn you a haskell for great good<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5jcy5jbXUuZWR1L34xNTE1MC9pbmRleC5odG1s" title="http://www.cs.cmu.edu/~15150/index.html">FP CMU Course<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5hcWVlLm5ldC9wb3N0L3doeS1oYXNrZWxsLWlzLXdvcnRoLWxlYXJuaW5nLmh0bWw=" title="http://www.aqee.net/post/why-haskell-is-worth-learning.html">Haskell<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXItbGFuZy5vcmcv" title="https://elixir-lang.org/">Elixir<i class="fa fa-external-link"></i></span></li></ul><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;functional-programming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#functional-programming&quot;&gt;&lt;/a&gt; Functional Programming&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;extract side effect rather than terminate it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pure Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frontendmasters.com/courses/functional-js-lite/side-effects/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Side Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/chapters&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Learn you a haskell for great good&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.cmu.edu/~15150/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FP CMU Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aqee.net/post/why-haskell-is-worth-learning.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://elixir-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="https://geekeast.github.io/categories/Computer-Science/"/>
    
      <category term="Functional Programming" scheme="https://geekeast.github.io/categories/Computer-Science/Functional-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Float Issue in Javascript</title>
    <link href="https://geekeast.github.io/Developer/language/javascript/floatoverflow.html"/>
    <id>https://geekeast.github.io/Developer/language/javascript/floatoverflow.html</id>
    <published>2019-11-24T06:32:51.000Z</published>
    <updated>2019-11-24T06:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="equality-check"><a class="markdownIt-Anchor" href="#equality-check"></a> Equality Check</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">0.3</span> - (<span class="number">0.1</span>+<span class="number">0.2</span>)) &lt; <span class="number">1e-6</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;equality-check&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#equality-check&quot;&gt;&lt;/a&gt; Equality Check&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; - (&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;1e-6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Developer" scheme="https://geekeast.github.io/categories/Developer/"/>
    
      <category term="Language" scheme="https://geekeast.github.io/categories/Developer/Language/"/>
    
      <category term="Javascript" scheme="https://geekeast.github.io/categories/Developer/Language/Javascript/"/>
    
    
  </entry>
  
</feed>
